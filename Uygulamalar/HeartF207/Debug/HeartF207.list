
HeartF207.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072e4  08000184  08000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08007468  08007468  00008468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007698  08007698  000091d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007698  08007698  00008698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076a0  080076a0  000091d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076a0  080076a0  000086a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080076a4  080076a4  000086a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  080076a8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b14  200001d8  08007880  000091d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cec  08007880  00009cec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d08a  00000000  00000000  00009201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c53  00000000  00000000  0001628b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  00018ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008b5  00000000  00000000  00019ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022246  00000000  00000000  0001a375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd15  00000000  00000000  0003c5bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd896  00000000  00000000  0004c2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00109b66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036ec  00000000  00000000  00109bac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  0010d298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	@ (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	200001d8 	.word	0x200001d8
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08007450 	.word	0x08007450

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	@ (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	@ (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	200001dc 	.word	0x200001dc
 80001c0:	08007450 	.word	0x08007450

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b98c 	b.w	80004f4 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9d08      	ldr	r5, [sp, #32]
 80001fa:	468e      	mov	lr, r1
 80001fc:	4604      	mov	r4, r0
 80001fe:	4688      	mov	r8, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14a      	bne.n	800029a <__udivmoddi4+0xa6>
 8000204:	428a      	cmp	r2, r1
 8000206:	4617      	mov	r7, r2
 8000208:	d962      	bls.n	80002d0 <__udivmoddi4+0xdc>
 800020a:	fab2 f682 	clz	r6, r2
 800020e:	b14e      	cbz	r6, 8000224 <__udivmoddi4+0x30>
 8000210:	f1c6 0320 	rsb	r3, r6, #32
 8000214:	fa01 f806 	lsl.w	r8, r1, r6
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	40b7      	lsls	r7, r6
 800021e:	ea43 0808 	orr.w	r8, r3, r8
 8000222:	40b4      	lsls	r4, r6
 8000224:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000228:	fbb8 f1fe 	udiv	r1, r8, lr
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fb0e 8811 	mls	r8, lr, r1, r8
 8000234:	fb01 f20c 	mul.w	r2, r1, ip
 8000238:	0c23      	lsrs	r3, r4, #16
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	429a      	cmp	r2, r3
 8000240:	d909      	bls.n	8000256 <__udivmoddi4+0x62>
 8000242:	18fb      	adds	r3, r7, r3
 8000244:	f101 30ff 	add.w	r0, r1, #4294967295
 8000248:	f080 80eb 	bcs.w	8000422 <__udivmoddi4+0x22e>
 800024c:	429a      	cmp	r2, r3
 800024e:	f240 80e8 	bls.w	8000422 <__udivmoddi4+0x22e>
 8000252:	3902      	subs	r1, #2
 8000254:	443b      	add	r3, r7
 8000256:	1a9a      	subs	r2, r3, r2
 8000258:	fbb2 f0fe 	udiv	r0, r2, lr
 800025c:	fb0e 2210 	mls	r2, lr, r0, r2
 8000260:	fb00 fc0c 	mul.w	ip, r0, ip
 8000264:	b2a3      	uxth	r3, r4
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	459c      	cmp	ip, r3
 800026c:	d909      	bls.n	8000282 <__udivmoddi4+0x8e>
 800026e:	18fb      	adds	r3, r7, r3
 8000270:	f100 32ff 	add.w	r2, r0, #4294967295
 8000274:	f080 80d7 	bcs.w	8000426 <__udivmoddi4+0x232>
 8000278:	459c      	cmp	ip, r3
 800027a:	f240 80d4 	bls.w	8000426 <__udivmoddi4+0x232>
 800027e:	443b      	add	r3, r7
 8000280:	3802      	subs	r0, #2
 8000282:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000286:	2100      	movs	r1, #0
 8000288:	eba3 030c 	sub.w	r3, r3, ip
 800028c:	b11d      	cbz	r5, 8000296 <__udivmoddi4+0xa2>
 800028e:	2200      	movs	r2, #0
 8000290:	40f3      	lsrs	r3, r6
 8000292:	e9c5 3200 	strd	r3, r2, [r5]
 8000296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029a:	428b      	cmp	r3, r1
 800029c:	d905      	bls.n	80002aa <__udivmoddi4+0xb6>
 800029e:	b10d      	cbz	r5, 80002a4 <__udivmoddi4+0xb0>
 80002a0:	e9c5 0100 	strd	r0, r1, [r5]
 80002a4:	2100      	movs	r1, #0
 80002a6:	4608      	mov	r0, r1
 80002a8:	e7f5      	b.n	8000296 <__udivmoddi4+0xa2>
 80002aa:	fab3 f183 	clz	r1, r3
 80002ae:	2900      	cmp	r1, #0
 80002b0:	d146      	bne.n	8000340 <__udivmoddi4+0x14c>
 80002b2:	4573      	cmp	r3, lr
 80002b4:	d302      	bcc.n	80002bc <__udivmoddi4+0xc8>
 80002b6:	4282      	cmp	r2, r0
 80002b8:	f200 8108 	bhi.w	80004cc <__udivmoddi4+0x2d8>
 80002bc:	1a84      	subs	r4, r0, r2
 80002be:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c2:	2001      	movs	r0, #1
 80002c4:	4690      	mov	r8, r2
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	d0e5      	beq.n	8000296 <__udivmoddi4+0xa2>
 80002ca:	e9c5 4800 	strd	r4, r8, [r5]
 80002ce:	e7e2      	b.n	8000296 <__udivmoddi4+0xa2>
 80002d0:	2a00      	cmp	r2, #0
 80002d2:	f000 8091 	beq.w	80003f8 <__udivmoddi4+0x204>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	2e00      	cmp	r6, #0
 80002dc:	f040 80a5 	bne.w	800042a <__udivmoddi4+0x236>
 80002e0:	1a8a      	subs	r2, r1, r2
 80002e2:	2101      	movs	r1, #1
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ea:	b280      	uxth	r0, r0
 80002ec:	b2bc      	uxth	r4, r7
 80002ee:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f2:	fb0e 221c 	mls	r2, lr, ip, r2
 80002f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fa:	fb04 f20c 	mul.w	r2, r4, ip
 80002fe:	429a      	cmp	r2, r3
 8000300:	d907      	bls.n	8000312 <__udivmoddi4+0x11e>
 8000302:	18fb      	adds	r3, r7, r3
 8000304:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000308:	d202      	bcs.n	8000310 <__udivmoddi4+0x11c>
 800030a:	429a      	cmp	r2, r3
 800030c:	f200 80e3 	bhi.w	80004d6 <__udivmoddi4+0x2e2>
 8000310:	46c4      	mov	ip, r8
 8000312:	1a9b      	subs	r3, r3, r2
 8000314:	fbb3 f2fe 	udiv	r2, r3, lr
 8000318:	fb0e 3312 	mls	r3, lr, r2, r3
 800031c:	fb02 f404 	mul.w	r4, r2, r4
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	429c      	cmp	r4, r3
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x144>
 8000328:	18fb      	adds	r3, r7, r3
 800032a:	f102 30ff 	add.w	r0, r2, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x142>
 8000330:	429c      	cmp	r4, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2dc>
 8000336:	4602      	mov	r2, r0
 8000338:	1b1b      	subs	r3, r3, r4
 800033a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800033e:	e7a5      	b.n	800028c <__udivmoddi4+0x98>
 8000340:	f1c1 0620 	rsb	r6, r1, #32
 8000344:	408b      	lsls	r3, r1
 8000346:	fa22 f706 	lsr.w	r7, r2, r6
 800034a:	431f      	orrs	r7, r3
 800034c:	fa2e fa06 	lsr.w	sl, lr, r6
 8000350:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000354:	fbba f8f9 	udiv	r8, sl, r9
 8000358:	fa0e fe01 	lsl.w	lr, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fb09 aa18 	mls	sl, r9, r8, sl
 8000364:	fa1f fc87 	uxth.w	ip, r7
 8000368:	ea43 030e 	orr.w	r3, r3, lr
 800036c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000370:	fb08 f00c 	mul.w	r0, r8, ip
 8000374:	0c1c      	lsrs	r4, r3, #16
 8000376:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800037a:	42a0      	cmp	r0, r4
 800037c:	fa02 f201 	lsl.w	r2, r2, r1
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x1a4>
 8000382:	193c      	adds	r4, r7, r4
 8000384:	f108 3aff 	add.w	sl, r8, #4294967295
 8000388:	f080 809e 	bcs.w	80004c8 <__udivmoddi4+0x2d4>
 800038c:	42a0      	cmp	r0, r4
 800038e:	f240 809b 	bls.w	80004c8 <__udivmoddi4+0x2d4>
 8000392:	f1a8 0802 	sub.w	r8, r8, #2
 8000396:	443c      	add	r4, r7
 8000398:	1a24      	subs	r4, r4, r0
 800039a:	b298      	uxth	r0, r3
 800039c:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a0:	fb09 4413 	mls	r4, r9, r3, r4
 80003a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003a8:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80003ac:	45a4      	cmp	ip, r4
 80003ae:	d909      	bls.n	80003c4 <__udivmoddi4+0x1d0>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f103 30ff 	add.w	r0, r3, #4294967295
 80003b6:	f080 8085 	bcs.w	80004c4 <__udivmoddi4+0x2d0>
 80003ba:	45a4      	cmp	ip, r4
 80003bc:	f240 8082 	bls.w	80004c4 <__udivmoddi4+0x2d0>
 80003c0:	3b02      	subs	r3, #2
 80003c2:	443c      	add	r4, r7
 80003c4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003c8:	eba4 040c 	sub.w	r4, r4, ip
 80003cc:	fba0 8c02 	umull	r8, ip, r0, r2
 80003d0:	4564      	cmp	r4, ip
 80003d2:	4643      	mov	r3, r8
 80003d4:	46e1      	mov	r9, ip
 80003d6:	d364      	bcc.n	80004a2 <__udivmoddi4+0x2ae>
 80003d8:	d061      	beq.n	800049e <__udivmoddi4+0x2aa>
 80003da:	b15d      	cbz	r5, 80003f4 <__udivmoddi4+0x200>
 80003dc:	ebbe 0203 	subs.w	r2, lr, r3
 80003e0:	eb64 0409 	sbc.w	r4, r4, r9
 80003e4:	fa04 f606 	lsl.w	r6, r4, r6
 80003e8:	fa22 f301 	lsr.w	r3, r2, r1
 80003ec:	431e      	orrs	r6, r3
 80003ee:	40cc      	lsrs	r4, r1
 80003f0:	e9c5 6400 	strd	r6, r4, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	e74e      	b.n	8000296 <__udivmoddi4+0xa2>
 80003f8:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fc:	0c01      	lsrs	r1, r0, #16
 80003fe:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000402:	b280      	uxth	r0, r0
 8000404:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000408:	463b      	mov	r3, r7
 800040a:	fbb1 f1f7 	udiv	r1, r1, r7
 800040e:	4638      	mov	r0, r7
 8000410:	463c      	mov	r4, r7
 8000412:	46b8      	mov	r8, r7
 8000414:	46be      	mov	lr, r7
 8000416:	2620      	movs	r6, #32
 8000418:	eba2 0208 	sub.w	r2, r2, r8
 800041c:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000420:	e765      	b.n	80002ee <__udivmoddi4+0xfa>
 8000422:	4601      	mov	r1, r0
 8000424:	e717      	b.n	8000256 <__udivmoddi4+0x62>
 8000426:	4610      	mov	r0, r2
 8000428:	e72b      	b.n	8000282 <__udivmoddi4+0x8e>
 800042a:	f1c6 0120 	rsb	r1, r6, #32
 800042e:	fa2e fc01 	lsr.w	ip, lr, r1
 8000432:	40b7      	lsls	r7, r6
 8000434:	fa0e fe06 	lsl.w	lr, lr, r6
 8000438:	fa20 f101 	lsr.w	r1, r0, r1
 800043c:	ea41 010e 	orr.w	r1, r1, lr
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	fbbc f8fe 	udiv	r8, ip, lr
 8000448:	b2bc      	uxth	r4, r7
 800044a:	fb0e cc18 	mls	ip, lr, r8, ip
 800044e:	fb08 f904 	mul.w	r9, r8, r4
 8000452:	0c0a      	lsrs	r2, r1, #16
 8000454:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000458:	40b0      	lsls	r0, r6
 800045a:	4591      	cmp	r9, r2
 800045c:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000460:	b280      	uxth	r0, r0
 8000462:	d93e      	bls.n	80004e2 <__udivmoddi4+0x2ee>
 8000464:	18ba      	adds	r2, r7, r2
 8000466:	f108 3cff 	add.w	ip, r8, #4294967295
 800046a:	d201      	bcs.n	8000470 <__udivmoddi4+0x27c>
 800046c:	4591      	cmp	r9, r2
 800046e:	d81f      	bhi.n	80004b0 <__udivmoddi4+0x2bc>
 8000470:	eba2 0209 	sub.w	r2, r2, r9
 8000474:	fbb2 f9fe 	udiv	r9, r2, lr
 8000478:	fb09 f804 	mul.w	r8, r9, r4
 800047c:	fb0e 2a19 	mls	sl, lr, r9, r2
 8000480:	b28a      	uxth	r2, r1
 8000482:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8000486:	4542      	cmp	r2, r8
 8000488:	d229      	bcs.n	80004de <__udivmoddi4+0x2ea>
 800048a:	18ba      	adds	r2, r7, r2
 800048c:	f109 31ff 	add.w	r1, r9, #4294967295
 8000490:	d2c2      	bcs.n	8000418 <__udivmoddi4+0x224>
 8000492:	4542      	cmp	r2, r8
 8000494:	d2c0      	bcs.n	8000418 <__udivmoddi4+0x224>
 8000496:	f1a9 0102 	sub.w	r1, r9, #2
 800049a:	443a      	add	r2, r7
 800049c:	e7bc      	b.n	8000418 <__udivmoddi4+0x224>
 800049e:	45c6      	cmp	lr, r8
 80004a0:	d29b      	bcs.n	80003da <__udivmoddi4+0x1e6>
 80004a2:	ebb8 0302 	subs.w	r3, r8, r2
 80004a6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004aa:	3801      	subs	r0, #1
 80004ac:	46e1      	mov	r9, ip
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e6>
 80004b0:	eba7 0909 	sub.w	r9, r7, r9
 80004b4:	444a      	add	r2, r9
 80004b6:	fbb2 f9fe 	udiv	r9, r2, lr
 80004ba:	f1a8 0c02 	sub.w	ip, r8, #2
 80004be:	fb09 f804 	mul.w	r8, r9, r4
 80004c2:	e7db      	b.n	800047c <__udivmoddi4+0x288>
 80004c4:	4603      	mov	r3, r0
 80004c6:	e77d      	b.n	80003c4 <__udivmoddi4+0x1d0>
 80004c8:	46d0      	mov	r8, sl
 80004ca:	e765      	b.n	8000398 <__udivmoddi4+0x1a4>
 80004cc:	4608      	mov	r0, r1
 80004ce:	e6fa      	b.n	80002c6 <__udivmoddi4+0xd2>
 80004d0:	443b      	add	r3, r7
 80004d2:	3a02      	subs	r2, #2
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x144>
 80004d6:	f1ac 0c02 	sub.w	ip, ip, #2
 80004da:	443b      	add	r3, r7
 80004dc:	e719      	b.n	8000312 <__udivmoddi4+0x11e>
 80004de:	4649      	mov	r1, r9
 80004e0:	e79a      	b.n	8000418 <__udivmoddi4+0x224>
 80004e2:	eba2 0209 	sub.w	r2, r2, r9
 80004e6:	fbb2 f9fe 	udiv	r9, r2, lr
 80004ea:	46c4      	mov	ip, r8
 80004ec:	fb09 f804 	mul.w	r8, r9, r4
 80004f0:	e7c4      	b.n	800047c <__udivmoddi4+0x288>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <_write>:
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
int _write(int file, char *ptr, int len) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	60f8      	str	r0, [r7, #12]
 8000500:	60b9      	str	r1, [r7, #8]
 8000502:	607a      	str	r2, [r7, #4]
	uint8_t ret;
	uint32_t timeout = 100;  // 100 ms kadar beklesin
 8000504:	2364      	movs	r3, #100	@ 0x64
 8000506:	617b      	str	r3, [r7, #20]

	while ((ret = CDC_Transmit_FS((uint8_t*) ptr, len)) == USBD_BUSY
 8000508:	e002      	b.n	8000510 <_write+0x18>
			&& timeout--) {
		HAL_Delay(1);
 800050a:	2001      	movs	r0, #1
 800050c:	f000 fad2 	bl	8000ab4 <HAL_Delay>
	while ((ret = CDC_Transmit_FS((uint8_t*) ptr, len)) == USBD_BUSY
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	b29b      	uxth	r3, r3
 8000514:	4619      	mov	r1, r3
 8000516:	68b8      	ldr	r0, [r7, #8]
 8000518:	f005 fbc2 	bl	8005ca0 <CDC_Transmit_FS>
 800051c:	4603      	mov	r3, r0
 800051e:	74fb      	strb	r3, [r7, #19]
			&& timeout--) {
 8000520:	7cfb      	ldrb	r3, [r7, #19]
 8000522:	2b01      	cmp	r3, #1
 8000524:	d104      	bne.n	8000530 <_write+0x38>
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	1e5a      	subs	r2, r3, #1
 800052a:	617a      	str	r2, [r7, #20]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d1ec      	bne.n	800050a <_write+0x12>

	if (ret != USBD_OK) {
		// İsteğe bağlı: hata durumunda log veya LED yanması vs.
	}

	return len;
 8000530:	687b      	ldr	r3, [r7, #4]
}
 8000532:	4618      	mov	r0, r3
 8000534:	3718      	adds	r7, #24
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
	...

0800053c <print_clock_debug_info>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern uint32_t SystemCoreClock;

// Saat bilgilerini yazdıran fonksiyon
void print_clock_debug_info(void) {
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	// 1. Sistem saat frekansları
	printf("SystemCoreClock: %lu Hz\r\n", SystemCoreClock);
 8000540:	4b2a      	ldr	r3, [pc, #168]	@ (80005ec <print_clock_debug_info+0xb0>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4619      	mov	r1, r3
 8000546:	482a      	ldr	r0, [pc, #168]	@ (80005f0 <print_clock_debug_info+0xb4>)
 8000548:	f006 f95c 	bl	8006804 <iprintf>
	printf("HCLK: %lu Hz\r\n", HAL_RCC_GetHCLKFreq());
 800054c:	f002 fbda 	bl	8002d04 <HAL_RCC_GetHCLKFreq>
 8000550:	4603      	mov	r3, r0
 8000552:	4619      	mov	r1, r3
 8000554:	4827      	ldr	r0, [pc, #156]	@ (80005f4 <print_clock_debug_info+0xb8>)
 8000556:	f006 f955 	bl	8006804 <iprintf>
	printf("PCLK1: %lu Hz\r\n", HAL_RCC_GetPCLK1Freq());
 800055a:	f002 fbdd 	bl	8002d18 <HAL_RCC_GetPCLK1Freq>
 800055e:	4603      	mov	r3, r0
 8000560:	4619      	mov	r1, r3
 8000562:	4825      	ldr	r0, [pc, #148]	@ (80005f8 <print_clock_debug_info+0xbc>)
 8000564:	f006 f94e 	bl	8006804 <iprintf>
	printf("PCLK2: %lu Hz\r\n", HAL_RCC_GetPCLK2Freq());
 8000568:	f002 fbf8 	bl	8002d5c <HAL_RCC_GetPCLK2Freq>
 800056c:	4603      	mov	r3, r0
 800056e:	4619      	mov	r1, r3
 8000570:	4822      	ldr	r0, [pc, #136]	@ (80005fc <print_clock_debug_info+0xc0>)
 8000572:	f006 f947 	bl	8006804 <iprintf>

	switch (__HAL_RCC_GET_SYSCLK_SOURCE()) {
 8000576:	4b22      	ldr	r3, [pc, #136]	@ (8000600 <print_clock_debug_info+0xc4>)
 8000578:	689b      	ldr	r3, [r3, #8]
 800057a:	f003 030c 	and.w	r3, r3, #12
 800057e:	2b08      	cmp	r3, #8
 8000580:	d00e      	beq.n	80005a0 <print_clock_debug_info+0x64>
 8000582:	2b08      	cmp	r3, #8
 8000584:	d81e      	bhi.n	80005c4 <print_clock_debug_info+0x88>
 8000586:	2b00      	cmp	r3, #0
 8000588:	d002      	beq.n	8000590 <print_clock_debug_info+0x54>
 800058a:	2b04      	cmp	r3, #4
 800058c:	d004      	beq.n	8000598 <print_clock_debug_info+0x5c>
 800058e:	e019      	b.n	80005c4 <print_clock_debug_info+0x88>
	case RCC_SYSCLKSOURCE_STATUS_HSI:
		printf("SYSCLK kaynağı: HSI (Dahili RC osilatör)\r\n");
 8000590:	481c      	ldr	r0, [pc, #112]	@ (8000604 <print_clock_debug_info+0xc8>)
 8000592:	f006 f99f 	bl	80068d4 <puts>
		break;
 8000596:	e019      	b.n	80005cc <print_clock_debug_info+0x90>
	case RCC_SYSCLKSOURCE_STATUS_HSE:
		printf("SYSCLK kaynağı: HSE (Harici kristal)\r\n");
 8000598:	481b      	ldr	r0, [pc, #108]	@ (8000608 <print_clock_debug_info+0xcc>)
 800059a:	f006 f99b 	bl	80068d4 <puts>
		break;
 800059e:	e015      	b.n	80005cc <print_clock_debug_info+0x90>
	case RCC_SYSCLKSOURCE_STATUS_PLLCLK:
		printf("SYSCLK kaynağı: PLLCLK\r\n");
 80005a0:	481a      	ldr	r0, [pc, #104]	@ (800060c <print_clock_debug_info+0xd0>)
 80005a2:	f006 f997 	bl	80068d4 <puts>

		if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE) {
 80005a6:	4b16      	ldr	r3, [pc, #88]	@ (8000600 <print_clock_debug_info+0xc4>)
 80005a8:	685b      	ldr	r3, [r3, #4]
 80005aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80005b2:	d103      	bne.n	80005bc <print_clock_debug_info+0x80>
			printf("PLL kaynağı: HSE (Harici kristal)\r\n");
 80005b4:	4816      	ldr	r0, [pc, #88]	@ (8000610 <print_clock_debug_info+0xd4>)
 80005b6:	f006 f98d 	bl	80068d4 <puts>
		} else {
			printf("PLL kaynağı: HSI (Dahili RC osilatör)\r\n");
		}
		break;
 80005ba:	e007      	b.n	80005cc <print_clock_debug_info+0x90>
			printf("PLL kaynağı: HSI (Dahili RC osilatör)\r\n");
 80005bc:	4815      	ldr	r0, [pc, #84]	@ (8000614 <print_clock_debug_info+0xd8>)
 80005be:	f006 f989 	bl	80068d4 <puts>
		break;
 80005c2:	e003      	b.n	80005cc <print_clock_debug_info+0x90>
	default:
		printf("SYSCLK kaynağı: Bilinmiyor\r\n");
 80005c4:	4814      	ldr	r0, [pc, #80]	@ (8000618 <print_clock_debug_info+0xdc>)
 80005c6:	f006 f985 	bl	80068d4 <puts>
		break;
 80005ca:	bf00      	nop
	}

	// 3. HSE durumu
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY)) {
 80005cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <print_clock_debug_info+0xc4>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d003      	beq.n	80005e0 <print_clock_debug_info+0xa4>
		printf("HSE durumu: AKTİF ve STABİL\r\n");
 80005d8:	4810      	ldr	r0, [pc, #64]	@ (800061c <print_clock_debug_info+0xe0>)
 80005da:	f006 f97b 	bl	80068d4 <puts>
	} else {
		printf("HSE durumu: BAŞARISIZ veya YOK\r\n");
	}
}
 80005de:	e002      	b.n	80005e6 <print_clock_debug_info+0xaa>
		printf("HSE durumu: BAŞARISIZ veya YOK\r\n");
 80005e0:	480f      	ldr	r0, [pc, #60]	@ (8000620 <print_clock_debug_info+0xe4>)
 80005e2:	f006 f977 	bl	80068d4 <puts>
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000000 	.word	0x20000000
 80005f0:	08007468 	.word	0x08007468
 80005f4:	08007484 	.word	0x08007484
 80005f8:	08007494 	.word	0x08007494
 80005fc:	080074a4 	.word	0x080074a4
 8000600:	40023800 	.word	0x40023800
 8000604:	080074b4 	.word	0x080074b4
 8000608:	080074e4 	.word	0x080074e4
 800060c:	0800750c 	.word	0x0800750c
 8000610:	08007528 	.word	0x08007528
 8000614:	08007550 	.word	0x08007550
 8000618:	0800757c 	.word	0x0800757c
 800061c:	0800759c 	.word	0x0800759c
 8000620:	080075bc 	.word	0x080075bc

08000624 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000628:	f000 f9d6 	bl	80009d8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800062c:	f000 f826 	bl	800067c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000630:	f000 f86a 	bl	8000708 <MX_GPIO_Init>
	MX_USB_DEVICE_Init();
 8000634:	f005 fa76 	bl	8005b24 <MX_USB_DEVICE_Init>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	printf("Fixaj.com Sistem Başlatılıyor...");
 8000638:	480e      	ldr	r0, [pc, #56]	@ (8000674 <main+0x50>)
 800063a:	f006 f8e3 	bl	8006804 <iprintf>
	HAL_Delay(5000);
 800063e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000642:	f000 fa37 	bl	8000ab4 <HAL_Delay>
	print_clock_debug_info();
 8000646:	f7ff ff79 	bl	800053c <print_clock_debug_info>
	while (1) {
		HAL_GPIO_TogglePin(red_led_GPIO_Port, red_led_Pin);
 800064a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800064e:	480a      	ldr	r0, [pc, #40]	@ (8000678 <main+0x54>)
 8000650:	f000 fd18 	bl	8001084 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000654:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000658:	f000 fa2c 	bl	8000ab4 <HAL_Delay>
		HAL_GPIO_TogglePin(mavi_led_GPIO_Port, mavi_led_Pin);
 800065c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000660:	4805      	ldr	r0, [pc, #20]	@ (8000678 <main+0x54>)
 8000662:	f000 fd0f 	bl	8001084 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000666:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800066a:	f000 fa23 	bl	8000ab4 <HAL_Delay>
		HAL_GPIO_TogglePin(red_led_GPIO_Port, red_led_Pin);
 800066e:	bf00      	nop
 8000670:	e7eb      	b.n	800064a <main+0x26>
 8000672:	bf00      	nop
 8000674:	080075e0 	.word	0x080075e0
 8000678:	40021000 	.word	0x40021000

0800067c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b092      	sub	sp, #72	@ 0x48
 8000680:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000682:	f107 0318 	add.w	r3, r7, #24
 8000686:	2230      	movs	r2, #48	@ 0x30
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f006 fa02 	bl	8006a94 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800069e:	2301      	movs	r3, #1
 80006a0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a2:	2301      	movs	r3, #1
 80006a4:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a6:	2302      	movs	r3, #2
 80006a8:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006ae:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLM = 20;
 80006b0:	2314      	movs	r3, #20
 80006b2:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLN = 192;
 80006b4:	23c0      	movs	r3, #192	@ 0xc0
 80006b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLQ = 5;
 80006bc:	2305      	movs	r3, #5
 80006be:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006c0:	f107 0318 	add.w	r3, r7, #24
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 ff17 	bl	80024f8 <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x58>
		Error_Handler();
 80006d0:	f000 f86c 	bl	80007ac <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d8:	2302      	movs	r3, #2
 80006da:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006e4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ea:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2103      	movs	r1, #3
 80006f0:	4618      	mov	r0, r3
 80006f2:	f002 f955 	bl	80029a0 <HAL_RCC_ClockConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x84>
		Error_Handler();
 80006fc:	f000 f856 	bl	80007ac <Error_Handler>
	}
}
 8000700:	bf00      	nop
 8000702:	3748      	adds	r7, #72	@ 0x48
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800070e:	f107 030c 	add.w	r3, r7, #12
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	4b20      	ldr	r3, [pc, #128]	@ (80007a4 <MX_GPIO_Init+0x9c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a1f      	ldr	r2, [pc, #124]	@ (80007a4 <MX_GPIO_Init+0x9c>)
 8000728:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
 800072e:	4b1d      	ldr	r3, [pc, #116]	@ (80007a4 <MX_GPIO_Init+0x9c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b19      	ldr	r3, [pc, #100]	@ (80007a4 <MX_GPIO_Init+0x9c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	4a18      	ldr	r2, [pc, #96]	@ (80007a4 <MX_GPIO_Init+0x9c>)
 8000744:	f043 0310 	orr.w	r3, r3, #16
 8000748:	6313      	str	r3, [r2, #48]	@ 0x30
 800074a:	4b16      	ldr	r3, [pc, #88]	@ (80007a4 <MX_GPIO_Init+0x9c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	f003 0310 	and.w	r3, r3, #16
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <MX_GPIO_Init+0x9c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	4a11      	ldr	r2, [pc, #68]	@ (80007a4 <MX_GPIO_Init+0x9c>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6313      	str	r3, [r2, #48]	@ 0x30
 8000766:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <MX_GPIO_Init+0x9c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, red_led_Pin | mavi_led_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8000778:	480b      	ldr	r0, [pc, #44]	@ (80007a8 <MX_GPIO_Init+0xa0>)
 800077a:	f000 fc6b 	bl	8001054 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : red_led_Pin mavi_led_Pin */
	GPIO_InitStruct.Pin = red_led_Pin | mavi_led_Pin;
 800077e:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8000782:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000784:	2301      	movs	r3, #1
 8000786:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2300      	movs	r3, #0
 800078e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	4619      	mov	r1, r3
 8000796:	4804      	ldr	r0, [pc, #16]	@ (80007a8 <MX_GPIO_Init+0xa0>)
 8000798:	f000 fabe 	bl	8000d18 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 800079c:	bf00      	nop
 800079e:	3720      	adds	r7, #32
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40021000 	.word	0x40021000

080007ac <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b0:	b672      	cpsid	i
}
 80007b2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <Error_Handler+0x8>

080007b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000800 <HAL_MspInit+0x48>)
 80007c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000800 <HAL_MspInit+0x48>)
 80007c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80007ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000800 <HAL_MspInit+0x48>)
 80007d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	4b08      	ldr	r3, [pc, #32]	@ (8000800 <HAL_MspInit+0x48>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e2:	4a07      	ldr	r2, [pc, #28]	@ (8000800 <HAL_MspInit+0x48>)
 80007e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ea:	4b05      	ldr	r3, [pc, #20]	@ (8000800 <HAL_MspInit+0x48>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr
 8000800:	40023800 	.word	0x40023800

08000804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <NMI_Handler+0x4>

0800080c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <HardFault_Handler+0x4>

08000814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <MemManage_Handler+0x4>

0800081c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <BusFault_Handler+0x4>

08000824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <UsageFault_Handler+0x4>

0800082c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr

08000838 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr

08000844 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr

08000850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000854:	f000 f912 	bl	8000a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}

0800085c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000860:	4802      	ldr	r0, [pc, #8]	@ (800086c <OTG_FS_IRQHandler+0x10>)
 8000862:	f000 fd59 	bl	8001318 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200016c4 	.word	0x200016c4

08000870 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	e00a      	b.n	8000898 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000882:	f3af 8000 	nop.w
 8000886:	4601      	mov	r1, r0
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	1c5a      	adds	r2, r3, #1
 800088c:	60ba      	str	r2, [r7, #8]
 800088e:	b2ca      	uxtb	r2, r1
 8000890:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	3301      	adds	r3, #1
 8000896:	617b      	str	r3, [r7, #20]
 8000898:	697a      	ldr	r2, [r7, #20]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	429a      	cmp	r2, r3
 800089e:	dbf0      	blt.n	8000882 <_read+0x12>
  }

  return len;
 80008a0:	687b      	ldr	r3, [r7, #4]
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3718      	adds	r7, #24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <_close>:
  }
  return len;
}

int _close(int file)
{
 80008aa:	b480      	push	{r7}
 80008ac:	b083      	sub	sp, #12
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr

080008c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008d0:	605a      	str	r2, [r3, #4]
  return 0;
 80008d2:	2300      	movs	r3, #0
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr

080008de <_isatty>:

int _isatty(int file)
{
 80008de:	b480      	push	{r7}
 80008e0:	b083      	sub	sp, #12
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008e6:	2301      	movs	r3, #1
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr

080008f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008f2:	b480      	push	{r7}
 80008f4:	b085      	sub	sp, #20
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	60f8      	str	r0, [r7, #12]
 80008fa:	60b9      	str	r1, [r7, #8]
 80008fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008fe:	2300      	movs	r3, #0
}
 8000900:	4618      	mov	r0, r3
 8000902:	3714      	adds	r7, #20
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr
	...

0800090c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000914:	4a14      	ldr	r2, [pc, #80]	@ (8000968 <_sbrk+0x5c>)
 8000916:	4b15      	ldr	r3, [pc, #84]	@ (800096c <_sbrk+0x60>)
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000920:	4b13      	ldr	r3, [pc, #76]	@ (8000970 <_sbrk+0x64>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d102      	bne.n	800092e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000928:	4b11      	ldr	r3, [pc, #68]	@ (8000970 <_sbrk+0x64>)
 800092a:	4a12      	ldr	r2, [pc, #72]	@ (8000974 <_sbrk+0x68>)
 800092c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800092e:	4b10      	ldr	r3, [pc, #64]	@ (8000970 <_sbrk+0x64>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4413      	add	r3, r2
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	429a      	cmp	r2, r3
 800093a:	d207      	bcs.n	800094c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800093c:	f006 f908 	bl	8006b50 <__errno>
 8000940:	4603      	mov	r3, r0
 8000942:	220c      	movs	r2, #12
 8000944:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000946:	f04f 33ff 	mov.w	r3, #4294967295
 800094a:	e009      	b.n	8000960 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800094c:	4b08      	ldr	r3, [pc, #32]	@ (8000970 <_sbrk+0x64>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000952:	4b07      	ldr	r3, [pc, #28]	@ (8000970 <_sbrk+0x64>)
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4413      	add	r3, r2
 800095a:	4a05      	ldr	r2, [pc, #20]	@ (8000970 <_sbrk+0x64>)
 800095c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800095e:	68fb      	ldr	r3, [r7, #12]
}
 8000960:	4618      	mov	r0, r3
 8000962:	3718      	adds	r7, #24
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20020000 	.word	0x20020000
 800096c:	00000400 	.word	0x00000400
 8000970:	200001f4 	.word	0x200001f4
 8000974:	20001cf0 	.word	0x20001cf0

08000978 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr

08000984 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000984:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009bc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8000988:	f7ff fff6 	bl	8000978 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800098c:	480c      	ldr	r0, [pc, #48]	@ (80009c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800098e:	490d      	ldr	r1, [pc, #52]	@ (80009c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000990:	4a0d      	ldr	r2, [pc, #52]	@ (80009c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000994:	e002      	b.n	800099c <LoopCopyDataInit>

08000996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800099a:	3304      	adds	r3, #4

0800099c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800099c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a0:	d3f9      	bcc.n	8000996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009a2:	4a0a      	ldr	r2, [pc, #40]	@ (80009cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009a4:	4c0a      	ldr	r4, [pc, #40]	@ (80009d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a8:	e001      	b.n	80009ae <LoopFillZerobss>

080009aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ac:	3204      	adds	r2, #4

080009ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b0:	d3fb      	bcc.n	80009aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009b2:	f006 f8d3 	bl	8006b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009b6:	f7ff fe35 	bl	8000624 <main>
  bx  lr
 80009ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80009c8:	080076a8 	.word	0x080076a8
  ldr r2, =_sbss
 80009cc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80009d0:	20001cec 	.word	0x20001cec

080009d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009d4:	e7fe      	b.n	80009d4 <ADC_IRQHandler>
	...

080009d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000a18 <HAL_Init+0x40>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000a18 <HAL_Init+0x40>)
 80009e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80009e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000a18 <HAL_Init+0x40>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a0a      	ldr	r2, [pc, #40]	@ (8000a18 <HAL_Init+0x40>)
 80009ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f4:	4b08      	ldr	r3, [pc, #32]	@ (8000a18 <HAL_Init+0x40>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a07      	ldr	r2, [pc, #28]	@ (8000a18 <HAL_Init+0x40>)
 80009fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a00:	2003      	movs	r0, #3
 8000a02:	f000 f947 	bl	8000c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a06:	200f      	movs	r0, #15
 8000a08:	f000 f808 	bl	8000a1c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000a0c:	f7ff fed4 	bl	80007b8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023c00 	.word	0x40023c00

08000a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a24:	4b12      	ldr	r3, [pc, #72]	@ (8000a70 <HAL_InitTick+0x54>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b12      	ldr	r3, [pc, #72]	@ (8000a74 <HAL_InitTick+0x58>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f000 f95f 	bl	8000cfe <HAL_SYSTICK_Config>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
 8000a48:	e00e      	b.n	8000a68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b0f      	cmp	r3, #15
 8000a4e:	d80a      	bhi.n	8000a66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a50:	2200      	movs	r2, #0
 8000a52:	6879      	ldr	r1, [r7, #4]
 8000a54:	f04f 30ff 	mov.w	r0, #4294967295
 8000a58:	f000 f927 	bl	8000caa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a5c:	4a06      	ldr	r2, [pc, #24]	@ (8000a78 <HAL_InitTick+0x5c>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a62:	2300      	movs	r3, #0
 8000a64:	e000      	b.n	8000a68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000000 	.word	0x20000000
 8000a74:	20000008 	.word	0x20000008
 8000a78:	20000004 	.word	0x20000004

08000a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a80:	4b05      	ldr	r3, [pc, #20]	@ (8000a98 <HAL_IncTick+0x1c>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b05      	ldr	r3, [pc, #20]	@ (8000a9c <HAL_IncTick+0x20>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	4a03      	ldr	r2, [pc, #12]	@ (8000a9c <HAL_IncTick+0x20>)
 8000a8e:	6013      	str	r3, [r2, #0]
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	20000008 	.word	0x20000008
 8000a9c:	200001f8 	.word	0x200001f8

08000aa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa4:	4b02      	ldr	r3, [pc, #8]	@ (8000ab0 <HAL_GetTick+0x10>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr
 8000ab0:	200001f8 	.word	0x200001f8

08000ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000abc:	f7ff fff0 	bl	8000aa0 <HAL_GetTick>
 8000ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000acc:	d005      	beq.n	8000ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ace:	4b0a      	ldr	r3, [pc, #40]	@ (8000af8 <HAL_Delay+0x44>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ada:	bf00      	nop
 8000adc:	f7ff ffe0 	bl	8000aa0 <HAL_GetTick>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d8f7      	bhi.n	8000adc <HAL_Delay+0x28>
  {
  }
}
 8000aec:	bf00      	nop
 8000aee:	bf00      	nop
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000008 	.word	0x20000008

08000afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2e:	4a04      	ldr	r2, [pc, #16]	@ (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	60d3      	str	r3, [r2, #12]
}
 8000b34:	bf00      	nop
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b48:	4b04      	ldr	r3, [pc, #16]	@ (8000b5c <__NVIC_GetPriorityGrouping+0x18>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	f003 0307 	and.w	r3, r3, #7
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	db0b      	blt.n	8000b8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	f003 021f 	and.w	r2, r3, #31
 8000b78:	4906      	ldr	r1, [pc, #24]	@ (8000b94 <__NVIC_EnableIRQ+0x34>)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	095b      	lsrs	r3, r3, #5
 8000b80:	2001      	movs	r0, #1
 8000b82:	fa00 f202 	lsl.w	r2, r0, r2
 8000b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr
 8000b94:	e000e100 	.word	0xe000e100

08000b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	db0a      	blt.n	8000bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	490c      	ldr	r1, [pc, #48]	@ (8000be4 <__NVIC_SetPriority+0x4c>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	0112      	lsls	r2, r2, #4
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	440b      	add	r3, r1
 8000bbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc0:	e00a      	b.n	8000bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4908      	ldr	r1, [pc, #32]	@ (8000be8 <__NVIC_SetPriority+0x50>)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	f003 030f 	and.w	r3, r3, #15
 8000bce:	3b04      	subs	r3, #4
 8000bd0:	0112      	lsls	r2, r2, #4
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	440b      	add	r3, r1
 8000bd6:	761a      	strb	r2, [r3, #24]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000e100 	.word	0xe000e100
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b089      	sub	sp, #36	@ 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	f1c3 0307 	rsb	r3, r3, #7
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	bf28      	it	cs
 8000c0a:	2304      	movcs	r3, #4
 8000c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3304      	adds	r3, #4
 8000c12:	2b06      	cmp	r3, #6
 8000c14:	d902      	bls.n	8000c1c <NVIC_EncodePriority+0x30>
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3b03      	subs	r3, #3
 8000c1a:	e000      	b.n	8000c1e <NVIC_EncodePriority+0x32>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	f04f 32ff 	mov.w	r2, #4294967295
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43da      	mvns	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	401a      	ands	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c34:	f04f 31ff 	mov.w	r1, #4294967295
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3e:	43d9      	mvns	r1, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	4313      	orrs	r3, r2
         );
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3724      	adds	r7, #36	@ 0x24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr

08000c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c60:	d301      	bcc.n	8000c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00f      	b.n	8000c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c66:	4a0a      	ldr	r2, [pc, #40]	@ (8000c90 <SysTick_Config+0x40>)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c6e:	210f      	movs	r1, #15
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	f7ff ff90 	bl	8000b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c78:	4b05      	ldr	r3, [pc, #20]	@ (8000c90 <SysTick_Config+0x40>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c7e:	4b04      	ldr	r3, [pc, #16]	@ (8000c90 <SysTick_Config+0x40>)
 8000c80:	2207      	movs	r2, #7
 8000c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	e000e010 	.word	0xe000e010

08000c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff ff2d 	bl	8000afc <__NVIC_SetPriorityGrouping>
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b086      	sub	sp, #24
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	60b9      	str	r1, [r7, #8]
 8000cb4:	607a      	str	r2, [r7, #4]
 8000cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cbc:	f7ff ff42 	bl	8000b44 <__NVIC_GetPriorityGrouping>
 8000cc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	68b9      	ldr	r1, [r7, #8]
 8000cc6:	6978      	ldr	r0, [r7, #20]
 8000cc8:	f7ff ff90 	bl	8000bec <NVIC_EncodePriority>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ff5f 	bl	8000b98 <__NVIC_SetPriority>
}
 8000cda:	bf00      	nop
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	4603      	mov	r3, r0
 8000cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff35 	bl	8000b60 <__NVIC_EnableIRQ>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff ffa2 	bl	8000c50 <SysTick_Config>
 8000d0c:	4603      	mov	r3, r0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b087      	sub	sp, #28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d26:	e16f      	b.n	8001008 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	fa01 f303 	lsl.w	r3, r1, r3
 8000d34:	4013      	ands	r3, r2
 8000d36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f000 8161 	beq.w	8001002 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f003 0303 	and.w	r3, r3, #3
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d005      	beq.n	8000d58 <HAL_GPIO_Init+0x40>
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f003 0303 	and.w	r3, r3, #3
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d130      	bne.n	8000dba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	2203      	movs	r2, #3
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	68da      	ldr	r2, [r3, #12]
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d8e:	2201      	movs	r2, #1
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43db      	mvns	r3, r3
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	091b      	lsrs	r3, r3, #4
 8000da4:	f003 0201 	and.w	r2, r3, #1
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 0303 	and.w	r3, r3, #3
 8000dc2:	2b03      	cmp	r3, #3
 8000dc4:	d017      	beq.n	8000df6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	68db      	ldr	r3, [r3, #12]
 8000dca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	689a      	ldr	r2, [r3, #8]
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f003 0303 	and.w	r3, r3, #3
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d123      	bne.n	8000e4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	08da      	lsrs	r2, r3, #3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	3208      	adds	r2, #8
 8000e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	220f      	movs	r2, #15
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4013      	ands	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	691a      	ldr	r2, [r3, #16]
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	f003 0307 	and.w	r3, r3, #7
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	08da      	lsrs	r2, r3, #3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3208      	adds	r2, #8
 8000e44:	6939      	ldr	r1, [r7, #16]
 8000e46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	2203      	movs	r2, #3
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f003 0203 	and.w	r2, r3, #3
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	f000 80bb 	beq.w	8001002 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	4b64      	ldr	r3, [pc, #400]	@ (8001024 <HAL_GPIO_Init+0x30c>)
 8000e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e94:	4a63      	ldr	r2, [pc, #396]	@ (8001024 <HAL_GPIO_Init+0x30c>)
 8000e96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e9a:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e9c:	4b61      	ldr	r3, [pc, #388]	@ (8001024 <HAL_GPIO_Init+0x30c>)
 8000e9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ea0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ea8:	4a5f      	ldr	r2, [pc, #380]	@ (8001028 <HAL_GPIO_Init+0x310>)
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	089b      	lsrs	r3, r3, #2
 8000eae:	3302      	adds	r3, #2
 8000eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	f003 0303 	and.w	r3, r3, #3
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	220f      	movs	r2, #15
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a57      	ldr	r2, [pc, #348]	@ (800102c <HAL_GPIO_Init+0x314>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d031      	beq.n	8000f38 <HAL_GPIO_Init+0x220>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a56      	ldr	r2, [pc, #344]	@ (8001030 <HAL_GPIO_Init+0x318>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d02b      	beq.n	8000f34 <HAL_GPIO_Init+0x21c>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a55      	ldr	r2, [pc, #340]	@ (8001034 <HAL_GPIO_Init+0x31c>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d025      	beq.n	8000f30 <HAL_GPIO_Init+0x218>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a54      	ldr	r2, [pc, #336]	@ (8001038 <HAL_GPIO_Init+0x320>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d01f      	beq.n	8000f2c <HAL_GPIO_Init+0x214>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a53      	ldr	r2, [pc, #332]	@ (800103c <HAL_GPIO_Init+0x324>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d019      	beq.n	8000f28 <HAL_GPIO_Init+0x210>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a52      	ldr	r2, [pc, #328]	@ (8001040 <HAL_GPIO_Init+0x328>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d013      	beq.n	8000f24 <HAL_GPIO_Init+0x20c>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a51      	ldr	r2, [pc, #324]	@ (8001044 <HAL_GPIO_Init+0x32c>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d00d      	beq.n	8000f20 <HAL_GPIO_Init+0x208>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a50      	ldr	r2, [pc, #320]	@ (8001048 <HAL_GPIO_Init+0x330>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d007      	beq.n	8000f1c <HAL_GPIO_Init+0x204>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a4f      	ldr	r2, [pc, #316]	@ (800104c <HAL_GPIO_Init+0x334>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d101      	bne.n	8000f18 <HAL_GPIO_Init+0x200>
 8000f14:	2308      	movs	r3, #8
 8000f16:	e010      	b.n	8000f3a <HAL_GPIO_Init+0x222>
 8000f18:	2309      	movs	r3, #9
 8000f1a:	e00e      	b.n	8000f3a <HAL_GPIO_Init+0x222>
 8000f1c:	2307      	movs	r3, #7
 8000f1e:	e00c      	b.n	8000f3a <HAL_GPIO_Init+0x222>
 8000f20:	2306      	movs	r3, #6
 8000f22:	e00a      	b.n	8000f3a <HAL_GPIO_Init+0x222>
 8000f24:	2305      	movs	r3, #5
 8000f26:	e008      	b.n	8000f3a <HAL_GPIO_Init+0x222>
 8000f28:	2304      	movs	r3, #4
 8000f2a:	e006      	b.n	8000f3a <HAL_GPIO_Init+0x222>
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e004      	b.n	8000f3a <HAL_GPIO_Init+0x222>
 8000f30:	2302      	movs	r3, #2
 8000f32:	e002      	b.n	8000f3a <HAL_GPIO_Init+0x222>
 8000f34:	2301      	movs	r3, #1
 8000f36:	e000      	b.n	8000f3a <HAL_GPIO_Init+0x222>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	f002 0203 	and.w	r2, r2, #3
 8000f40:	0092      	lsls	r2, r2, #2
 8000f42:	4093      	lsls	r3, r2
 8000f44:	461a      	mov	r2, r3
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f4c:	4936      	ldr	r1, [pc, #216]	@ (8001028 <HAL_GPIO_Init+0x310>)
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	089b      	lsrs	r3, r3, #2
 8000f52:	3302      	adds	r3, #2
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f5a:	4b3d      	ldr	r3, [pc, #244]	@ (8001050 <HAL_GPIO_Init+0x338>)
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	43db      	mvns	r3, r3
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d003      	beq.n	8000f7e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f7e:	4a34      	ldr	r2, [pc, #208]	@ (8001050 <HAL_GPIO_Init+0x338>)
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f84:	4b32      	ldr	r3, [pc, #200]	@ (8001050 <HAL_GPIO_Init+0x338>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d003      	beq.n	8000fa8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fa8:	4a29      	ldr	r2, [pc, #164]	@ (8001050 <HAL_GPIO_Init+0x338>)
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fae:	4b28      	ldr	r3, [pc, #160]	@ (8001050 <HAL_GPIO_Init+0x338>)
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fd2:	4a1f      	ldr	r2, [pc, #124]	@ (8001050 <HAL_GPIO_Init+0x338>)
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001050 <HAL_GPIO_Init+0x338>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d003      	beq.n	8000ffc <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ffc:	4a14      	ldr	r2, [pc, #80]	@ (8001050 <HAL_GPIO_Init+0x338>)
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	3301      	adds	r3, #1
 8001006:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	fa22 f303 	lsr.w	r3, r2, r3
 8001012:	2b00      	cmp	r3, #0
 8001014:	f47f ae88 	bne.w	8000d28 <HAL_GPIO_Init+0x10>
  }
}
 8001018:	bf00      	nop
 800101a:	bf00      	nop
 800101c:	371c      	adds	r7, #28
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr
 8001024:	40023800 	.word	0x40023800
 8001028:	40013800 	.word	0x40013800
 800102c:	40020000 	.word	0x40020000
 8001030:	40020400 	.word	0x40020400
 8001034:	40020800 	.word	0x40020800
 8001038:	40020c00 	.word	0x40020c00
 800103c:	40021000 	.word	0x40021000
 8001040:	40021400 	.word	0x40021400
 8001044:	40021800 	.word	0x40021800
 8001048:	40021c00 	.word	0x40021c00
 800104c:	40022000 	.word	0x40022000
 8001050:	40013c00 	.word	0x40013c00

08001054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	460b      	mov	r3, r1
 800105e:	807b      	strh	r3, [r7, #2]
 8001060:	4613      	mov	r3, r2
 8001062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001064:	787b      	ldrb	r3, [r7, #1]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800106a:	887a      	ldrh	r2, [r7, #2]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001070:	e003      	b.n	800107a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001072:	887b      	ldrh	r3, [r7, #2]
 8001074:	041a      	lsls	r2, r3, #16
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	619a      	str	r2, [r3, #24]
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr

08001084 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	460b      	mov	r3, r1
 800108e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	695b      	ldr	r3, [r3, #20]
 8001094:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001096:	887a      	ldrh	r2, [r7, #2]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4013      	ands	r3, r2
 800109c:	041a      	lsls	r2, r3, #16
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	43d9      	mvns	r1, r3
 80010a2:	887b      	ldrh	r3, [r7, #2]
 80010a4:	400b      	ands	r3, r1
 80010a6:	431a      	orrs	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	619a      	str	r2, [r3, #24]
}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr

080010b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b086      	sub	sp, #24
 80010ba:	af02      	add	r7, sp, #8
 80010bc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d101      	bne.n	80010c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e101      	b.n	80012cc <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d106      	bne.n	80010e8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f004 ff10 	bl	8005f08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2203      	movs	r2, #3
 80010ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010f6:	d102      	bne.n	80010fe <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4618      	mov	r0, r3
 8001104:	f001 ff58 	bl	8002fb8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6818      	ldr	r0, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	7c1a      	ldrb	r2, [r3, #16]
 8001110:	f88d 2000 	strb.w	r2, [sp]
 8001114:	3304      	adds	r3, #4
 8001116:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001118:	f001 fe42 	bl	8002da0 <USB_CoreInit>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d005      	beq.n	800112e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2202      	movs	r2, #2
 8001126:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e0ce      	b.n	80012cc <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2100      	movs	r1, #0
 8001134:	4618      	mov	r0, r3
 8001136:	f001 ff4f 	bl	8002fd8 <USB_SetCurrentMode>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d005      	beq.n	800114c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2202      	movs	r2, #2
 8001144:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e0bf      	b.n	80012cc <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800114c:	2300      	movs	r3, #0
 800114e:	73fb      	strb	r3, [r7, #15]
 8001150:	e04a      	b.n	80011e8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001152:	7bfa      	ldrb	r2, [r7, #15]
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	4613      	mov	r3, r2
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	4413      	add	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	440b      	add	r3, r1
 8001160:	3315      	adds	r3, #21
 8001162:	2201      	movs	r2, #1
 8001164:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001166:	7bfa      	ldrb	r2, [r7, #15]
 8001168:	6879      	ldr	r1, [r7, #4]
 800116a:	4613      	mov	r3, r2
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	4413      	add	r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	440b      	add	r3, r1
 8001174:	3314      	adds	r3, #20
 8001176:	7bfa      	ldrb	r2, [r7, #15]
 8001178:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800117a:	7bfa      	ldrb	r2, [r7, #15]
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	b298      	uxth	r0, r3
 8001180:	6879      	ldr	r1, [r7, #4]
 8001182:	4613      	mov	r3, r2
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	4413      	add	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	440b      	add	r3, r1
 800118c:	332e      	adds	r3, #46	@ 0x2e
 800118e:	4602      	mov	r2, r0
 8001190:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001192:	7bfa      	ldrb	r2, [r7, #15]
 8001194:	6879      	ldr	r1, [r7, #4]
 8001196:	4613      	mov	r3, r2
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	4413      	add	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	440b      	add	r3, r1
 80011a0:	3318      	adds	r3, #24
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011a6:	7bfa      	ldrb	r2, [r7, #15]
 80011a8:	6879      	ldr	r1, [r7, #4]
 80011aa:	4613      	mov	r3, r2
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	4413      	add	r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	440b      	add	r3, r1
 80011b4:	331c      	adds	r3, #28
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011ba:	7bfa      	ldrb	r2, [r7, #15]
 80011bc:	6879      	ldr	r1, [r7, #4]
 80011be:	4613      	mov	r3, r2
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	4413      	add	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	440b      	add	r3, r1
 80011c8:	3320      	adds	r3, #32
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011ce:	7bfa      	ldrb	r2, [r7, #15]
 80011d0:	6879      	ldr	r1, [r7, #4]
 80011d2:	4613      	mov	r3, r2
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	4413      	add	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	440b      	add	r3, r1
 80011dc:	3324      	adds	r3, #36	@ 0x24
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	3301      	adds	r3, #1
 80011e6:	73fb      	strb	r3, [r7, #15]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	791b      	ldrb	r3, [r3, #4]
 80011ec:	7bfa      	ldrb	r2, [r7, #15]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d3af      	bcc.n	8001152 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011f2:	2300      	movs	r3, #0
 80011f4:	73fb      	strb	r3, [r7, #15]
 80011f6:	e044      	b.n	8001282 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011f8:	7bfa      	ldrb	r2, [r7, #15]
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	4613      	mov	r3, r2
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	4413      	add	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	440b      	add	r3, r1
 8001206:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800120a:	2200      	movs	r2, #0
 800120c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800120e:	7bfa      	ldrb	r2, [r7, #15]
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	4613      	mov	r3, r2
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	4413      	add	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	440b      	add	r3, r1
 800121c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001220:	7bfa      	ldrb	r2, [r7, #15]
 8001222:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001224:	7bfa      	ldrb	r2, [r7, #15]
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	4613      	mov	r3, r2
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	4413      	add	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	440b      	add	r3, r1
 8001232:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001236:	2200      	movs	r2, #0
 8001238:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800123a:	7bfa      	ldrb	r2, [r7, #15]
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	4613      	mov	r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	4413      	add	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	440b      	add	r3, r1
 8001248:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001250:	7bfa      	ldrb	r2, [r7, #15]
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	4613      	mov	r3, r2
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	4413      	add	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	440b      	add	r3, r1
 800125e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001266:	7bfa      	ldrb	r2, [r7, #15]
 8001268:	6879      	ldr	r1, [r7, #4]
 800126a:	4613      	mov	r3, r2
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	4413      	add	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	440b      	add	r3, r1
 8001274:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	3301      	adds	r3, #1
 8001280:	73fb      	strb	r3, [r7, #15]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	791b      	ldrb	r3, [r3, #4]
 8001286:	7bfa      	ldrb	r2, [r7, #15]
 8001288:	429a      	cmp	r2, r3
 800128a:	d3b5      	bcc.n	80011f8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6818      	ldr	r0, [r3, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	7c1a      	ldrb	r2, [r3, #16]
 8001294:	f88d 2000 	strb.w	r2, [sp]
 8001298:	3304      	adds	r3, #4
 800129a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800129c:	f001 fee8 	bl	8003070 <USB_DevInit>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d005      	beq.n	80012b2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2202      	movs	r2, #2
 80012aa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e00c      	b.n	80012cc <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2201      	movs	r2, #1
 80012bc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f002 ff1f 	bl	8004108 <USB_DevDisconnect>

  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d101      	bne.n	80012ea <HAL_PCD_Start+0x16>
 80012e6:	2302      	movs	r3, #2
 80012e8:	e012      	b.n	8001310 <HAL_PCD_Start+0x3c>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2201      	movs	r2, #1
 80012ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f001 fe4e 	bl	8002f98 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f002 fee1 	bl	80040c8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001318:	b590      	push	{r4, r7, lr}
 800131a:	b08d      	sub	sp, #52	@ 0x34
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001326:	6a3b      	ldr	r3, [r7, #32]
 8001328:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f002 ff98 	bl	8004264 <USB_GetMode>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	f040 847e 	bne.w	8001c38 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4618      	mov	r0, r3
 8001342:	f002 ff01 	bl	8004148 <USB_ReadInterrupts>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	f000 8474 	beq.w	8001c36 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	0a1b      	lsrs	r3, r3, #8
 8001358:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f002 feee 	bl	8004148 <USB_ReadInterrupts>
 800136c:	4603      	mov	r3, r0
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b02      	cmp	r3, #2
 8001374:	d107      	bne.n	8001386 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	695a      	ldr	r2, [r3, #20]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f002 0202 	and.w	r2, r2, #2
 8001384:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f002 fedc 	bl	8004148 <USB_ReadInterrupts>
 8001390:	4603      	mov	r3, r0
 8001392:	f003 0310 	and.w	r3, r3, #16
 8001396:	2b10      	cmp	r3, #16
 8001398:	d161      	bne.n	800145e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	699a      	ldr	r2, [r3, #24]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f022 0210 	bic.w	r2, r2, #16
 80013a8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80013aa:	6a3b      	ldr	r3, [r7, #32]
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	f003 020f 	and.w	r2, r3, #15
 80013b6:	4613      	mov	r3, r2
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	4413      	add	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	3304      	adds	r3, #4
 80013c8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80013d0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80013d4:	d124      	bne.n	8001420 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80013dc:	4013      	ands	r3, r2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d035      	beq.n	800144e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	091b      	lsrs	r3, r3, #4
 80013ea:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	461a      	mov	r2, r3
 80013f4:	6a38      	ldr	r0, [r7, #32]
 80013f6:	f002 fd19 	bl	8003e2c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	68da      	ldr	r2, [r3, #12]
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	091b      	lsrs	r3, r3, #4
 8001402:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001406:	441a      	add	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	695a      	ldr	r2, [r3, #20]
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	091b      	lsrs	r3, r3, #4
 8001414:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001418:	441a      	add	r2, r3
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	615a      	str	r2, [r3, #20]
 800141e:	e016      	b.n	800144e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001426:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800142a:	d110      	bne.n	800144e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001432:	2208      	movs	r2, #8
 8001434:	4619      	mov	r1, r3
 8001436:	6a38      	ldr	r0, [r7, #32]
 8001438:	f002 fcf8 	bl	8003e2c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	695a      	ldr	r2, [r3, #20]
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	091b      	lsrs	r3, r3, #4
 8001444:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001448:	441a      	add	r2, r3
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	699a      	ldr	r2, [r3, #24]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f042 0210 	orr.w	r2, r2, #16
 800145c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f002 fe70 	bl	8004148 <USB_ReadInterrupts>
 8001468:	4603      	mov	r3, r0
 800146a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800146e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001472:	f040 80a7 	bne.w	80015c4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001476:	2300      	movs	r3, #0
 8001478:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	f002 fe74 	bl	800416c <USB_ReadDevAllOutEpInterrupt>
 8001484:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001486:	e099      	b.n	80015bc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 808e 	beq.w	80015b0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	4611      	mov	r1, r2
 800149e:	4618      	mov	r0, r3
 80014a0:	f002 fe96 	bl	80041d0 <USB_ReadDevOutEPInterrupt>
 80014a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d00c      	beq.n	80014ca <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80014b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b2:	015a      	lsls	r2, r3, #5
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	4413      	add	r3, r2
 80014b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014bc:	461a      	mov	r2, r3
 80014be:	2301      	movs	r3, #1
 80014c0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80014c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f000 fe93 	bl	80021f0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	f003 0308 	and.w	r3, r3, #8
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d00c      	beq.n	80014ee <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80014d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d6:	015a      	lsls	r2, r3, #5
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	4413      	add	r3, r2
 80014dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014e0:	461a      	mov	r2, r3
 80014e2:	2308      	movs	r3, #8
 80014e4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80014e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 ff69 	bl	80023c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	f003 0310 	and.w	r3, r3, #16
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d008      	beq.n	800150a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80014f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fa:	015a      	lsls	r2, r3, #5
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	4413      	add	r3, r2
 8001500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001504:	461a      	mov	r2, r3
 8001506:	2310      	movs	r3, #16
 8001508:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d030      	beq.n	8001576 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001514:	6a3b      	ldr	r3, [r7, #32]
 8001516:	695b      	ldr	r3, [r3, #20]
 8001518:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800151c:	2b80      	cmp	r3, #128	@ 0x80
 800151e:	d109      	bne.n	8001534 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	69fa      	ldr	r2, [r7, #28]
 800152a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800152e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001532:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001534:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001536:	4613      	mov	r3, r2
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	4413      	add	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	4413      	add	r3, r2
 8001546:	3304      	adds	r3, #4
 8001548:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	78db      	ldrb	r3, [r3, #3]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d108      	bne.n	8001564 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	2200      	movs	r2, #0
 8001556:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155a:	b2db      	uxtb	r3, r3
 800155c:	4619      	mov	r1, r3
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f004 fdd8 	bl	8006114 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001566:	015a      	lsls	r2, r3, #5
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	4413      	add	r3, r2
 800156c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001570:	461a      	mov	r2, r3
 8001572:	2302      	movs	r3, #2
 8001574:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	f003 0320 	and.w	r3, r3, #32
 800157c:	2b00      	cmp	r3, #0
 800157e:	d008      	beq.n	8001592 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001582:	015a      	lsls	r2, r3, #5
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	4413      	add	r3, r2
 8001588:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800158c:	461a      	mov	r2, r3
 800158e:	2320      	movs	r3, #32
 8001590:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d009      	beq.n	80015b0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800159c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159e:	015a      	lsls	r2, r3, #5
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	4413      	add	r3, r2
 80015a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015a8:	461a      	mov	r2, r3
 80015aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015ae:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80015b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b2:	3301      	adds	r3, #1
 80015b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80015b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015b8:	085b      	lsrs	r3, r3, #1
 80015ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80015bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f47f af62 	bne.w	8001488 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f002 fdbd 	bl	8004148 <USB_ReadInterrupts>
 80015ce:	4603      	mov	r3, r0
 80015d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80015d8:	f040 80db 	bne.w	8001792 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f002 fddc 	bl	800419e <USB_ReadDevAllInEpInterrupt>
 80015e6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80015ec:	e0cd      	b.n	800178a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80015ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f000 80c2 	beq.w	800177e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001600:	b2d2      	uxtb	r2, r2
 8001602:	4611      	mov	r1, r2
 8001604:	4618      	mov	r0, r3
 8001606:	f002 fe00 	bl	800420a <USB_ReadDevInEPInterrupt>
 800160a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b00      	cmp	r3, #0
 8001614:	d057      	beq.n	80016c6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001618:	f003 030f 	and.w	r3, r3, #15
 800161c:	2201      	movs	r2, #1
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800162a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	43db      	mvns	r3, r3
 8001630:	69f9      	ldr	r1, [r7, #28]
 8001632:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001636:	4013      	ands	r3, r2
 8001638:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800163a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163c:	015a      	lsls	r2, r3, #5
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	4413      	add	r3, r2
 8001642:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001646:	461a      	mov	r2, r3
 8001648:	2301      	movs	r3, #1
 800164a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	799b      	ldrb	r3, [r3, #6]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d132      	bne.n	80016ba <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001654:	6879      	ldr	r1, [r7, #4]
 8001656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001658:	4613      	mov	r3, r2
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	4413      	add	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	440b      	add	r3, r1
 8001662:	3320      	adds	r3, #32
 8001664:	6819      	ldr	r1, [r3, #0]
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800166a:	4613      	mov	r3, r2
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	4413      	add	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4403      	add	r3, r0
 8001674:	331c      	adds	r3, #28
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4419      	add	r1, r3
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800167e:	4613      	mov	r3, r2
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	4413      	add	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4403      	add	r3, r0
 8001688:	3320      	adds	r3, #32
 800168a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800168c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168e:	2b00      	cmp	r3, #0
 8001690:	d113      	bne.n	80016ba <HAL_PCD_IRQHandler+0x3a2>
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001696:	4613      	mov	r3, r2
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	4413      	add	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	440b      	add	r3, r1
 80016a0:	3324      	adds	r3, #36	@ 0x24
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d108      	bne.n	80016ba <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6818      	ldr	r0, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80016b2:	461a      	mov	r2, r3
 80016b4:	2101      	movs	r1, #1
 80016b6:	f002 fe05 	bl	80042c4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80016ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	4619      	mov	r1, r3
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f004 fca2 	bl	800600a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	f003 0308 	and.w	r3, r3, #8
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d008      	beq.n	80016e2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80016d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d2:	015a      	lsls	r2, r3, #5
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	4413      	add	r3, r2
 80016d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016dc:	461a      	mov	r2, r3
 80016de:	2308      	movs	r3, #8
 80016e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	f003 0310 	and.w	r3, r3, #16
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d008      	beq.n	80016fe <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80016ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ee:	015a      	lsls	r2, r3, #5
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	4413      	add	r3, r2
 80016f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016f8:	461a      	mov	r2, r3
 80016fa:	2310      	movs	r3, #16
 80016fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001704:	2b00      	cmp	r3, #0
 8001706:	d008      	beq.n	800171a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170a:	015a      	lsls	r2, r3, #5
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	4413      	add	r3, r2
 8001710:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001714:	461a      	mov	r2, r3
 8001716:	2340      	movs	r3, #64	@ 0x40
 8001718:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d023      	beq.n	800176c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001724:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001726:	6a38      	ldr	r0, [r7, #32]
 8001728:	f001 fe06 	bl	8003338 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800172c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800172e:	4613      	mov	r3, r2
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	4413      	add	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	3310      	adds	r3, #16
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	4413      	add	r3, r2
 800173c:	3304      	adds	r3, #4
 800173e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	78db      	ldrb	r3, [r3, #3]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d108      	bne.n	800175a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	2200      	movs	r2, #0
 800174c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800174e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001750:	b2db      	uxtb	r3, r3
 8001752:	4619      	mov	r1, r3
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f004 fcef 	bl	8006138 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800175a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175c:	015a      	lsls	r2, r3, #5
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	4413      	add	r3, r2
 8001762:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001766:	461a      	mov	r2, r3
 8001768:	2302      	movs	r3, #2
 800176a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001776:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 fcac 	bl	80020d6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800177e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001780:	3301      	adds	r3, #1
 8001782:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001786:	085b      	lsrs	r3, r3, #1
 8001788:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800178a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800178c:	2b00      	cmp	r3, #0
 800178e:	f47f af2e 	bne.w	80015ee <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f002 fcd6 	bl	8004148 <USB_ReadInterrupts>
 800179c:	4603      	mov	r3, r0
 800179e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80017a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80017a6:	d114      	bne.n	80017d2 <HAL_PCD_IRQHandler+0x4ba>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	69fa      	ldr	r2, [r7, #28]
 80017b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017b6:	f023 0301 	bic.w	r3, r3, #1
 80017ba:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f004 fc9b 	bl	80060f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	695a      	ldr	r2, [r3, #20]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80017d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f002 fcb6 	bl	8004148 <USB_ReadInterrupts>
 80017dc:	4603      	mov	r3, r0
 80017de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80017e6:	d112      	bne.n	800180e <HAL_PCD_IRQHandler+0x4f6>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d102      	bne.n	80017fe <HAL_PCD_IRQHandler+0x4e6>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f004 fc57 	bl	80060ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	695a      	ldr	r2, [r3, #20]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800180c:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f002 fc98 	bl	8004148 <USB_ReadInterrupts>
 8001818:	4603      	mov	r3, r0
 800181a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800181e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001822:	f040 80b7 	bne.w	8001994 <HAL_PCD_IRQHandler+0x67c>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	69fa      	ldr	r2, [r7, #28]
 8001830:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001834:	f023 0301 	bic.w	r3, r3, #1
 8001838:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2110      	movs	r1, #16
 8001840:	4618      	mov	r0, r3
 8001842:	f001 fd79 	bl	8003338 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001846:	2300      	movs	r3, #0
 8001848:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800184a:	e046      	b.n	80018da <HAL_PCD_IRQHandler+0x5c2>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800184c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800184e:	015a      	lsls	r2, r3, #5
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	4413      	add	r3, r2
 8001854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001858:	461a      	mov	r2, r3
 800185a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800185e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001862:	015a      	lsls	r2, r3, #5
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	4413      	add	r3, r2
 8001868:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001870:	0151      	lsls	r1, r2, #5
 8001872:	69fa      	ldr	r2, [r7, #28]
 8001874:	440a      	add	r2, r1
 8001876:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800187a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800187e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001882:	015a      	lsls	r2, r3, #5
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	4413      	add	r3, r2
 8001888:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800188c:	461a      	mov	r2, r3
 800188e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001892:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001896:	015a      	lsls	r2, r3, #5
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	4413      	add	r3, r2
 800189c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018a4:	0151      	lsls	r1, r2, #5
 80018a6:	69fa      	ldr	r2, [r7, #28]
 80018a8:	440a      	add	r2, r1
 80018aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80018ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80018b2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80018b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018b6:	015a      	lsls	r2, r3, #5
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	4413      	add	r3, r2
 80018bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018c4:	0151      	lsls	r1, r2, #5
 80018c6:	69fa      	ldr	r2, [r7, #28]
 80018c8:	440a      	add	r2, r1
 80018ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80018ce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80018d2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018d6:	3301      	adds	r3, #1
 80018d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	791b      	ldrb	r3, [r3, #4]
 80018de:	461a      	mov	r2, r3
 80018e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d3b2      	bcc.n	800184c <HAL_PCD_IRQHandler+0x534>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	69fa      	ldr	r2, [r7, #28]
 80018f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018f4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80018f8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	7bdb      	ldrb	r3, [r3, #15]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d016      	beq.n	8001930 <HAL_PCD_IRQHandler+0x618>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001908:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800190c:	69fa      	ldr	r2, [r7, #28]
 800190e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001912:	f043 030b 	orr.w	r3, r3, #11
 8001916:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001922:	69fa      	ldr	r2, [r7, #28]
 8001924:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001928:	f043 030b 	orr.w	r3, r3, #11
 800192c:	6453      	str	r3, [r2, #68]	@ 0x44
 800192e:	e015      	b.n	800195c <HAL_PCD_IRQHandler+0x644>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001936:	695b      	ldr	r3, [r3, #20]
 8001938:	69fa      	ldr	r2, [r7, #28]
 800193a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800193e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001942:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001946:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	69fa      	ldr	r2, [r7, #28]
 8001952:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001956:	f043 030b 	orr.w	r3, r3, #11
 800195a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	69fa      	ldr	r2, [r7, #28]
 8001966:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800196a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800196e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6818      	ldr	r0, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800197e:	461a      	mov	r2, r3
 8001980:	f002 fca0 	bl	80042c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	695a      	ldr	r2, [r3, #20]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001992:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f002 fbd5 	bl	8004148 <USB_ReadInterrupts>
 800199e:	4603      	mov	r3, r0
 80019a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019a8:	d123      	bne.n	80019f2 <HAL_PCD_IRQHandler+0x6da>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f002 fc65 	bl	800427e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f001 fd33 	bl	8003424 <USB_GetDevSpeed>
 80019be:	4603      	mov	r3, r0
 80019c0:	461a      	mov	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681c      	ldr	r4, [r3, #0]
 80019ca:	f001 f99b 	bl	8002d04 <HAL_RCC_GetHCLKFreq>
 80019ce:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019d4:	461a      	mov	r2, r3
 80019d6:	4620      	mov	r0, r4
 80019d8:	f001 fa3c 	bl	8002e54 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f004 fb3c 	bl	800605a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	695a      	ldr	r2, [r3, #20]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80019f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f002 fba6 	bl	8004148 <USB_ReadInterrupts>
 80019fc:	4603      	mov	r3, r0
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	2b08      	cmp	r3, #8
 8001a04:	d10a      	bne.n	8001a1c <HAL_PCD_IRQHandler+0x704>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f004 fb19 	bl	800603e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	695a      	ldr	r2, [r3, #20]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f002 0208 	and.w	r2, r2, #8
 8001a1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f002 fb91 	bl	8004148 <USB_ReadInterrupts>
 8001a26:	4603      	mov	r3, r0
 8001a28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a2c:	2b80      	cmp	r3, #128	@ 0x80
 8001a2e:	d123      	bne.n	8001a78 <HAL_PCD_IRQHandler+0x760>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001a30:	6a3b      	ldr	r3, [r7, #32]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001a38:	6a3b      	ldr	r3, [r7, #32]
 8001a3a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a40:	e014      	b.n	8001a6c <HAL_PCD_IRQHandler+0x754>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a46:	4613      	mov	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	4413      	add	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	440b      	add	r3, r1
 8001a50:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d105      	bne.n	8001a66 <HAL_PCD_IRQHandler+0x74e>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	4619      	mov	r1, r3
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 fb07 	bl	8002074 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a68:	3301      	adds	r3, #1
 8001a6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	791b      	ldrb	r3, [r3, #4]
 8001a70:	461a      	mov	r2, r3
 8001a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d3e4      	bcc.n	8001a42 <HAL_PCD_IRQHandler+0x72a>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f002 fb63 	bl	8004148 <USB_ReadInterrupts>
 8001a82:	4603      	mov	r3, r0
 8001a84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001a8c:	d13c      	bne.n	8001b08 <HAL_PCD_IRQHandler+0x7f0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a8e:	2301      	movs	r3, #1
 8001a90:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a92:	e02b      	b.n	8001aec <HAL_PCD_IRQHandler+0x7d4>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a96:	015a      	lsls	r2, r3, #5
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	4413      	add	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	3318      	adds	r3, #24
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d115      	bne.n	8001ae6 <HAL_PCD_IRQHandler+0x7ce>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001aba:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	da12      	bge.n	8001ae6 <HAL_PCD_IRQHandler+0x7ce>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	4413      	add	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	440b      	add	r3, r1
 8001ace:	3317      	adds	r3, #23
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	4619      	mov	r1, r3
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 fac7 	bl	8002074 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae8:	3301      	adds	r3, #1
 8001aea:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	791b      	ldrb	r3, [r3, #4]
 8001af0:	461a      	mov	r2, r3
 8001af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d3cd      	bcc.n	8001a94 <HAL_PCD_IRQHandler+0x77c>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	695a      	ldr	r2, [r3, #20]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001b06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f002 fb1b 	bl	8004148 <USB_ReadInterrupts>
 8001b12:	4603      	mov	r3, r0
 8001b14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b1c:	d156      	bne.n	8001bcc <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b1e:	2301      	movs	r3, #1
 8001b20:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b22:	e045      	b.n	8001bb0 <HAL_PCD_IRQHandler+0x898>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b26:	015a      	lsls	r2, r3, #5
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b34:	6879      	ldr	r1, [r7, #4]
 8001b36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b38:	4613      	mov	r3, r2
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	440b      	add	r3, r1
 8001b42:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d12e      	bne.n	8001baa <HAL_PCD_IRQHandler+0x892>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b4c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	da2b      	bge.n	8001baa <HAL_PCD_IRQHandler+0x892>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001b5e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d121      	bne.n	8001baa <HAL_PCD_IRQHandler+0x892>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	4413      	add	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	440b      	add	r3, r1
 8001b74:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001b78:	2201      	movs	r2, #1
 8001b7a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001b7c:	6a3b      	ldr	r3, [r7, #32]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001b84:	6a3b      	ldr	r3, [r7, #32]
 8001b86:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001b88:	6a3b      	ldr	r3, [r7, #32]
 8001b8a:	695b      	ldr	r3, [r3, #20]
 8001b8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d10a      	bne.n	8001baa <HAL_PCD_IRQHandler+0x892>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	69fa      	ldr	r2, [r7, #28]
 8001b9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ba2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ba6:	6053      	str	r3, [r2, #4]
            break;
 8001ba8:	e008      	b.n	8001bbc <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bac:	3301      	adds	r3, #1
 8001bae:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	791b      	ldrb	r3, [r3, #4]
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d3b3      	bcc.n	8001b24 <HAL_PCD_IRQHandler+0x80c>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	695a      	ldr	r2, [r3, #20]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001bca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f002 fab9 	bl	8004148 <USB_ReadInterrupts>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001be0:	d10a      	bne.n	8001bf8 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f004 faba 	bl	800615c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	695a      	ldr	r2, [r3, #20]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001bf6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f002 faa3 	bl	8004148 <USB_ReadInterrupts>
 8001c02:	4603      	mov	r3, r0
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b04      	cmp	r3, #4
 8001c0a:	d115      	bne.n	8001c38 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d002      	beq.n	8001c24 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f004 faaa 	bl	8006178 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6859      	ldr	r1, [r3, #4]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	430a      	orrs	r2, r1
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	e000      	b.n	8001c38 <HAL_PCD_IRQHandler+0x920>
      return;
 8001c36:	bf00      	nop
    }
  }
}
 8001c38:	3734      	adds	r7, #52	@ 0x34
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd90      	pop	{r4, r7, pc}

08001c3e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
 8001c46:	460b      	mov	r3, r1
 8001c48:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d101      	bne.n	8001c58 <HAL_PCD_SetAddress+0x1a>
 8001c54:	2302      	movs	r3, #2
 8001c56:	e012      	b.n	8001c7e <HAL_PCD_SetAddress+0x40>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	78fa      	ldrb	r2, [r7, #3]
 8001c64:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	78fa      	ldrb	r2, [r7, #3]
 8001c6c:	4611      	mov	r1, r2
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f002 fa05 	bl	800407e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b084      	sub	sp, #16
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	4608      	mov	r0, r1
 8001c90:	4611      	mov	r1, r2
 8001c92:	461a      	mov	r2, r3
 8001c94:	4603      	mov	r3, r0
 8001c96:	70fb      	strb	r3, [r7, #3]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	803b      	strh	r3, [r7, #0]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ca4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	da0f      	bge.n	8001ccc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cac:	78fb      	ldrb	r3, [r7, #3]
 8001cae:	f003 020f 	and.w	r2, r3, #15
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	4413      	add	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	3310      	adds	r3, #16
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	705a      	strb	r2, [r3, #1]
 8001cca:	e00f      	b.n	8001cec <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ccc:	78fb      	ldrb	r3, [r7, #3]
 8001cce:	f003 020f 	and.w	r2, r3, #15
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001cec:	78fb      	ldrb	r3, [r7, #3]
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001cf8:	883a      	ldrh	r2, [r7, #0]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	78ba      	ldrb	r2, [r7, #2]
 8001d02:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	785b      	ldrb	r3, [r3, #1]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d004      	beq.n	8001d16 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	461a      	mov	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d16:	78bb      	ldrb	r3, [r7, #2]
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d102      	bne.n	8001d22 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d101      	bne.n	8001d30 <HAL_PCD_EP_Open+0xaa>
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	e00e      	b.n	8001d4e <HAL_PCD_EP_Open+0xc8>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68f9      	ldr	r1, [r7, #12]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f001 fb94 	bl	800346c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001d4c:	7afb      	ldrb	r3, [r7, #11]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b084      	sub	sp, #16
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	da0f      	bge.n	8001d8a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d6a:	78fb      	ldrb	r3, [r7, #3]
 8001d6c:	f003 020f 	and.w	r2, r3, #15
 8001d70:	4613      	mov	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	4413      	add	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	3310      	adds	r3, #16
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	3304      	adds	r3, #4
 8001d80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2201      	movs	r2, #1
 8001d86:	705a      	strb	r2, [r3, #1]
 8001d88:	e00f      	b.n	8001daa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d8a:	78fb      	ldrb	r3, [r7, #3]
 8001d8c:	f003 020f 	and.w	r2, r3, #15
 8001d90:	4613      	mov	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	4413      	add	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	4413      	add	r3, r2
 8001da0:	3304      	adds	r3, #4
 8001da2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2200      	movs	r2, #0
 8001da8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001daa:	78fb      	ldrb	r3, [r7, #3]
 8001dac:	f003 030f 	and.w	r3, r3, #15
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d101      	bne.n	8001dc4 <HAL_PCD_EP_Close+0x6e>
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	e00e      	b.n	8001de2 <HAL_PCD_EP_Close+0x8c>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68f9      	ldr	r1, [r7, #12]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f001 fbd0 	bl	8003578 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b086      	sub	sp, #24
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	60f8      	str	r0, [r7, #12]
 8001df2:	607a      	str	r2, [r7, #4]
 8001df4:	603b      	str	r3, [r7, #0]
 8001df6:	460b      	mov	r3, r1
 8001df8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dfa:	7afb      	ldrb	r3, [r7, #11]
 8001dfc:	f003 020f 	and.w	r2, r3, #15
 8001e00:	4613      	mov	r3, r2
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	4413      	add	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	4413      	add	r3, r2
 8001e10:	3304      	adds	r3, #4
 8001e12:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	2200      	movs	r2, #0
 8001e24:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e2c:	7afb      	ldrb	r3, [r7, #11]
 8001e2e:	f003 030f 	and.w	r3, r3, #15
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	799b      	ldrb	r3, [r3, #6]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d102      	bne.n	8001e46 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6818      	ldr	r0, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	799b      	ldrb	r3, [r3, #6]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	6979      	ldr	r1, [r7, #20]
 8001e52:	f001 fc6d 	bl	8003730 <USB_EPStartXfer>

  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e6c:	78fb      	ldrb	r3, [r7, #3]
 8001e6e:	f003 020f 	and.w	r2, r3, #15
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	4413      	add	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001e82:	681b      	ldr	r3, [r3, #0]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr

08001e8e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b086      	sub	sp, #24
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	60f8      	str	r0, [r7, #12]
 8001e96:	607a      	str	r2, [r7, #4]
 8001e98:	603b      	str	r3, [r7, #0]
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e9e:	7afb      	ldrb	r3, [r7, #11]
 8001ea0:	f003 020f 	and.w	r2, r3, #15
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	3310      	adds	r3, #16
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	3304      	adds	r3, #4
 8001eb4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ece:	7afb      	ldrb	r3, [r7, #11]
 8001ed0:	f003 030f 	and.w	r3, r3, #15
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	799b      	ldrb	r3, [r3, #6]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d102      	bne.n	8001ee8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	799b      	ldrb	r3, [r3, #6]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	6979      	ldr	r1, [r7, #20]
 8001ef4:	f001 fc1c 	bl	8003730 <USB_EPStartXfer>

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b084      	sub	sp, #16
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f0e:	78fb      	ldrb	r3, [r7, #3]
 8001f10:	f003 030f 	and.w	r3, r3, #15
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	7912      	ldrb	r2, [r2, #4]
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d901      	bls.n	8001f20 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e04f      	b.n	8001fc0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	da0f      	bge.n	8001f48 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f28:	78fb      	ldrb	r3, [r7, #3]
 8001f2a:	f003 020f 	and.w	r2, r3, #15
 8001f2e:	4613      	mov	r3, r2
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	4413      	add	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	3310      	adds	r3, #16
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2201      	movs	r2, #1
 8001f44:	705a      	strb	r2, [r3, #1]
 8001f46:	e00d      	b.n	8001f64 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f48:	78fa      	ldrb	r2, [r7, #3]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	4413      	add	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	4413      	add	r3, r2
 8001f5a:	3304      	adds	r3, #4
 8001f5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2201      	movs	r2, #1
 8001f68:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f6a:	78fb      	ldrb	r3, [r7, #3]
 8001f6c:	f003 030f 	and.w	r3, r3, #15
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d101      	bne.n	8001f84 <HAL_PCD_EP_SetStall+0x82>
 8001f80:	2302      	movs	r3, #2
 8001f82:	e01d      	b.n	8001fc0 <HAL_PCD_EP_SetStall+0xbe>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68f9      	ldr	r1, [r7, #12]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f001 ffa1 	bl	8003eda <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f98:	78fb      	ldrb	r3, [r7, #3]
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d109      	bne.n	8001fb6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6818      	ldr	r0, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	7999      	ldrb	r1, [r3, #6]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	f002 f987 	bl	80042c4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	7912      	ldrb	r2, [r2, #4]
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e042      	b.n	800206c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fe6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	da0f      	bge.n	800200e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fee:	78fb      	ldrb	r3, [r7, #3]
 8001ff0:	f003 020f 	and.w	r2, r3, #15
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	3310      	adds	r3, #16
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	4413      	add	r3, r2
 8002002:	3304      	adds	r3, #4
 8002004:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2201      	movs	r2, #1
 800200a:	705a      	strb	r2, [r3, #1]
 800200c:	e00f      	b.n	800202e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800200e:	78fb      	ldrb	r3, [r7, #3]
 8002010:	f003 020f 	and.w	r2, r3, #15
 8002014:	4613      	mov	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4413      	add	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	4413      	add	r3, r2
 8002024:	3304      	adds	r3, #4
 8002026:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002034:	78fb      	ldrb	r3, [r7, #3]
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	b2da      	uxtb	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002046:	2b01      	cmp	r3, #1
 8002048:	d101      	bne.n	800204e <HAL_PCD_EP_ClrStall+0x86>
 800204a:	2302      	movs	r3, #2
 800204c:	e00e      	b.n	800206c <HAL_PCD_EP_ClrStall+0xa4>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68f9      	ldr	r1, [r7, #12]
 800205c:	4618      	mov	r0, r3
 800205e:	f001 ffa9 	bl	8003fb4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002080:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002084:	2b00      	cmp	r3, #0
 8002086:	da0c      	bge.n	80020a2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002088:	78fb      	ldrb	r3, [r7, #3]
 800208a:	f003 020f 	and.w	r2, r3, #15
 800208e:	4613      	mov	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	4413      	add	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	3310      	adds	r3, #16
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	4413      	add	r3, r2
 800209c:	3304      	adds	r3, #4
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	e00c      	b.n	80020bc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020a2:	78fb      	ldrb	r3, [r7, #3]
 80020a4:	f003 020f 	and.w	r2, r3, #15
 80020a8:	4613      	mov	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4413      	add	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	4413      	add	r3, r2
 80020b8:	3304      	adds	r3, #4
 80020ba:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68f9      	ldr	r1, [r7, #12]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f001 fdcc 	bl	8003c60 <USB_EPStopXfer>
 80020c8:	4603      	mov	r3, r0
 80020ca:	72fb      	strb	r3, [r7, #11]

  return ret;
 80020cc:	7afb      	ldrb	r3, [r7, #11]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b08a      	sub	sp, #40	@ 0x28
 80020da:	af02      	add	r7, sp, #8
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	4613      	mov	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4413      	add	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	3310      	adds	r3, #16
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	4413      	add	r3, r2
 80020fa:	3304      	adds	r3, #4
 80020fc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	695a      	ldr	r2, [r3, #20]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	429a      	cmp	r2, r3
 8002108:	d901      	bls.n	800210e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e06b      	b.n	80021e6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	691a      	ldr	r2, [r3, #16]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	69fa      	ldr	r2, [r7, #28]
 8002120:	429a      	cmp	r2, r3
 8002122:	d902      	bls.n	800212a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	3303      	adds	r3, #3
 800212e:	089b      	lsrs	r3, r3, #2
 8002130:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002132:	e02a      	b.n	800218a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	691a      	ldr	r2, [r3, #16]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	69fa      	ldr	r2, [r7, #28]
 8002146:	429a      	cmp	r2, r3
 8002148:	d902      	bls.n	8002150 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	3303      	adds	r3, #3
 8002154:	089b      	lsrs	r3, r3, #2
 8002156:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	68d9      	ldr	r1, [r3, #12]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	b2da      	uxtb	r2, r3
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	4603      	mov	r3, r0
 800216c:	6978      	ldr	r0, [r7, #20]
 800216e:	f001 fe20 	bl	8003db2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	68da      	ldr	r2, [r3, #12]
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	441a      	add	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	695a      	ldr	r2, [r3, #20]
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	441a      	add	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	015a      	lsls	r2, r3, #5
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4413      	add	r3, r2
 8002192:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	429a      	cmp	r2, r3
 800219e:	d809      	bhi.n	80021b4 <PCD_WriteEmptyTxFifo+0xde>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	695a      	ldr	r2, [r3, #20]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d203      	bcs.n	80021b4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1bf      	bne.n	8002134 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d811      	bhi.n	80021e4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	2201      	movs	r2, #1
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	43db      	mvns	r3, r3
 80021da:	6939      	ldr	r1, [r7, #16]
 80021dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80021e0:	4013      	ands	r3, r2
 80021e2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3720      	adds	r7, #32
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	333c      	adds	r3, #60	@ 0x3c
 8002208:	3304      	adds	r3, #4
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	015a      	lsls	r2, r3, #5
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	4413      	add	r3, r2
 8002216:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	799b      	ldrb	r3, [r3, #6]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d17b      	bne.n	800231e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	f003 0308 	and.w	r3, r3, #8
 800222c:	2b00      	cmp	r3, #0
 800222e:	d015      	beq.n	800225c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	4a61      	ldr	r2, [pc, #388]	@ (80023b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002234:	4293      	cmp	r3, r2
 8002236:	f240 80b9 	bls.w	80023ac <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 80b3 	beq.w	80023ac <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	015a      	lsls	r2, r3, #5
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	4413      	add	r3, r2
 800224e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002252:	461a      	mov	r2, r3
 8002254:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002258:	6093      	str	r3, [r2, #8]
 800225a:	e0a7      	b.n	80023ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	f003 0320 	and.w	r3, r3, #32
 8002262:	2b00      	cmp	r3, #0
 8002264:	d009      	beq.n	800227a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	015a      	lsls	r2, r3, #5
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	4413      	add	r3, r2
 800226e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002272:	461a      	mov	r2, r3
 8002274:	2320      	movs	r3, #32
 8002276:	6093      	str	r3, [r2, #8]
 8002278:	e098      	b.n	80023ac <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002280:	2b00      	cmp	r3, #0
 8002282:	f040 8093 	bne.w	80023ac <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	4a4b      	ldr	r2, [pc, #300]	@ (80023b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d90f      	bls.n	80022ae <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00a      	beq.n	80022ae <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	015a      	lsls	r2, r3, #5
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	4413      	add	r3, r2
 80022a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022a4:	461a      	mov	r2, r3
 80022a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022aa:	6093      	str	r3, [r2, #8]
 80022ac:	e07e      	b.n	80023ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	4613      	mov	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4413      	add	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	4413      	add	r3, r2
 80022c0:	3304      	adds	r3, #4
 80022c2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6a1a      	ldr	r2, [r3, #32]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	0159      	lsls	r1, r3, #5
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	440b      	add	r3, r1
 80022d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022da:	1ad2      	subs	r2, r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d114      	bne.n	8002310 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d109      	bne.n	8002302 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6818      	ldr	r0, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80022f8:	461a      	mov	r2, r3
 80022fa:	2101      	movs	r1, #1
 80022fc:	f001 ffe2 	bl	80042c4 <USB_EP0_OutStart>
 8002300:	e006      	b.n	8002310 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	68da      	ldr	r2, [r3, #12]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	441a      	add	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	b2db      	uxtb	r3, r3
 8002314:	4619      	mov	r1, r3
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f003 fe5c 	bl	8005fd4 <HAL_PCD_DataOutStageCallback>
 800231c:	e046      	b.n	80023ac <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	4a26      	ldr	r2, [pc, #152]	@ (80023bc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d124      	bne.n	8002370 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00a      	beq.n	8002346 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	015a      	lsls	r2, r3, #5
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	4413      	add	r3, r2
 8002338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800233c:	461a      	mov	r2, r3
 800233e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002342:	6093      	str	r3, [r2, #8]
 8002344:	e032      	b.n	80023ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	f003 0320 	and.w	r3, r3, #32
 800234c:	2b00      	cmp	r3, #0
 800234e:	d008      	beq.n	8002362 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	015a      	lsls	r2, r3, #5
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	4413      	add	r3, r2
 8002358:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800235c:	461a      	mov	r2, r3
 800235e:	2320      	movs	r3, #32
 8002360:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	4619      	mov	r1, r3
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f003 fe33 	bl	8005fd4 <HAL_PCD_DataOutStageCallback>
 800236e:	e01d      	b.n	80023ac <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d114      	bne.n	80023a0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	4613      	mov	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	4413      	add	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	440b      	add	r3, r1
 8002384:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d108      	bne.n	80023a0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6818      	ldr	r0, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002398:	461a      	mov	r2, r3
 800239a:	2100      	movs	r1, #0
 800239c:	f001 ff92 	bl	80042c4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	4619      	mov	r1, r3
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f003 fe14 	bl	8005fd4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3720      	adds	r7, #32
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	4f54300a 	.word	0x4f54300a
 80023bc:	4f54310a 	.word	0x4f54310a

080023c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	333c      	adds	r3, #60	@ 0x3c
 80023d8:	3304      	adds	r3, #4
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	015a      	lsls	r2, r3, #5
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	4413      	add	r3, r2
 80023e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	4a15      	ldr	r2, [pc, #84]	@ (8002448 <PCD_EP_OutSetupPacket_int+0x88>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d90e      	bls.n	8002414 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d009      	beq.n	8002414 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	015a      	lsls	r2, r3, #5
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4413      	add	r3, r2
 8002408:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800240c:	461a      	mov	r2, r3
 800240e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002412:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f003 fdcb 	bl	8005fb0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	4a0a      	ldr	r2, [pc, #40]	@ (8002448 <PCD_EP_OutSetupPacket_int+0x88>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d90c      	bls.n	800243c <PCD_EP_OutSetupPacket_int+0x7c>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	799b      	ldrb	r3, [r3, #6]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d108      	bne.n	800243c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6818      	ldr	r0, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002434:	461a      	mov	r2, r3
 8002436:	2101      	movs	r1, #1
 8002438:	f001 ff44 	bl	80042c4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	4f54300a 	.word	0x4f54300a

0800244c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	70fb      	strb	r3, [r7, #3]
 8002458:	4613      	mov	r3, r2
 800245a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002462:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002464:	78fb      	ldrb	r3, [r7, #3]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d107      	bne.n	800247a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800246a:	883b      	ldrh	r3, [r7, #0]
 800246c:	0419      	lsls	r1, r3, #16
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	430a      	orrs	r2, r1
 8002476:	629a      	str	r2, [r3, #40]	@ 0x28
 8002478:	e028      	b.n	80024cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002480:	0c1b      	lsrs	r3, r3, #16
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	4413      	add	r3, r2
 8002486:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002488:	2300      	movs	r3, #0
 800248a:	73fb      	strb	r3, [r7, #15]
 800248c:	e00d      	b.n	80024aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	7bfb      	ldrb	r3, [r7, #15]
 8002494:	3340      	adds	r3, #64	@ 0x40
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	0c1b      	lsrs	r3, r3, #16
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	4413      	add	r3, r2
 80024a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
 80024a6:	3301      	adds	r3, #1
 80024a8:	73fb      	strb	r3, [r7, #15]
 80024aa:	7bfa      	ldrb	r2, [r7, #15]
 80024ac:	78fb      	ldrb	r3, [r7, #3]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d3ec      	bcc.n	800248e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80024b4:	883b      	ldrh	r3, [r7, #0]
 80024b6:	0418      	lsls	r0, r3, #16
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6819      	ldr	r1, [r3, #0]
 80024bc:	78fb      	ldrb	r3, [r7, #3]
 80024be:	3b01      	subs	r3, #1
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	4302      	orrs	r2, r0
 80024c4:	3340      	adds	r3, #64	@ 0x40
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr

080024d8 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	887a      	ldrh	r2, [r7, #2]
 80024ea:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr

080024f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08a      	sub	sp, #40	@ 0x28
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e23b      	b.n	8002982 <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d050      	beq.n	80025b8 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002516:	4b9e      	ldr	r3, [pc, #632]	@ (8002790 <HAL_RCC_OscConfig+0x298>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 030c 	and.w	r3, r3, #12
 800251e:	2b04      	cmp	r3, #4
 8002520:	d00c      	beq.n	800253c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002522:	4b9b      	ldr	r3, [pc, #620]	@ (8002790 <HAL_RCC_OscConfig+0x298>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800252a:	2b08      	cmp	r3, #8
 800252c:	d112      	bne.n	8002554 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800252e:	4b98      	ldr	r3, [pc, #608]	@ (8002790 <HAL_RCC_OscConfig+0x298>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002536:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800253a:	d10b      	bne.n	8002554 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800253c:	4b94      	ldr	r3, [pc, #592]	@ (8002790 <HAL_RCC_OscConfig+0x298>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d036      	beq.n	80025b6 <HAL_RCC_OscConfig+0xbe>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d132      	bne.n	80025b6 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e216      	b.n	8002982 <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	4b8e      	ldr	r3, [pc, #568]	@ (8002794 <HAL_RCC_OscConfig+0x29c>)
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d013      	beq.n	800258e <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002566:	f7fe fa9b 	bl	8000aa0 <HAL_GetTick>
 800256a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800256e:	f7fe fa97 	bl	8000aa0 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	6a3b      	ldr	r3, [r7, #32]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b64      	cmp	r3, #100	@ 0x64
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e200      	b.n	8002982 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002580:	4b83      	ldr	r3, [pc, #524]	@ (8002790 <HAL_RCC_OscConfig+0x298>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0f0      	beq.n	800256e <HAL_RCC_OscConfig+0x76>
 800258c:	e014      	b.n	80025b8 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258e:	f7fe fa87 	bl	8000aa0 <HAL_GetTick>
 8002592:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002596:	f7fe fa83 	bl	8000aa0 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	6a3b      	ldr	r3, [r7, #32]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b64      	cmp	r3, #100	@ 0x64
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e1ec      	b.n	8002982 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a8:	4b79      	ldr	r3, [pc, #484]	@ (8002790 <HAL_RCC_OscConfig+0x298>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1f0      	bne.n	8002596 <HAL_RCC_OscConfig+0x9e>
 80025b4:	e000      	b.n	80025b8 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d077      	beq.n	80026b4 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025c4:	4b72      	ldr	r3, [pc, #456]	@ (8002790 <HAL_RCC_OscConfig+0x298>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 030c 	and.w	r3, r3, #12
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00b      	beq.n	80025e8 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025d0:	4b6f      	ldr	r3, [pc, #444]	@ (8002790 <HAL_RCC_OscConfig+0x298>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d126      	bne.n	800262a <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025dc:	4b6c      	ldr	r3, [pc, #432]	@ (8002790 <HAL_RCC_OscConfig+0x298>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d120      	bne.n	800262a <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e8:	4b69      	ldr	r3, [pc, #420]	@ (8002790 <HAL_RCC_OscConfig+0x298>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d005      	beq.n	8002600 <HAL_RCC_OscConfig+0x108>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d001      	beq.n	8002600 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e1c0      	b.n	8002982 <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002600:	4b63      	ldr	r3, [pc, #396]	@ (8002790 <HAL_RCC_OscConfig+0x298>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	21f8      	movs	r1, #248	@ 0xf8
 800260e:	60f9      	str	r1, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002610:	68f9      	ldr	r1, [r7, #12]
 8002612:	fa91 f1a1 	rbit	r1, r1
 8002616:	6139      	str	r1, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002618:	6939      	ldr	r1, [r7, #16]
 800261a:	fab1 f181 	clz	r1, r1
 800261e:	b2c9      	uxtb	r1, r1
 8002620:	408b      	lsls	r3, r1
 8002622:	495b      	ldr	r1, [pc, #364]	@ (8002790 <HAL_RCC_OscConfig+0x298>)
 8002624:	4313      	orrs	r3, r2
 8002626:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002628:	e044      	b.n	80026b4 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d02a      	beq.n	8002688 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002632:	4b59      	ldr	r3, [pc, #356]	@ (8002798 <HAL_RCC_OscConfig+0x2a0>)
 8002634:	2201      	movs	r2, #1
 8002636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002638:	f7fe fa32 	bl	8000aa0 <HAL_GetTick>
 800263c:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002640:	f7fe fa2e 	bl	8000aa0 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e197      	b.n	8002982 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002652:	4b4f      	ldr	r3, [pc, #316]	@ (8002790 <HAL_RCC_OscConfig+0x298>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f0      	beq.n	8002640 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800265e:	4b4c      	ldr	r3, [pc, #304]	@ (8002790 <HAL_RCC_OscConfig+0x298>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	21f8      	movs	r1, #248	@ 0xf8
 800266c:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266e:	6979      	ldr	r1, [r7, #20]
 8002670:	fa91 f1a1 	rbit	r1, r1
 8002674:	61b9      	str	r1, [r7, #24]
  return result;
 8002676:	69b9      	ldr	r1, [r7, #24]
 8002678:	fab1 f181 	clz	r1, r1
 800267c:	b2c9      	uxtb	r1, r1
 800267e:	408b      	lsls	r3, r1
 8002680:	4943      	ldr	r1, [pc, #268]	@ (8002790 <HAL_RCC_OscConfig+0x298>)
 8002682:	4313      	orrs	r3, r2
 8002684:	600b      	str	r3, [r1, #0]
 8002686:	e015      	b.n	80026b4 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002688:	4b43      	ldr	r3, [pc, #268]	@ (8002798 <HAL_RCC_OscConfig+0x2a0>)
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268e:	f7fe fa07 	bl	8000aa0 <HAL_GetTick>
 8002692:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002696:	f7fe fa03 	bl	8000aa0 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e16c      	b.n	8002982 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026a8:	4b39      	ldr	r3, [pc, #228]	@ (8002790 <HAL_RCC_OscConfig+0x298>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1f0      	bne.n	8002696 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0308 	and.w	r3, r3, #8
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d030      	beq.n	8002722 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d016      	beq.n	80026f6 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026c8:	4b34      	ldr	r3, [pc, #208]	@ (800279c <HAL_RCC_OscConfig+0x2a4>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ce:	f7fe f9e7 	bl	8000aa0 <HAL_GetTick>
 80026d2:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026d6:	f7fe f9e3 	bl	8000aa0 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e14c      	b.n	8002982 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026e8:	4b29      	ldr	r3, [pc, #164]	@ (8002790 <HAL_RCC_OscConfig+0x298>)
 80026ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0f0      	beq.n	80026d6 <HAL_RCC_OscConfig+0x1de>
 80026f4:	e015      	b.n	8002722 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026f6:	4b29      	ldr	r3, [pc, #164]	@ (800279c <HAL_RCC_OscConfig+0x2a4>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026fc:	f7fe f9d0 	bl	8000aa0 <HAL_GetTick>
 8002700:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002704:	f7fe f9cc 	bl	8000aa0 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	6a3b      	ldr	r3, [r7, #32]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e135      	b.n	8002982 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002716:	4b1e      	ldr	r3, [pc, #120]	@ (8002790 <HAL_RCC_OscConfig+0x298>)
 8002718:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1f0      	bne.n	8002704 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0304 	and.w	r3, r3, #4
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 8087 	beq.w	800283e <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002730:	2300      	movs	r3, #0
 8002732:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002736:	4b16      	ldr	r3, [pc, #88]	@ (8002790 <HAL_RCC_OscConfig+0x298>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d110      	bne.n	8002764 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	4b12      	ldr	r3, [pc, #72]	@ (8002790 <HAL_RCC_OscConfig+0x298>)
 8002748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274a:	4a11      	ldr	r2, [pc, #68]	@ (8002790 <HAL_RCC_OscConfig+0x298>)
 800274c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002750:	6413      	str	r3, [r2, #64]	@ 0x40
 8002752:	4b0f      	ldr	r3, [pc, #60]	@ (8002790 <HAL_RCC_OscConfig+0x298>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800275e:	2301      	movs	r3, #1
 8002760:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002764:	4b0e      	ldr	r3, [pc, #56]	@ (80027a0 <HAL_RCC_OscConfig+0x2a8>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a0d      	ldr	r2, [pc, #52]	@ (80027a0 <HAL_RCC_OscConfig+0x2a8>)
 800276a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800276e:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002770:	4b0b      	ldr	r3, [pc, #44]	@ (80027a0 <HAL_RCC_OscConfig+0x2a8>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002778:	2b00      	cmp	r3, #0
 800277a:	d122      	bne.n	80027c2 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800277c:	4b08      	ldr	r3, [pc, #32]	@ (80027a0 <HAL_RCC_OscConfig+0x2a8>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a07      	ldr	r2, [pc, #28]	@ (80027a0 <HAL_RCC_OscConfig+0x2a8>)
 8002782:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002786:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002788:	f7fe f98a 	bl	8000aa0 <HAL_GetTick>
 800278c:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278e:	e012      	b.n	80027b6 <HAL_RCC_OscConfig+0x2be>
 8002790:	40023800 	.word	0x40023800
 8002794:	40023802 	.word	0x40023802
 8002798:	42470000 	.word	0x42470000
 800279c:	42470e80 	.word	0x42470e80
 80027a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027a4:	f7fe f97c 	bl	8000aa0 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e0e5      	b.n	8002982 <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b6:	4b75      	ldr	r3, [pc, #468]	@ (800298c <HAL_RCC_OscConfig+0x494>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0f0      	beq.n	80027a4 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	4b72      	ldr	r3, [pc, #456]	@ (8002990 <HAL_RCC_OscConfig+0x498>)
 80027c8:	b2d2      	uxtb	r2, r2
 80027ca:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d015      	beq.n	8002800 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d4:	f7fe f964 	bl	8000aa0 <HAL_GetTick>
 80027d8:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027da:	e00a      	b.n	80027f2 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027dc:	f7fe f960 	bl	8000aa0 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e0c7      	b.n	8002982 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f2:	4b68      	ldr	r3, [pc, #416]	@ (8002994 <HAL_RCC_OscConfig+0x49c>)
 80027f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0ee      	beq.n	80027dc <HAL_RCC_OscConfig+0x2e4>
 80027fe:	e014      	b.n	800282a <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002800:	f7fe f94e 	bl	8000aa0 <HAL_GetTick>
 8002804:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002806:	e00a      	b.n	800281e <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002808:	f7fe f94a 	bl	8000aa0 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e0b1      	b.n	8002982 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800281e:	4b5d      	ldr	r3, [pc, #372]	@ (8002994 <HAL_RCC_OscConfig+0x49c>)
 8002820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1ee      	bne.n	8002808 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800282a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800282e:	2b01      	cmp	r3, #1
 8002830:	d105      	bne.n	800283e <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002832:	4b58      	ldr	r3, [pc, #352]	@ (8002994 <HAL_RCC_OscConfig+0x49c>)
 8002834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002836:	4a57      	ldr	r2, [pc, #348]	@ (8002994 <HAL_RCC_OscConfig+0x49c>)
 8002838:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800283c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 809c 	beq.w	8002980 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002848:	4b52      	ldr	r3, [pc, #328]	@ (8002994 <HAL_RCC_OscConfig+0x49c>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 030c 	and.w	r3, r3, #12
 8002850:	2b08      	cmp	r3, #8
 8002852:	d061      	beq.n	8002918 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	2b02      	cmp	r3, #2
 800285a:	d146      	bne.n	80028ea <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285c:	4b4e      	ldr	r3, [pc, #312]	@ (8002998 <HAL_RCC_OscConfig+0x4a0>)
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002862:	f7fe f91d 	bl	8000aa0 <HAL_GetTick>
 8002866:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800286a:	f7fe f919 	bl	8000aa0 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	6a3b      	ldr	r3, [r7, #32]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b64      	cmp	r3, #100	@ 0x64
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e082      	b.n	8002982 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287c:	4b45      	ldr	r3, [pc, #276]	@ (8002994 <HAL_RCC_OscConfig+0x49c>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1f0      	bne.n	800286a <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002888:	4b42      	ldr	r3, [pc, #264]	@ (8002994 <HAL_RCC_OscConfig+0x49c>)
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	4b43      	ldr	r3, [pc, #268]	@ (800299c <HAL_RCC_OscConfig+0x4a4>)
 800288e:	4013      	ands	r3, r2
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	69d1      	ldr	r1, [r2, #28]
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6a12      	ldr	r2, [r2, #32]
 8002898:	4311      	orrs	r1, r2
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800289e:	0192      	lsls	r2, r2, #6
 80028a0:	4311      	orrs	r1, r2
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80028a6:	0612      	lsls	r2, r2, #24
 80028a8:	4311      	orrs	r1, r2
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80028ae:	0852      	lsrs	r2, r2, #1
 80028b0:	3a01      	subs	r2, #1
 80028b2:	0412      	lsls	r2, r2, #16
 80028b4:	430a      	orrs	r2, r1
 80028b6:	4937      	ldr	r1, [pc, #220]	@ (8002994 <HAL_RCC_OscConfig+0x49c>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028bc:	4b36      	ldr	r3, [pc, #216]	@ (8002998 <HAL_RCC_OscConfig+0x4a0>)
 80028be:	2201      	movs	r2, #1
 80028c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c2:	f7fe f8ed 	bl	8000aa0 <HAL_GetTick>
 80028c6:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ca:	f7fe f8e9 	bl	8000aa0 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	6a3b      	ldr	r3, [r7, #32]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b64      	cmp	r3, #100	@ 0x64
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e052      	b.n	8002982 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002994 <HAL_RCC_OscConfig+0x49c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0f0      	beq.n	80028ca <HAL_RCC_OscConfig+0x3d2>
 80028e8:	e04a      	b.n	8002980 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002998 <HAL_RCC_OscConfig+0x4a0>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f0:	f7fe f8d6 	bl	8000aa0 <HAL_GetTick>
 80028f4:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028f8:	f7fe f8d2 	bl	8000aa0 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b64      	cmp	r3, #100	@ 0x64
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e03b      	b.n	8002982 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290a:	4b22      	ldr	r3, [pc, #136]	@ (8002994 <HAL_RCC_OscConfig+0x49c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1f0      	bne.n	80028f8 <HAL_RCC_OscConfig+0x400>
 8002916:	e033      	b.n	8002980 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d101      	bne.n	8002924 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e02e      	b.n	8002982 <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8002924:	4b1b      	ldr	r3, [pc, #108]	@ (8002994 <HAL_RCC_OscConfig+0x49c>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	429a      	cmp	r2, r3
 8002936:	d121      	bne.n	800297c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002942:	429a      	cmp	r2, r3
 8002944:	d11a      	bne.n	800297c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002946:	69fa      	ldr	r2, [r7, #28]
 8002948:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800294c:	4013      	ands	r3, r2
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002952:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002954:	4293      	cmp	r3, r2
 8002956:	d111      	bne.n	800297c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002962:	085b      	lsrs	r3, r3, #1
 8002964:	3b01      	subs	r3, #1
 8002966:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002968:	429a      	cmp	r2, r3
 800296a:	d107      	bne.n	800297c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002976:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002978:	429a      	cmp	r2, r3
 800297a:	d001      	beq.n	8002980 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e000      	b.n	8002982 <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3728      	adds	r7, #40	@ 0x28
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40007000 	.word	0x40007000
 8002990:	40023870 	.word	0x40023870
 8002994:	40023800 	.word	0x40023800
 8002998:	42470060 	.word	0x42470060
 800299c:	f0bc8000 	.word	0xf0bc8000

080029a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e0d2      	b.n	8002b5a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029b4:	4b6b      	ldr	r3, [pc, #428]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 030f 	and.w	r3, r3, #15
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d90c      	bls.n	80029dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c2:	4b68      	ldr	r3, [pc, #416]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ca:	4b66      	ldr	r3, [pc, #408]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d001      	beq.n	80029dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e0be      	b.n	8002b5a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d020      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029f4:	4b5c      	ldr	r3, [pc, #368]	@ (8002b68 <HAL_RCC_ClockConfig+0x1c8>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	4a5b      	ldr	r2, [pc, #364]	@ (8002b68 <HAL_RCC_ClockConfig+0x1c8>)
 80029fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0308 	and.w	r3, r3, #8
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8002a0c:	4b56      	ldr	r3, [pc, #344]	@ (8002b68 <HAL_RCC_ClockConfig+0x1c8>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	4a55      	ldr	r2, [pc, #340]	@ (8002b68 <HAL_RCC_ClockConfig+0x1c8>)
 8002a12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a16:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a18:	4b53      	ldr	r3, [pc, #332]	@ (8002b68 <HAL_RCC_ClockConfig+0x1c8>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	4950      	ldr	r1, [pc, #320]	@ (8002b68 <HAL_RCC_ClockConfig+0x1c8>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d040      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d107      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3e:	4b4a      	ldr	r3, [pc, #296]	@ (8002b68 <HAL_RCC_ClockConfig+0x1c8>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d115      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e085      	b.n	8002b5a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d107      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a56:	4b44      	ldr	r3, [pc, #272]	@ (8002b68 <HAL_RCC_ClockConfig+0x1c8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d109      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e079      	b.n	8002b5a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a66:	4b40      	ldr	r3, [pc, #256]	@ (8002b68 <HAL_RCC_ClockConfig+0x1c8>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e071      	b.n	8002b5a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a76:	4b3c      	ldr	r3, [pc, #240]	@ (8002b68 <HAL_RCC_ClockConfig+0x1c8>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f023 0203 	bic.w	r2, r3, #3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	4939      	ldr	r1, [pc, #228]	@ (8002b68 <HAL_RCC_ClockConfig+0x1c8>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a88:	f7fe f80a 	bl	8000aa0 <HAL_GetTick>
 8002a8c:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8e:	e00a      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a90:	f7fe f806 	bl	8000aa0 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e059      	b.n	8002b5a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa6:	4b30      	ldr	r3, [pc, #192]	@ (8002b68 <HAL_RCC_ClockConfig+0x1c8>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 020c 	and.w	r2, r3, #12
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d1eb      	bne.n	8002a90 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab8:	4b2a      	ldr	r3, [pc, #168]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 030f 	and.w	r3, r3, #15
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d20c      	bcs.n	8002ae0 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac6:	4b27      	ldr	r3, [pc, #156]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ace:	4b25      	ldr	r3, [pc, #148]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d001      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e03c      	b.n	8002b5a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d008      	beq.n	8002afe <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aec:	4b1e      	ldr	r3, [pc, #120]	@ (8002b68 <HAL_RCC_ClockConfig+0x1c8>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	491b      	ldr	r1, [pc, #108]	@ (8002b68 <HAL_RCC_ClockConfig+0x1c8>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0308 	and.w	r3, r3, #8
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d009      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b0a:	4b17      	ldr	r3, [pc, #92]	@ (8002b68 <HAL_RCC_ClockConfig+0x1c8>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4913      	ldr	r1, [pc, #76]	@ (8002b68 <HAL_RCC_ClockConfig+0x1c8>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002b1e:	f000 f82b 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 8002b22:	4601      	mov	r1, r0
 8002b24:	4b10      	ldr	r3, [pc, #64]	@ (8002b68 <HAL_RCC_ClockConfig+0x1c8>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b2c:	22f0      	movs	r2, #240	@ 0xf0
 8002b2e:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	fa92 f2a2 	rbit	r2, r2
 8002b36:	613a      	str	r2, [r7, #16]
  return result;
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	fab2 f282 	clz	r2, r2
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	40d3      	lsrs	r3, r2
 8002b42:	4a0a      	ldr	r2, [pc, #40]	@ (8002b6c <HAL_RCC_ClockConfig+0x1cc>)
 8002b44:	5cd3      	ldrb	r3, [r2, r3]
 8002b46:	fa21 f303 	lsr.w	r3, r1, r3
 8002b4a:	4a09      	ldr	r2, [pc, #36]	@ (8002b70 <HAL_RCC_ClockConfig+0x1d0>)
 8002b4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b4e:	4b09      	ldr	r3, [pc, #36]	@ (8002b74 <HAL_RCC_ClockConfig+0x1d4>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fd ff62 	bl	8000a1c <HAL_InitTick>

  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3718      	adds	r7, #24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40023c00 	.word	0x40023c00
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	0800764c 	.word	0x0800764c
 8002b70:	20000000 	.word	0x20000000
 8002b74:	20000004 	.word	0x20000004

08002b78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b7c:	b090      	sub	sp, #64	@ 0x40
 8002b7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b84:	2300      	movs	r3, #0
 8002b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b88:	2300      	movs	r3, #0
 8002b8a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b90:	4b59      	ldr	r3, [pc, #356]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f003 030c 	and.w	r3, r3, #12
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d00d      	beq.n	8002bb8 <HAL_RCC_GetSysClockFreq+0x40>
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	f200 80a2 	bhi.w	8002ce6 <HAL_RCC_GetSysClockFreq+0x16e>
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d002      	beq.n	8002bac <HAL_RCC_GetSysClockFreq+0x34>
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d003      	beq.n	8002bb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002baa:	e09c      	b.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bac:	4b53      	ldr	r3, [pc, #332]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0x184>)
 8002bae:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002bb0:	e09c      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bb2:	4b53      	ldr	r3, [pc, #332]	@ (8002d00 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bb4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002bb6:	e099      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bb8:	4b4f      	ldr	r3, [pc, #316]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bc0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bc2:	4b4d      	ldr	r3, [pc, #308]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d027      	beq.n	8002c1e <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bce:	4b4a      	ldr	r3, [pc, #296]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	099b      	lsrs	r3, r3, #6
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	623b      	str	r3, [r7, #32]
 8002bd8:	627a      	str	r2, [r7, #36]	@ 0x24
 8002bda:	6a3b      	ldr	r3, [r7, #32]
 8002bdc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002be0:	2100      	movs	r1, #0
 8002be2:	4b47      	ldr	r3, [pc, #284]	@ (8002d00 <HAL_RCC_GetSysClockFreq+0x188>)
 8002be4:	fb03 f201 	mul.w	r2, r3, r1
 8002be8:	2300      	movs	r3, #0
 8002bea:	fb00 f303 	mul.w	r3, r0, r3
 8002bee:	4413      	add	r3, r2
 8002bf0:	4a43      	ldr	r2, [pc, #268]	@ (8002d00 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bf2:	fba0 2102 	umull	r2, r1, r0, r2
 8002bf6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8002bf8:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002bfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bfc:	4413      	add	r3, r2
 8002bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c02:	2200      	movs	r2, #0
 8002c04:	61bb      	str	r3, [r7, #24]
 8002c06:	61fa      	str	r2, [r7, #28]
 8002c08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c0c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002c10:	f7fd fad8 	bl	80001c4 <__aeabi_uldivmod>
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	4613      	mov	r3, r2
 8002c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c1c:	e055      	b.n	8002cca <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c1e:	4b36      	ldr	r3, [pc, #216]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	099b      	lsrs	r3, r3, #6
 8002c24:	2200      	movs	r2, #0
 8002c26:	613b      	str	r3, [r7, #16]
 8002c28:	617a      	str	r2, [r7, #20]
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c30:	f04f 0b00 	mov.w	fp, #0
 8002c34:	4652      	mov	r2, sl
 8002c36:	465b      	mov	r3, fp
 8002c38:	f04f 0000 	mov.w	r0, #0
 8002c3c:	f04f 0100 	mov.w	r1, #0
 8002c40:	0159      	lsls	r1, r3, #5
 8002c42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c46:	0150      	lsls	r0, r2, #5
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	ebb2 080a 	subs.w	r8, r2, sl
 8002c50:	eb63 090b 	sbc.w	r9, r3, fp
 8002c54:	f04f 0200 	mov.w	r2, #0
 8002c58:	f04f 0300 	mov.w	r3, #0
 8002c5c:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c60:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c64:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c68:	ebb2 0408 	subs.w	r4, r2, r8
 8002c6c:	eb63 0509 	sbc.w	r5, r3, r9
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	f04f 0300 	mov.w	r3, #0
 8002c78:	00eb      	lsls	r3, r5, #3
 8002c7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c7e:	00e2      	lsls	r2, r4, #3
 8002c80:	4614      	mov	r4, r2
 8002c82:	461d      	mov	r5, r3
 8002c84:	eb14 030a 	adds.w	r3, r4, sl
 8002c88:	603b      	str	r3, [r7, #0]
 8002c8a:	eb45 030b 	adc.w	r3, r5, fp
 8002c8e:	607b      	str	r3, [r7, #4]
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	f04f 0300 	mov.w	r3, #0
 8002c98:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c9c:	4629      	mov	r1, r5
 8002c9e:	028b      	lsls	r3, r1, #10
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	4629      	mov	r1, r5
 8002ca4:	4604      	mov	r4, r0
 8002ca6:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002caa:	4601      	mov	r1, r0
 8002cac:	028a      	lsls	r2, r1, #10
 8002cae:	4610      	mov	r0, r2
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	60bb      	str	r3, [r7, #8]
 8002cb8:	60fa      	str	r2, [r7, #12]
 8002cba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cbe:	f7fd fa81 	bl	80001c4 <__aeabi_uldivmod>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cca:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	0c1b      	lsrs	r3, r3, #16
 8002cd0:	f003 0303 	and.w	r3, r3, #3
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002cda:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ce4:	e002      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ce6:	4b05      	ldr	r3, [pc, #20]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0x184>)
 8002ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002cea:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3740      	adds	r7, #64	@ 0x40
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	00f42400 	.word	0x00f42400
 8002d00:	017d7840 	.word	0x017d7840

08002d04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d08:	4b02      	ldr	r3, [pc, #8]	@ (8002d14 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr
 8002d14:	20000000 	.word	0x20000000

08002d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8002d1e:	f7ff fff1 	bl	8002d04 <HAL_RCC_GetHCLKFreq>
 8002d22:	4601      	mov	r1, r0
 8002d24:	4b0b      	ldr	r3, [pc, #44]	@ (8002d54 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8002d2c:	f44f 52e0 	mov.w	r2, #7168	@ 0x1c00
 8002d30:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	fa92 f2a2 	rbit	r2, r2
 8002d38:	603a      	str	r2, [r7, #0]
  return result;
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	fab2 f282 	clz	r2, r2
 8002d40:	b2d2      	uxtb	r2, r2
 8002d42:	40d3      	lsrs	r3, r2
 8002d44:	4a04      	ldr	r2, [pc, #16]	@ (8002d58 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002d46:	5cd3      	ldrb	r3, [r2, r3]
 8002d48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40023800 	.word	0x40023800
 8002d58:	0800765c 	.word	0x0800765c

08002d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8002d62:	f7ff ffcf 	bl	8002d04 <HAL_RCC_GetHCLKFreq>
 8002d66:	4601      	mov	r1, r0
 8002d68:	4b0b      	ldr	r3, [pc, #44]	@ (8002d98 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8002d70:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8002d74:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	fa92 f2a2 	rbit	r2, r2
 8002d7c:	603a      	str	r2, [r7, #0]
  return result;
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	fab2 f282 	clz	r2, r2
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	40d3      	lsrs	r3, r2
 8002d88:	4a04      	ldr	r2, [pc, #16]	@ (8002d9c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002d8a:	5cd3      	ldrb	r3, [r2, r3]
 8002d8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	0800765c 	.word	0x0800765c

08002da0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002da0:	b084      	sub	sp, #16
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b084      	sub	sp, #16
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
 8002daa:	f107 001c 	add.w	r0, r7, #28
 8002dae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002db2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d123      	bne.n	8002e02 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dbe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002dce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002de2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d105      	bne.n	8002df6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f001 fac0 	bl	800437c <USB_CoreReset>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	73fb      	strb	r3, [r7, #15]
 8002e00:	e010      	b.n	8002e24 <USB_CoreInit+0x84>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f001 fab4 	bl	800437c <USB_CoreReset>
 8002e14:	4603      	mov	r3, r0
 8002e16:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e1c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8002e24:	7fbb      	ldrb	r3, [r7, #30]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d10b      	bne.n	8002e42 <USB_CoreInit+0xa2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f043 0206 	orr.w	r2, r3, #6
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f043 0220 	orr.w	r2, r3, #32
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e4e:	b004      	add	sp, #16
 8002e50:	4770      	bx	lr
	...

08002e54 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b087      	sub	sp, #28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002e62:	79fb      	ldrb	r3, [r7, #7]
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d165      	bne.n	8002f34 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	4a41      	ldr	r2, [pc, #260]	@ (8002f70 <USB_SetTurnaroundTime+0x11c>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d906      	bls.n	8002e7e <USB_SetTurnaroundTime+0x2a>
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	4a40      	ldr	r2, [pc, #256]	@ (8002f74 <USB_SetTurnaroundTime+0x120>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d202      	bcs.n	8002e7e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002e78:	230f      	movs	r3, #15
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	e062      	b.n	8002f44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	4a3c      	ldr	r2, [pc, #240]	@ (8002f74 <USB_SetTurnaroundTime+0x120>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d306      	bcc.n	8002e94 <USB_SetTurnaroundTime+0x40>
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	4a3b      	ldr	r2, [pc, #236]	@ (8002f78 <USB_SetTurnaroundTime+0x124>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d202      	bcs.n	8002e94 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002e8e:	230e      	movs	r3, #14
 8002e90:	617b      	str	r3, [r7, #20]
 8002e92:	e057      	b.n	8002f44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	4a38      	ldr	r2, [pc, #224]	@ (8002f78 <USB_SetTurnaroundTime+0x124>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d306      	bcc.n	8002eaa <USB_SetTurnaroundTime+0x56>
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	4a37      	ldr	r2, [pc, #220]	@ (8002f7c <USB_SetTurnaroundTime+0x128>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d202      	bcs.n	8002eaa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002ea4:	230d      	movs	r3, #13
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	e04c      	b.n	8002f44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	4a33      	ldr	r2, [pc, #204]	@ (8002f7c <USB_SetTurnaroundTime+0x128>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d306      	bcc.n	8002ec0 <USB_SetTurnaroundTime+0x6c>
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	4a32      	ldr	r2, [pc, #200]	@ (8002f80 <USB_SetTurnaroundTime+0x12c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d802      	bhi.n	8002ec0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002eba:	230c      	movs	r3, #12
 8002ebc:	617b      	str	r3, [r7, #20]
 8002ebe:	e041      	b.n	8002f44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	4a2f      	ldr	r2, [pc, #188]	@ (8002f80 <USB_SetTurnaroundTime+0x12c>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d906      	bls.n	8002ed6 <USB_SetTurnaroundTime+0x82>
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	4a2e      	ldr	r2, [pc, #184]	@ (8002f84 <USB_SetTurnaroundTime+0x130>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d802      	bhi.n	8002ed6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002ed0:	230b      	movs	r3, #11
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	e036      	b.n	8002f44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	4a2a      	ldr	r2, [pc, #168]	@ (8002f84 <USB_SetTurnaroundTime+0x130>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d906      	bls.n	8002eec <USB_SetTurnaroundTime+0x98>
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	4a29      	ldr	r2, [pc, #164]	@ (8002f88 <USB_SetTurnaroundTime+0x134>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d802      	bhi.n	8002eec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002ee6:	230a      	movs	r3, #10
 8002ee8:	617b      	str	r3, [r7, #20]
 8002eea:	e02b      	b.n	8002f44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	4a26      	ldr	r2, [pc, #152]	@ (8002f88 <USB_SetTurnaroundTime+0x134>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d906      	bls.n	8002f02 <USB_SetTurnaroundTime+0xae>
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	4a25      	ldr	r2, [pc, #148]	@ (8002f8c <USB_SetTurnaroundTime+0x138>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d202      	bcs.n	8002f02 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002efc:	2309      	movs	r3, #9
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	e020      	b.n	8002f44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	4a21      	ldr	r2, [pc, #132]	@ (8002f8c <USB_SetTurnaroundTime+0x138>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d306      	bcc.n	8002f18 <USB_SetTurnaroundTime+0xc4>
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	4a20      	ldr	r2, [pc, #128]	@ (8002f90 <USB_SetTurnaroundTime+0x13c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d802      	bhi.n	8002f18 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002f12:	2308      	movs	r3, #8
 8002f14:	617b      	str	r3, [r7, #20]
 8002f16:	e015      	b.n	8002f44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	4a1d      	ldr	r2, [pc, #116]	@ (8002f90 <USB_SetTurnaroundTime+0x13c>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d906      	bls.n	8002f2e <USB_SetTurnaroundTime+0xda>
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	4a1c      	ldr	r2, [pc, #112]	@ (8002f94 <USB_SetTurnaroundTime+0x140>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d202      	bcs.n	8002f2e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002f28:	2307      	movs	r3, #7
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	e00a      	b.n	8002f44 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002f2e:	2306      	movs	r3, #6
 8002f30:	617b      	str	r3, [r7, #20]
 8002f32:	e007      	b.n	8002f44 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002f34:	79fb      	ldrb	r3, [r7, #7]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d102      	bne.n	8002f40 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002f3a:	2309      	movs	r3, #9
 8002f3c:	617b      	str	r3, [r7, #20]
 8002f3e:	e001      	b.n	8002f44 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002f40:	2309      	movs	r3, #9
 8002f42:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	68da      	ldr	r2, [r3, #12]
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	029b      	lsls	r3, r3, #10
 8002f58:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	371c      	adds	r7, #28
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bc80      	pop	{r7}
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	00d8acbf 	.word	0x00d8acbf
 8002f74:	00e4e1c0 	.word	0x00e4e1c0
 8002f78:	00f42400 	.word	0x00f42400
 8002f7c:	01067380 	.word	0x01067380
 8002f80:	011a499f 	.word	0x011a499f
 8002f84:	01312cff 	.word	0x01312cff
 8002f88:	014ca43f 	.word	0x014ca43f
 8002f8c:	016e3600 	.word	0x016e3600
 8002f90:	01a6ab1f 	.word	0x01a6ab1f
 8002f94:	01e84800 	.word	0x01e84800

08002f98 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f043 0201 	orr.w	r2, r3, #1
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr

08002fb8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f023 0201 	bic.w	r2, r3, #1
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr

08002fd8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002ff4:	78fb      	ldrb	r3, [r7, #3]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d115      	bne.n	8003026 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003006:	200a      	movs	r0, #10
 8003008:	f7fd fd54 	bl	8000ab4 <HAL_Delay>
      ms += 10U;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	330a      	adds	r3, #10
 8003010:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f001 f926 	bl	8004264 <USB_GetMode>
 8003018:	4603      	mov	r3, r0
 800301a:	2b01      	cmp	r3, #1
 800301c:	d01e      	beq.n	800305c <USB_SetCurrentMode+0x84>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2bc7      	cmp	r3, #199	@ 0xc7
 8003022:	d9f0      	bls.n	8003006 <USB_SetCurrentMode+0x2e>
 8003024:	e01a      	b.n	800305c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003026:	78fb      	ldrb	r3, [r7, #3]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d115      	bne.n	8003058 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003038:	200a      	movs	r0, #10
 800303a:	f7fd fd3b 	bl	8000ab4 <HAL_Delay>
      ms += 10U;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	330a      	adds	r3, #10
 8003042:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f001 f90d 	bl	8004264 <USB_GetMode>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d005      	beq.n	800305c <USB_SetCurrentMode+0x84>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2bc7      	cmp	r3, #199	@ 0xc7
 8003054:	d9f0      	bls.n	8003038 <USB_SetCurrentMode+0x60>
 8003056:	e001      	b.n	800305c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e005      	b.n	8003068 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2bc8      	cmp	r3, #200	@ 0xc8
 8003060:	d101      	bne.n	8003066 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e000      	b.n	8003068 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003070:	b084      	sub	sp, #16
 8003072:	b580      	push	{r7, lr}
 8003074:	b086      	sub	sp, #24
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800307e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003082:	2300      	movs	r3, #0
 8003084:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800308a:	2300      	movs	r3, #0
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	e009      	b.n	80030a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	3340      	adds	r3, #64	@ 0x40
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	2200      	movs	r2, #0
 800309c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	3301      	adds	r3, #1
 80030a2:	613b      	str	r3, [r7, #16]
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	2b0e      	cmp	r3, #14
 80030a8:	d9f2      	bls.n	8003090 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80030aa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d11c      	bne.n	80030ec <USB_DevInit+0x7c>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030c0:	f043 0302 	orr.w	r3, r3, #2
 80030c4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ca:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030e2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80030ea:	e00b      	b.n	8003104 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030fc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800310a:	461a      	mov	r2, r3
 800310c:	2300      	movs	r3, #0
 800310e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003110:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003114:	2b01      	cmp	r3, #1
 8003116:	d10d      	bne.n	8003134 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003118:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800311c:	2b00      	cmp	r3, #0
 800311e:	d104      	bne.n	800312a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003120:	2100      	movs	r1, #0
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f966 	bl	80033f4 <USB_SetDevSpeed>
 8003128:	e008      	b.n	800313c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800312a:	2101      	movs	r1, #1
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 f961 	bl	80033f4 <USB_SetDevSpeed>
 8003132:	e003      	b.n	800313c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003134:	2103      	movs	r1, #3
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f95c 	bl	80033f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800313c:	2110      	movs	r1, #16
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f8fa 	bl	8003338 <USB_FlushTxFifo>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f923 	bl	800339a <USB_FlushRxFifo>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003164:	461a      	mov	r2, r3
 8003166:	2300      	movs	r3, #0
 8003168:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003170:	461a      	mov	r2, r3
 8003172:	2300      	movs	r3, #0
 8003174:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800317c:	461a      	mov	r2, r3
 800317e:	2300      	movs	r3, #0
 8003180:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003182:	2300      	movs	r3, #0
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	e043      	b.n	8003210 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	015a      	lsls	r2, r3, #5
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4413      	add	r3, r2
 8003190:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800319a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800319e:	d118      	bne.n	80031d2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10a      	bne.n	80031bc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	015a      	lsls	r2, r3, #5
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4413      	add	r3, r2
 80031ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031b2:	461a      	mov	r2, r3
 80031b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	e013      	b.n	80031e4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031c8:	461a      	mov	r2, r3
 80031ca:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	e008      	b.n	80031e4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	015a      	lsls	r2, r3, #5
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	4413      	add	r3, r2
 80031da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031de:	461a      	mov	r2, r3
 80031e0:	2300      	movs	r3, #0
 80031e2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	015a      	lsls	r2, r3, #5
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031f0:	461a      	mov	r2, r3
 80031f2:	2300      	movs	r3, #0
 80031f4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	015a      	lsls	r2, r3, #5
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	4413      	add	r3, r2
 80031fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003202:	461a      	mov	r2, r3
 8003204:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003208:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	3301      	adds	r3, #1
 800320e:	613b      	str	r3, [r7, #16]
 8003210:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003214:	461a      	mov	r2, r3
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	4293      	cmp	r3, r2
 800321a:	d3b5      	bcc.n	8003188 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800321c:	2300      	movs	r3, #0
 800321e:	613b      	str	r3, [r7, #16]
 8003220:	e043      	b.n	80032aa <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	015a      	lsls	r2, r3, #5
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	4413      	add	r3, r2
 800322a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003234:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003238:	d118      	bne.n	800326c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10a      	bne.n	8003256 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	015a      	lsls	r2, r3, #5
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4413      	add	r3, r2
 8003248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800324c:	461a      	mov	r2, r3
 800324e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003252:	6013      	str	r3, [r2, #0]
 8003254:	e013      	b.n	800327e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	015a      	lsls	r2, r3, #5
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4413      	add	r3, r2
 800325e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003262:	461a      	mov	r2, r3
 8003264:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	e008      	b.n	800327e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	015a      	lsls	r2, r3, #5
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4413      	add	r3, r2
 8003274:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003278:	461a      	mov	r2, r3
 800327a:	2300      	movs	r3, #0
 800327c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	015a      	lsls	r2, r3, #5
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4413      	add	r3, r2
 8003286:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800328a:	461a      	mov	r2, r3
 800328c:	2300      	movs	r3, #0
 800328e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	015a      	lsls	r2, r3, #5
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4413      	add	r3, r2
 8003298:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800329c:	461a      	mov	r2, r3
 800329e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80032a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	3301      	adds	r3, #1
 80032a8:	613b      	str	r3, [r7, #16]
 80032aa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80032ae:	461a      	mov	r2, r3
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d3b5      	bcc.n	8003222 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80032c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032c8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80032d6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80032d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d105      	bne.n	80032ec <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	f043 0210 	orr.w	r2, r3, #16
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	699a      	ldr	r2, [r3, #24]
 80032f0:	4b10      	ldr	r3, [pc, #64]	@ (8003334 <USB_DevInit+0x2c4>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80032f8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d005      	beq.n	800330c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	f043 0208 	orr.w	r2, r3, #8
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800330c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003310:	2b01      	cmp	r3, #1
 8003312:	d107      	bne.n	8003324 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800331c:	f043 0304 	orr.w	r3, r3, #4
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003324:	7dfb      	ldrb	r3, [r7, #23]
}
 8003326:	4618      	mov	r0, r3
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003330:	b004      	add	sp, #16
 8003332:	4770      	bx	lr
 8003334:	803c3800 	.word	0x803c3800

08003338 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003342:	2300      	movs	r3, #0
 8003344:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	3301      	adds	r3, #1
 800334a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003352:	d901      	bls.n	8003358 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e01b      	b.n	8003390 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	2b00      	cmp	r3, #0
 800335e:	daf2      	bge.n	8003346 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	019b      	lsls	r3, r3, #6
 8003368:	f043 0220 	orr.w	r2, r3, #32
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	3301      	adds	r3, #1
 8003374:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800337c:	d901      	bls.n	8003382 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e006      	b.n	8003390 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	f003 0320 	and.w	r3, r3, #32
 800338a:	2b20      	cmp	r3, #32
 800338c:	d0f0      	beq.n	8003370 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3714      	adds	r7, #20
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr

0800339a <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800339a:	b480      	push	{r7}
 800339c:	b085      	sub	sp, #20
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	3301      	adds	r3, #1
 80033aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80033b2:	d901      	bls.n	80033b8 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e018      	b.n	80033ea <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	daf2      	bge.n	80033a6 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2210      	movs	r2, #16
 80033c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	3301      	adds	r3, #1
 80033ce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80033d6:	d901      	bls.n	80033dc <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e006      	b.n	80033ea <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	2b10      	cmp	r3, #16
 80033e6:	d0f0      	beq.n	80033ca <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bc80      	pop	{r7}
 80033f2:	4770      	bx	lr

080033f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	460b      	mov	r3, r1
 80033fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	78fb      	ldrb	r3, [r7, #3]
 800340e:	68f9      	ldr	r1, [r7, #12]
 8003410:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003414:	4313      	orrs	r3, r2
 8003416:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr

08003424 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003424:	b480      	push	{r7}
 8003426:	b087      	sub	sp, #28
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f003 0306 	and.w	r3, r3, #6
 800343c:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d102      	bne.n	800344a <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003444:	2300      	movs	r3, #0
 8003446:	75fb      	strb	r3, [r7, #23]
 8003448:	e00a      	b.n	8003460 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2b02      	cmp	r3, #2
 800344e:	d002      	beq.n	8003456 <USB_GetDevSpeed+0x32>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2b06      	cmp	r3, #6
 8003454:	d102      	bne.n	800345c <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003456:	2302      	movs	r3, #2
 8003458:	75fb      	strb	r3, [r7, #23]
 800345a:	e001      	b.n	8003460 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800345c:	230f      	movs	r3, #15
 800345e:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003460:	7dfb      	ldrb	r3, [r7, #23]
}
 8003462:	4618      	mov	r0, r3
 8003464:	371c      	adds	r7, #28
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr

0800346c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	785b      	ldrb	r3, [r3, #1]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d13a      	bne.n	80034fe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800348e:	69da      	ldr	r2, [r3, #28]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	f003 030f 	and.w	r3, r3, #15
 8003498:	2101      	movs	r1, #1
 800349a:	fa01 f303 	lsl.w	r3, r1, r3
 800349e:	b29b      	uxth	r3, r3
 80034a0:	68f9      	ldr	r1, [r7, #12]
 80034a2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80034a6:	4313      	orrs	r3, r2
 80034a8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	015a      	lsls	r2, r3, #5
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	4413      	add	r3, r2
 80034b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d155      	bne.n	800356c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	015a      	lsls	r2, r3, #5
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4413      	add	r3, r2
 80034c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	791b      	ldrb	r3, [r3, #4]
 80034da:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80034dc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	059b      	lsls	r3, r3, #22
 80034e2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80034e4:	4313      	orrs	r3, r2
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	0151      	lsls	r1, r2, #5
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	440a      	add	r2, r1
 80034ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80034f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034fa:	6013      	str	r3, [r2, #0]
 80034fc:	e036      	b.n	800356c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003504:	69da      	ldr	r2, [r3, #28]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	2101      	movs	r1, #1
 8003510:	fa01 f303 	lsl.w	r3, r1, r3
 8003514:	041b      	lsls	r3, r3, #16
 8003516:	68f9      	ldr	r1, [r7, #12]
 8003518:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800351c:	4313      	orrs	r3, r2
 800351e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	015a      	lsls	r2, r3, #5
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4413      	add	r3, r2
 8003528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d11a      	bne.n	800356c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	015a      	lsls	r2, r3, #5
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	4413      	add	r3, r2
 800353e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	791b      	ldrb	r3, [r3, #4]
 8003550:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003552:	430b      	orrs	r3, r1
 8003554:	4313      	orrs	r3, r2
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	0151      	lsls	r1, r2, #5
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	440a      	add	r2, r1
 800355e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003562:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003566:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800356a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr

08003578 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	785b      	ldrb	r3, [r3, #1]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d161      	bne.n	8003658 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	015a      	lsls	r2, r3, #5
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4413      	add	r3, r2
 800359c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80035a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80035aa:	d11f      	bne.n	80035ec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	015a      	lsls	r2, r3, #5
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	0151      	lsls	r1, r2, #5
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	440a      	add	r2, r1
 80035c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80035c6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80035ca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	0151      	lsls	r1, r2, #5
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	440a      	add	r2, r1
 80035e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80035e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80035ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	f003 030f 	and.w	r3, r3, #15
 80035fc:	2101      	movs	r1, #1
 80035fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003602:	b29b      	uxth	r3, r3
 8003604:	43db      	mvns	r3, r3
 8003606:	68f9      	ldr	r1, [r7, #12]
 8003608:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800360c:	4013      	ands	r3, r2
 800360e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003616:	69da      	ldr	r2, [r3, #28]
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	f003 030f 	and.w	r3, r3, #15
 8003620:	2101      	movs	r1, #1
 8003622:	fa01 f303 	lsl.w	r3, r1, r3
 8003626:	b29b      	uxth	r3, r3
 8003628:	43db      	mvns	r3, r3
 800362a:	68f9      	ldr	r1, [r7, #12]
 800362c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003630:	4013      	ands	r3, r2
 8003632:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	015a      	lsls	r2, r3, #5
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4413      	add	r3, r2
 800363c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	0159      	lsls	r1, r3, #5
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	440b      	add	r3, r1
 800364a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800364e:	4619      	mov	r1, r3
 8003650:	4b35      	ldr	r3, [pc, #212]	@ (8003728 <USB_DeactivateEndpoint+0x1b0>)
 8003652:	4013      	ands	r3, r2
 8003654:	600b      	str	r3, [r1, #0]
 8003656:	e060      	b.n	800371a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4413      	add	r3, r2
 8003660:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800366a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800366e:	d11f      	bne.n	80036b0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	015a      	lsls	r2, r3, #5
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4413      	add	r3, r2
 8003678:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	0151      	lsls	r1, r2, #5
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	440a      	add	r2, r1
 8003686:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800368a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800368e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	015a      	lsls	r2, r3, #5
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4413      	add	r3, r2
 8003698:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	0151      	lsls	r1, r2, #5
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	440a      	add	r2, r1
 80036a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80036aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80036ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	f003 030f 	and.w	r3, r3, #15
 80036c0:	2101      	movs	r1, #1
 80036c2:	fa01 f303 	lsl.w	r3, r1, r3
 80036c6:	041b      	lsls	r3, r3, #16
 80036c8:	43db      	mvns	r3, r3
 80036ca:	68f9      	ldr	r1, [r7, #12]
 80036cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80036d0:	4013      	ands	r3, r2
 80036d2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036da:	69da      	ldr	r2, [r3, #28]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	f003 030f 	and.w	r3, r3, #15
 80036e4:	2101      	movs	r1, #1
 80036e6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ea:	041b      	lsls	r3, r3, #16
 80036ec:	43db      	mvns	r3, r3
 80036ee:	68f9      	ldr	r1, [r7, #12]
 80036f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80036f4:	4013      	ands	r3, r2
 80036f6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	0159      	lsls	r1, r3, #5
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	440b      	add	r3, r1
 800370e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003712:	4619      	mov	r1, r3
 8003714:	4b05      	ldr	r3, [pc, #20]	@ (800372c <USB_DeactivateEndpoint+0x1b4>)
 8003716:	4013      	ands	r3, r2
 8003718:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	bc80      	pop	{r7}
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	ec337800 	.word	0xec337800
 800372c:	eff37800 	.word	0xeff37800

08003730 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b08a      	sub	sp, #40	@ 0x28
 8003734:	af02      	add	r7, sp, #8
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	4613      	mov	r3, r2
 800373c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	785b      	ldrb	r3, [r3, #1]
 800374c:	2b01      	cmp	r3, #1
 800374e:	f040 817a 	bne.w	8003a46 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d132      	bne.n	80037c0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	015a      	lsls	r2, r3, #5
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	4413      	add	r3, r2
 8003762:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	0151      	lsls	r1, r2, #5
 800376c:	69fa      	ldr	r2, [r7, #28]
 800376e:	440a      	add	r2, r1
 8003770:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003774:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003778:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800377c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	015a      	lsls	r2, r3, #5
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	4413      	add	r3, r2
 8003786:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	0151      	lsls	r1, r2, #5
 8003790:	69fa      	ldr	r2, [r7, #28]
 8003792:	440a      	add	r2, r1
 8003794:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003798:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800379c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	015a      	lsls	r2, r3, #5
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	4413      	add	r3, r2
 80037a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	0151      	lsls	r1, r2, #5
 80037b0:	69fa      	ldr	r2, [r7, #28]
 80037b2:	440a      	add	r2, r1
 80037b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037b8:	0cdb      	lsrs	r3, r3, #19
 80037ba:	04db      	lsls	r3, r3, #19
 80037bc:	6113      	str	r3, [r2, #16]
 80037be:	e092      	b.n	80038e6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	015a      	lsls	r2, r3, #5
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	4413      	add	r3, r2
 80037c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	0151      	lsls	r1, r2, #5
 80037d2:	69fa      	ldr	r2, [r7, #28]
 80037d4:	440a      	add	r2, r1
 80037d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037da:	0cdb      	lsrs	r3, r3, #19
 80037dc:	04db      	lsls	r3, r3, #19
 80037de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	015a      	lsls	r2, r3, #5
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	0151      	lsls	r1, r2, #5
 80037f2:	69fa      	ldr	r2, [r7, #28]
 80037f4:	440a      	add	r2, r1
 80037f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037fa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80037fe:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003802:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d11a      	bne.n	8003840 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	691a      	ldr	r2, [r3, #16]
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	429a      	cmp	r2, r3
 8003814:	d903      	bls.n	800381e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	4413      	add	r3, r2
 8003826:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	0151      	lsls	r1, r2, #5
 8003830:	69fa      	ldr	r2, [r7, #28]
 8003832:	440a      	add	r2, r1
 8003834:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003838:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800383c:	6113      	str	r3, [r2, #16]
 800383e:	e01b      	b.n	8003878 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	015a      	lsls	r2, r3, #5
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	4413      	add	r3, r2
 8003848:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800384c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	6919      	ldr	r1, [r3, #16]
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	440b      	add	r3, r1
 8003858:	1e59      	subs	r1, r3, #1
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003862:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003864:	4ba2      	ldr	r3, [pc, #648]	@ (8003af0 <USB_EPStartXfer+0x3c0>)
 8003866:	400b      	ands	r3, r1
 8003868:	69b9      	ldr	r1, [r7, #24]
 800386a:	0148      	lsls	r0, r1, #5
 800386c:	69f9      	ldr	r1, [r7, #28]
 800386e:	4401      	add	r1, r0
 8003870:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003874:	4313      	orrs	r3, r2
 8003876:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	015a      	lsls	r2, r3, #5
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	4413      	add	r3, r2
 8003880:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003884:	691a      	ldr	r2, [r3, #16]
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800388e:	69b9      	ldr	r1, [r7, #24]
 8003890:	0148      	lsls	r0, r1, #5
 8003892:	69f9      	ldr	r1, [r7, #28]
 8003894:	4401      	add	r1, r0
 8003896:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800389a:	4313      	orrs	r3, r2
 800389c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	791b      	ldrb	r3, [r3, #4]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d11f      	bne.n	80038e6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	015a      	lsls	r2, r3, #5
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	4413      	add	r3, r2
 80038ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	0151      	lsls	r1, r2, #5
 80038b8:	69fa      	ldr	r2, [r7, #28]
 80038ba:	440a      	add	r2, r1
 80038bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80038c0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80038c4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	015a      	lsls	r2, r3, #5
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	0151      	lsls	r1, r2, #5
 80038d8:	69fa      	ldr	r2, [r7, #28]
 80038da:	440a      	add	r2, r1
 80038dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80038e0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80038e4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80038e6:	79fb      	ldrb	r3, [r7, #7]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d14b      	bne.n	8003984 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	69db      	ldr	r3, [r3, #28]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d009      	beq.n	8003908 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	015a      	lsls	r2, r3, #5
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003900:	461a      	mov	r2, r3
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	791b      	ldrb	r3, [r3, #4]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d128      	bne.n	8003962 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800391c:	2b00      	cmp	r3, #0
 800391e:	d110      	bne.n	8003942 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	4413      	add	r3, r2
 8003928:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	0151      	lsls	r1, r2, #5
 8003932:	69fa      	ldr	r2, [r7, #28]
 8003934:	440a      	add	r2, r1
 8003936:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800393a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800393e:	6013      	str	r3, [r2, #0]
 8003940:	e00f      	b.n	8003962 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	015a      	lsls	r2, r3, #5
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	4413      	add	r3, r2
 800394a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	0151      	lsls	r1, r2, #5
 8003954:	69fa      	ldr	r2, [r7, #28]
 8003956:	440a      	add	r2, r1
 8003958:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800395c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003960:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	015a      	lsls	r2, r3, #5
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	4413      	add	r3, r2
 800396a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	0151      	lsls	r1, r2, #5
 8003974:	69fa      	ldr	r2, [r7, #28]
 8003976:	440a      	add	r2, r1
 8003978:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800397c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	e165      	b.n	8003c50 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	015a      	lsls	r2, r3, #5
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	4413      	add	r3, r2
 800398c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	0151      	lsls	r1, r2, #5
 8003996:	69fa      	ldr	r2, [r7, #28]
 8003998:	440a      	add	r2, r1
 800399a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800399e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80039a2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	791b      	ldrb	r3, [r3, #4]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d015      	beq.n	80039d8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 814d 	beq.w	8003c50 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	2101      	movs	r1, #1
 80039c8:	fa01 f303 	lsl.w	r3, r1, r3
 80039cc:	69f9      	ldr	r1, [r7, #28]
 80039ce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80039d2:	4313      	orrs	r3, r2
 80039d4:	634b      	str	r3, [r1, #52]	@ 0x34
 80039d6:	e13b      	b.n	8003c50 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d110      	bne.n	8003a0a <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	015a      	lsls	r2, r3, #5
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	4413      	add	r3, r2
 80039f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	0151      	lsls	r1, r2, #5
 80039fa:	69fa      	ldr	r2, [r7, #28]
 80039fc:	440a      	add	r2, r1
 80039fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a02:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003a06:	6013      	str	r3, [r2, #0]
 8003a08:	e00f      	b.n	8003a2a <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	015a      	lsls	r2, r3, #5
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	4413      	add	r3, r2
 8003a12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	0151      	lsls	r1, r2, #5
 8003a1c:	69fa      	ldr	r2, [r7, #28]
 8003a1e:	440a      	add	r2, r1
 8003a20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a28:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	68d9      	ldr	r1, [r3, #12]
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	781a      	ldrb	r2, [r3, #0]
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	b298      	uxth	r0, r3
 8003a38:	79fb      	ldrb	r3, [r7, #7]
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f000 f9b7 	bl	8003db2 <USB_WritePacket>
 8003a44:	e104      	b.n	8003c50 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	015a      	lsls	r2, r3, #5
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	0151      	lsls	r1, r2, #5
 8003a58:	69fa      	ldr	r2, [r7, #28]
 8003a5a:	440a      	add	r2, r1
 8003a5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a60:	0cdb      	lsrs	r3, r3, #19
 8003a62:	04db      	lsls	r3, r3, #19
 8003a64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	015a      	lsls	r2, r3, #5
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	0151      	lsls	r1, r2, #5
 8003a78:	69fa      	ldr	r2, [r7, #28]
 8003a7a:	440a      	add	r2, r1
 8003a7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a80:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003a84:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003a88:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d131      	bne.n	8003af4 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ab4:	691a      	ldr	r2, [r3, #16]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003abe:	69b9      	ldr	r1, [r7, #24]
 8003ac0:	0148      	lsls	r0, r1, #5
 8003ac2:	69f9      	ldr	r1, [r7, #28]
 8003ac4:	4401      	add	r1, r0
 8003ac6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003aca:	4313      	orrs	r3, r2
 8003acc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	0151      	lsls	r1, r2, #5
 8003ae0:	69fa      	ldr	r2, [r7, #28]
 8003ae2:	440a      	add	r2, r1
 8003ae4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ae8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003aec:	6113      	str	r3, [r2, #16]
 8003aee:	e061      	b.n	8003bb4 <USB_EPStartXfer+0x484>
 8003af0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d123      	bne.n	8003b44 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	015a      	lsls	r2, r3, #5
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	4413      	add	r3, r2
 8003b04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b08:	691a      	ldr	r2, [r3, #16]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b12:	69b9      	ldr	r1, [r7, #24]
 8003b14:	0148      	lsls	r0, r1, #5
 8003b16:	69f9      	ldr	r1, [r7, #28]
 8003b18:	4401      	add	r1, r0
 8003b1a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	015a      	lsls	r2, r3, #5
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	4413      	add	r3, r2
 8003b2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	0151      	lsls	r1, r2, #5
 8003b34:	69fa      	ldr	r2, [r7, #28]
 8003b36:	440a      	add	r2, r1
 8003b38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b3c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003b40:	6113      	str	r3, [r2, #16]
 8003b42:	e037      	b.n	8003bb4 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	691a      	ldr	r2, [r3, #16]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	1e5a      	subs	r2, r3, #1
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b58:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	8afa      	ldrh	r2, [r7, #22]
 8003b60:	fb03 f202 	mul.w	r2, r3, r2
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	015a      	lsls	r2, r3, #5
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	4413      	add	r3, r2
 8003b70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b74:	691a      	ldr	r2, [r3, #16]
 8003b76:	8afb      	ldrh	r3, [r7, #22]
 8003b78:	04d9      	lsls	r1, r3, #19
 8003b7a:	4b38      	ldr	r3, [pc, #224]	@ (8003c5c <USB_EPStartXfer+0x52c>)
 8003b7c:	400b      	ands	r3, r1
 8003b7e:	69b9      	ldr	r1, [r7, #24]
 8003b80:	0148      	lsls	r0, r1, #5
 8003b82:	69f9      	ldr	r1, [r7, #28]
 8003b84:	4401      	add	r1, r0
 8003b86:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	015a      	lsls	r2, r3, #5
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	4413      	add	r3, r2
 8003b96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ba4:	69b9      	ldr	r1, [r7, #24]
 8003ba6:	0148      	lsls	r0, r1, #5
 8003ba8:	69f9      	ldr	r1, [r7, #28]
 8003baa:	4401      	add	r1, r0
 8003bac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8003bb4:	79fb      	ldrb	r3, [r7, #7]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d10d      	bne.n	8003bd6 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d009      	beq.n	8003bd6 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	68d9      	ldr	r1, [r3, #12]
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	015a      	lsls	r2, r3, #5
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bd2:	460a      	mov	r2, r1
 8003bd4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	791b      	ldrb	r3, [r3, #4]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d128      	bne.n	8003c30 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d110      	bne.n	8003c10 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	015a      	lsls	r2, r3, #5
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	0151      	lsls	r1, r2, #5
 8003c00:	69fa      	ldr	r2, [r7, #28]
 8003c02:	440a      	add	r2, r1
 8003c04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	e00f      	b.n	8003c30 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	015a      	lsls	r2, r3, #5
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	4413      	add	r3, r2
 8003c18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	0151      	lsls	r1, r2, #5
 8003c22:	69fa      	ldr	r2, [r7, #28]
 8003c24:	440a      	add	r2, r1
 8003c26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c2e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	015a      	lsls	r2, r3, #5
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	4413      	add	r3, r2
 8003c38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	0151      	lsls	r1, r2, #5
 8003c42:	69fa      	ldr	r2, [r7, #28]
 8003c44:	440a      	add	r2, r1
 8003c46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c4a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003c4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3720      	adds	r7, #32
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	1ff80000 	.word	0x1ff80000

08003c60 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	785b      	ldrb	r3, [r3, #1]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d14a      	bne.n	8003d14 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c96:	f040 8086 	bne.w	8003da6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	015a      	lsls	r2, r3, #5
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	7812      	ldrb	r2, [r2, #0]
 8003cae:	0151      	lsls	r1, r2, #5
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	440a      	add	r2, r1
 8003cb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003cb8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003cbc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	015a      	lsls	r2, r3, #5
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	7812      	ldrb	r2, [r2, #0]
 8003cd2:	0151      	lsls	r1, r2, #5
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	440a      	add	r2, r1
 8003cd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003cdc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003ce0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d902      	bls.n	8003cf8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	75fb      	strb	r3, [r7, #23]
          break;
 8003cf6:	e056      	b.n	8003da6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	015a      	lsls	r2, r3, #5
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d10:	d0e7      	beq.n	8003ce2 <USB_EPStopXfer+0x82>
 8003d12:	e048      	b.n	8003da6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	015a      	lsls	r2, r3, #5
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d2c:	d13b      	bne.n	8003da6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	015a      	lsls	r2, r3, #5
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	4413      	add	r3, r2
 8003d38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	7812      	ldrb	r2, [r2, #0]
 8003d42:	0151      	lsls	r1, r2, #5
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	440a      	add	r2, r1
 8003d48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d4c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003d50:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	015a      	lsls	r2, r3, #5
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	7812      	ldrb	r2, [r2, #0]
 8003d66:	0151      	lsls	r1, r2, #5
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	440a      	add	r2, r1
 8003d6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003d74:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d902      	bls.n	8003d8c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	75fb      	strb	r3, [r7, #23]
          break;
 8003d8a:	e00c      	b.n	8003da6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	015a      	lsls	r2, r3, #5
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	4413      	add	r3, r2
 8003d96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003da0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003da4:	d0e7      	beq.n	8003d76 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	371c      	adds	r7, #28
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bc80      	pop	{r7}
 8003db0:	4770      	bx	lr

08003db2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b089      	sub	sp, #36	@ 0x24
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	60f8      	str	r0, [r7, #12]
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	4611      	mov	r1, r2
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	71fb      	strb	r3, [r7, #7]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003dd0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d123      	bne.n	8003e20 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003dd8:	88bb      	ldrh	r3, [r7, #4]
 8003dda:	3303      	adds	r3, #3
 8003ddc:	089b      	lsrs	r3, r3, #2
 8003dde:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003de0:	2300      	movs	r3, #0
 8003de2:	61bb      	str	r3, [r7, #24]
 8003de4:	e018      	b.n	8003e18 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003de6:	79fb      	ldrb	r3, [r7, #7]
 8003de8:	031a      	lsls	r2, r3, #12
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	4413      	add	r3, r2
 8003dee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003df2:	461a      	mov	r2, r3
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	3301      	adds	r3, #1
 8003e04:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	3301      	adds	r3, #1
 8003e16:	61bb      	str	r3, [r7, #24]
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d3e2      	bcc.n	8003de6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3724      	adds	r7, #36	@ 0x24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bc80      	pop	{r7}
 8003e2a:	4770      	bx	lr

08003e2c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b08b      	sub	sp, #44	@ 0x2c
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	4613      	mov	r3, r2
 8003e38:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003e42:	88fb      	ldrh	r3, [r7, #6]
 8003e44:	089b      	lsrs	r3, r3, #2
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003e4a:	88fb      	ldrh	r3, [r7, #6]
 8003e4c:	f003 0303 	and.w	r3, r3, #3
 8003e50:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003e52:	2300      	movs	r3, #0
 8003e54:	623b      	str	r3, [r7, #32]
 8003e56:	e014      	b.n	8003e82 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e62:	601a      	str	r2, [r3, #0]
    pDest++;
 8003e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e66:	3301      	adds	r3, #1
 8003e68:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e72:	3301      	adds	r3, #1
 8003e74:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e78:	3301      	adds	r3, #1
 8003e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	623b      	str	r3, [r7, #32]
 8003e82:	6a3a      	ldr	r2, [r7, #32]
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d3e6      	bcc.n	8003e58 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003e8a:	8bfb      	ldrh	r3, [r7, #30]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d01e      	beq.n	8003ece <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	f107 0310 	add.w	r3, r7, #16
 8003ea0:	6812      	ldr	r2, [r2, #0]
 8003ea2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	6a3b      	ldr	r3, [r7, #32]
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb0:	b2da      	uxtb	r2, r3
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb4:	701a      	strb	r2, [r3, #0]
      i++;
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	623b      	str	r3, [r7, #32]
      pDest++;
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8003ec2:	8bfb      	ldrh	r3, [r7, #30]
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003ec8:	8bfb      	ldrh	r3, [r7, #30]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1ea      	bne.n	8003ea4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	372c      	adds	r7, #44	@ 0x2c
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bc80      	pop	{r7}
 8003ed8:	4770      	bx	lr

08003eda <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b085      	sub	sp, #20
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
 8003ee2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	785b      	ldrb	r3, [r3, #1]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d12c      	bne.n	8003f50 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	015a      	lsls	r2, r3, #5
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	4413      	add	r3, r2
 8003efe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	db12      	blt.n	8003f2e <USB_EPSetStall+0x54>
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00f      	beq.n	8003f2e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	015a      	lsls	r2, r3, #5
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	4413      	add	r3, r2
 8003f16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	0151      	lsls	r1, r2, #5
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	440a      	add	r2, r1
 8003f24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f28:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003f2c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	015a      	lsls	r2, r3, #5
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	4413      	add	r3, r2
 8003f36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68ba      	ldr	r2, [r7, #8]
 8003f3e:	0151      	lsls	r1, r2, #5
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	440a      	add	r2, r1
 8003f44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f48:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003f4c:	6013      	str	r3, [r2, #0]
 8003f4e:	e02b      	b.n	8003fa8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	db12      	blt.n	8003f88 <USB_EPSetStall+0xae>
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00f      	beq.n	8003f88 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	015a      	lsls	r2, r3, #5
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4413      	add	r3, r2
 8003f70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	0151      	lsls	r1, r2, #5
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	440a      	add	r2, r1
 8003f7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f82:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003f86:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	015a      	lsls	r2, r3, #5
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4413      	add	r3, r2
 8003f90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	0151      	lsls	r1, r2, #5
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	440a      	add	r2, r1
 8003f9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003fa2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003fa6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3714      	adds	r7, #20
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bc80      	pop	{r7}
 8003fb2:	4770      	bx	lr

08003fb4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	785b      	ldrb	r3, [r3, #1]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d128      	bne.n	8004022 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	015a      	lsls	r2, r3, #5
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	0151      	lsls	r1, r2, #5
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	440a      	add	r2, r1
 8003fe6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003fee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	791b      	ldrb	r3, [r3, #4]
 8003ff4:	2b03      	cmp	r3, #3
 8003ff6:	d003      	beq.n	8004000 <USB_EPClearStall+0x4c>
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	791b      	ldrb	r3, [r3, #4]
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d138      	bne.n	8004072 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	015a      	lsls	r2, r3, #5
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4413      	add	r3, r2
 8004008:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	0151      	lsls	r1, r2, #5
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	440a      	add	r2, r1
 8004016:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800401a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	e027      	b.n	8004072 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	015a      	lsls	r2, r3, #5
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	4413      	add	r3, r2
 800402a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	0151      	lsls	r1, r2, #5
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	440a      	add	r2, r1
 8004038:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800403c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004040:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	791b      	ldrb	r3, [r3, #4]
 8004046:	2b03      	cmp	r3, #3
 8004048:	d003      	beq.n	8004052 <USB_EPClearStall+0x9e>
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	791b      	ldrb	r3, [r3, #4]
 800404e:	2b02      	cmp	r3, #2
 8004050:	d10f      	bne.n	8004072 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	015a      	lsls	r2, r3, #5
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	4413      	add	r3, r2
 800405a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	0151      	lsls	r1, r2, #5
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	440a      	add	r2, r1
 8004068:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800406c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004070:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	bc80      	pop	{r7}
 800407c:	4770      	bx	lr

0800407e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800407e:	b480      	push	{r7}
 8004080:	b085      	sub	sp, #20
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
 8004086:	460b      	mov	r3, r1
 8004088:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800409c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80040a0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	78fb      	ldrb	r3, [r7, #3]
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80040b2:	68f9      	ldr	r1, [r7, #12]
 80040b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040b8:	4313      	orrs	r3, r2
 80040ba:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bc80      	pop	{r7}
 80040c6:	4770      	bx	lr

080040c8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80040e2:	f023 0303 	bic.w	r3, r3, #3
 80040e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040f6:	f023 0302 	bic.w	r3, r3, #2
 80040fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	bc80      	pop	{r7}
 8004106:	4770      	bx	lr

08004108 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004122:	f023 0303 	bic.w	r3, r3, #3
 8004126:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004136:	f043 0302 	orr.w	r3, r3, #2
 800413a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	bc80      	pop	{r7}
 8004146:	4770      	bx	lr

08004148 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	4013      	ands	r3, r2
 800415e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004160:	68fb      	ldr	r3, [r7, #12]
}
 8004162:	4618      	mov	r0, r3
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	bc80      	pop	{r7}
 800416a:	4770      	bx	lr

0800416c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	4013      	ands	r3, r2
 800418e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	0c1b      	lsrs	r3, r3, #16
}
 8004194:	4618      	mov	r0, r3
 8004196:	3714      	adds	r7, #20
 8004198:	46bd      	mov	sp, r7
 800419a:	bc80      	pop	{r7}
 800419c:	4770      	bx	lr

0800419e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800419e:	b480      	push	{r7}
 80041a0:	b085      	sub	sp, #20
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041ba:	69db      	ldr	r3, [r3, #28]
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	4013      	ands	r3, r2
 80041c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	b29b      	uxth	r3, r3
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bc80      	pop	{r7}
 80041ce:	4770      	bx	lr

080041d0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	460b      	mov	r3, r1
 80041da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80041e0:	78fb      	ldrb	r3, [r7, #3]
 80041e2:	015a      	lsls	r2, r3, #5
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4413      	add	r3, r2
 80041e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	68ba      	ldr	r2, [r7, #8]
 80041fa:	4013      	ands	r3, r2
 80041fc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80041fe:	68bb      	ldr	r3, [r7, #8]
}
 8004200:	4618      	mov	r0, r3
 8004202:	3714      	adds	r7, #20
 8004204:	46bd      	mov	sp, r7
 8004206:	bc80      	pop	{r7}
 8004208:	4770      	bx	lr

0800420a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800420a:	b480      	push	{r7}
 800420c:	b087      	sub	sp, #28
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
 8004212:	460b      	mov	r3, r1
 8004214:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800422a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800422c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800422e:	78fb      	ldrb	r3, [r7, #3]
 8004230:	f003 030f 	and.w	r3, r3, #15
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	fa22 f303 	lsr.w	r3, r2, r3
 800423a:	01db      	lsls	r3, r3, #7
 800423c:	b2db      	uxtb	r3, r3
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	4313      	orrs	r3, r2
 8004242:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004244:	78fb      	ldrb	r3, [r7, #3]
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	4413      	add	r3, r2
 800424c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	4013      	ands	r3, r2
 8004256:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004258:	68bb      	ldr	r3, [r7, #8]
}
 800425a:	4618      	mov	r0, r3
 800425c:	371c      	adds	r7, #28
 800425e:	46bd      	mov	sp, r7
 8004260:	bc80      	pop	{r7}
 8004262:	4770      	bx	lr

08004264 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	f003 0301 	and.w	r3, r3, #1
}
 8004274:	4618      	mov	r0, r3
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	bc80      	pop	{r7}
 800427c:	4770      	bx	lr

0800427e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800427e:	b480      	push	{r7}
 8004280:	b085      	sub	sp, #20
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004298:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800429c:	f023 0307 	bic.w	r3, r3, #7
 80042a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	bc80      	pop	{r7}
 80042c0:	4770      	bx	lr
	...

080042c4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b087      	sub	sp, #28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	460b      	mov	r3, r1
 80042ce:	607a      	str	r2, [r7, #4]
 80042d0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	333c      	adds	r3, #60	@ 0x3c
 80042da:	3304      	adds	r3, #4
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	4a25      	ldr	r2, [pc, #148]	@ (8004378 <USB_EP0_OutStart+0xb4>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d90a      	bls.n	80042fe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80042f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80042f8:	d101      	bne.n	80042fe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	e037      	b.n	800436e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004304:	461a      	mov	r2, r3
 8004306:	2300      	movs	r3, #0
 8004308:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004318:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800431c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800432c:	f043 0318 	orr.w	r3, r3, #24
 8004330:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004340:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004344:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004346:	7afb      	ldrb	r3, [r7, #11]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d10f      	bne.n	800436c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004352:	461a      	mov	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004366:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800436a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	371c      	adds	r7, #28
 8004372:	46bd      	mov	sp, r7
 8004374:	bc80      	pop	{r7}
 8004376:	4770      	bx	lr
 8004378:	4f54300a 	.word	0x4f54300a

0800437c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	3301      	adds	r3, #1
 800438c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004394:	d901      	bls.n	800439a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e01b      	b.n	80043d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	daf2      	bge.n	8004388 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	f043 0201 	orr.w	r2, r3, #1
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	3301      	adds	r3, #1
 80043b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80043be:	d901      	bls.n	80043c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e006      	b.n	80043d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d0f0      	beq.n	80043b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3714      	adds	r7, #20
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bc80      	pop	{r7}
 80043da:	4770      	bx	lr

080043dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	460b      	mov	r3, r1
 80043e6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	7c1b      	ldrb	r3, [r3, #16]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d115      	bne.n	8004420 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80043f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80043f8:	2202      	movs	r2, #2
 80043fa:	2181      	movs	r1, #129	@ 0x81
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f001 ff2e 	bl	800625e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004408:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800440c:	2202      	movs	r2, #2
 800440e:	2101      	movs	r1, #1
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f001 ff24 	bl	800625e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800441e:	e012      	b.n	8004446 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004420:	2340      	movs	r3, #64	@ 0x40
 8004422:	2202      	movs	r2, #2
 8004424:	2181      	movs	r1, #129	@ 0x81
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f001 ff19 	bl	800625e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004432:	2340      	movs	r3, #64	@ 0x40
 8004434:	2202      	movs	r2, #2
 8004436:	2101      	movs	r1, #1
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f001 ff10 	bl	800625e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004446:	2308      	movs	r3, #8
 8004448:	2203      	movs	r2, #3
 800444a:	2182      	movs	r1, #130	@ 0x82
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f001 ff06 	bl	800625e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004458:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800445c:	f002 f852 	bl	8006504 <malloc>
 8004460:	4603      	mov	r3, r0
 8004462:	461a      	mov	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004470:	2b00      	cmp	r3, #0
 8004472:	d102      	bne.n	800447a <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8004474:	2301      	movs	r3, #1
 8004476:	73fb      	strb	r3, [r7, #15]
 8004478:	e026      	b.n	80044c8 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004480:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	2200      	movs	r2, #0
 8004490:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	2200      	movs	r2, #0
 8004498:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	7c1b      	ldrb	r3, [r3, #16]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d109      	bne.n	80044b8 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80044aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80044ae:	2101      	movs	r1, #1
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f001 ffc4 	bl	800643e <USBD_LL_PrepareReceive>
 80044b6:	e007      	b.n	80044c8 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80044be:	2340      	movs	r3, #64	@ 0x40
 80044c0:	2101      	movs	r1, #1
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f001 ffbb 	bl	800643e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80044c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b084      	sub	sp, #16
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
 80044da:	460b      	mov	r3, r1
 80044dc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80044e2:	2181      	movs	r1, #129	@ 0x81
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f001 fee0 	bl	80062aa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80044f0:	2101      	movs	r1, #1
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f001 fed9 	bl	80062aa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004500:	2182      	movs	r1, #130	@ 0x82
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f001 fed1 	bl	80062aa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00e      	beq.n	8004536 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004528:	4618      	mov	r0, r3
 800452a:	f001 fff3 	bl	8006514 <free>
    pdev->pClassData = NULL;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8004536:	7bfb      	ldrb	r3, [r7, #15]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004550:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004552:	2300      	movs	r3, #0
 8004554:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004556:	2300      	movs	r3, #0
 8004558:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800455a:	2300      	movs	r3, #0
 800455c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004566:	2b00      	cmp	r3, #0
 8004568:	d039      	beq.n	80045de <USBD_CDC_Setup+0x9e>
 800456a:	2b20      	cmp	r3, #32
 800456c:	d17f      	bne.n	800466e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	88db      	ldrh	r3, [r3, #6]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d029      	beq.n	80045ca <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	b25b      	sxtb	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	da11      	bge.n	80045a4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800458c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	88d2      	ldrh	r2, [r2, #6]
 8004592:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004594:	6939      	ldr	r1, [r7, #16]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	88db      	ldrh	r3, [r3, #6]
 800459a:	461a      	mov	r2, r3
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f001 fa3d 	bl	8005a1c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80045a2:	e06b      	b.n	800467c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	785a      	ldrb	r2, [r3, #1]
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	88db      	ldrh	r3, [r3, #6]
 80045b2:	b2da      	uxtb	r2, r3
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80045ba:	6939      	ldr	r1, [r7, #16]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	88db      	ldrh	r3, [r3, #6]
 80045c0:	461a      	mov	r2, r3
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f001 fa58 	bl	8005a78 <USBD_CtlPrepareRx>
      break;
 80045c8:	e058      	b.n	800467c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	7850      	ldrb	r0, [r2, #1]
 80045d6:	2200      	movs	r2, #0
 80045d8:	6839      	ldr	r1, [r7, #0]
 80045da:	4798      	blx	r3
      break;
 80045dc:	e04e      	b.n	800467c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	785b      	ldrb	r3, [r3, #1]
 80045e2:	2b0b      	cmp	r3, #11
 80045e4:	d02e      	beq.n	8004644 <USBD_CDC_Setup+0x104>
 80045e6:	2b0b      	cmp	r3, #11
 80045e8:	dc38      	bgt.n	800465c <USBD_CDC_Setup+0x11c>
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d002      	beq.n	80045f4 <USBD_CDC_Setup+0xb4>
 80045ee:	2b0a      	cmp	r3, #10
 80045f0:	d014      	beq.n	800461c <USBD_CDC_Setup+0xdc>
 80045f2:	e033      	b.n	800465c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80045fa:	2b03      	cmp	r3, #3
 80045fc:	d107      	bne.n	800460e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80045fe:	f107 030c 	add.w	r3, r7, #12
 8004602:	2202      	movs	r2, #2
 8004604:	4619      	mov	r1, r3
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f001 fa08 	bl	8005a1c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800460c:	e02e      	b.n	800466c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800460e:	6839      	ldr	r1, [r7, #0]
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f001 f999 	bl	8005948 <USBD_CtlError>
            ret = USBD_FAIL;
 8004616:	2302      	movs	r3, #2
 8004618:	75fb      	strb	r3, [r7, #23]
          break;
 800461a:	e027      	b.n	800466c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004622:	2b03      	cmp	r3, #3
 8004624:	d107      	bne.n	8004636 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004626:	f107 030f 	add.w	r3, r7, #15
 800462a:	2201      	movs	r2, #1
 800462c:	4619      	mov	r1, r3
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f001 f9f4 	bl	8005a1c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004634:	e01a      	b.n	800466c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8004636:	6839      	ldr	r1, [r7, #0]
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f001 f985 	bl	8005948 <USBD_CtlError>
            ret = USBD_FAIL;
 800463e:	2302      	movs	r3, #2
 8004640:	75fb      	strb	r3, [r7, #23]
          break;
 8004642:	e013      	b.n	800466c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800464a:	2b03      	cmp	r3, #3
 800464c:	d00d      	beq.n	800466a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800464e:	6839      	ldr	r1, [r7, #0]
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f001 f979 	bl	8005948 <USBD_CtlError>
            ret = USBD_FAIL;
 8004656:	2302      	movs	r3, #2
 8004658:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800465a:	e006      	b.n	800466a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800465c:	6839      	ldr	r1, [r7, #0]
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f001 f972 	bl	8005948 <USBD_CtlError>
          ret = USBD_FAIL;
 8004664:	2302      	movs	r3, #2
 8004666:	75fb      	strb	r3, [r7, #23]
          break;
 8004668:	e000      	b.n	800466c <USBD_CDC_Setup+0x12c>
          break;
 800466a:	bf00      	nop
      }
      break;
 800466c:	e006      	b.n	800467c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800466e:	6839      	ldr	r1, [r7, #0]
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f001 f969 	bl	8005948 <USBD_CtlError>
      ret = USBD_FAIL;
 8004676:	2302      	movs	r3, #2
 8004678:	75fb      	strb	r3, [r7, #23]
      break;
 800467a:	bf00      	nop
  }

  return ret;
 800467c:	7dfb      	ldrb	r3, [r7, #23]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b084      	sub	sp, #16
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
 800468e:	460b      	mov	r3, r1
 8004690:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004698:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80046a0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d03a      	beq.n	8004722 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80046ac:	78fa      	ldrb	r2, [r7, #3]
 80046ae:	6879      	ldr	r1, [r7, #4]
 80046b0:	4613      	mov	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	440b      	add	r3, r1
 80046ba:	331c      	adds	r3, #28
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d029      	beq.n	8004716 <USBD_CDC_DataIn+0x90>
 80046c2:	78fa      	ldrb	r2, [r7, #3]
 80046c4:	6879      	ldr	r1, [r7, #4]
 80046c6:	4613      	mov	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	4413      	add	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	440b      	add	r3, r1
 80046d0:	331c      	adds	r3, #28
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	78f9      	ldrb	r1, [r7, #3]
 80046d6:	68b8      	ldr	r0, [r7, #8]
 80046d8:	460b      	mov	r3, r1
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	440b      	add	r3, r1
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	4403      	add	r3, r0
 80046e2:	331c      	adds	r3, #28
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	fbb2 f1f3 	udiv	r1, r2, r3
 80046ea:	fb01 f303 	mul.w	r3, r1, r3
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d110      	bne.n	8004716 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80046f4:	78fa      	ldrb	r2, [r7, #3]
 80046f6:	6879      	ldr	r1, [r7, #4]
 80046f8:	4613      	mov	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	440b      	add	r3, r1
 8004702:	331c      	adds	r3, #28
 8004704:	2200      	movs	r2, #0
 8004706:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004708:	78f9      	ldrb	r1, [r7, #3]
 800470a:	2300      	movs	r3, #0
 800470c:	2200      	movs	r2, #0
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f001 fe72 	bl	80063f8 <USBD_LL_Transmit>
 8004714:	e003      	b.n	800471e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800471e:	2300      	movs	r3, #0
 8004720:	e000      	b.n	8004724 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8004722:	2302      	movs	r3, #2
  }
}
 8004724:	4618      	mov	r0, r3
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	460b      	mov	r3, r1
 8004736:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800473e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004740:	78fb      	ldrb	r3, [r7, #3]
 8004742:	4619      	mov	r1, r3
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f001 fe9d 	bl	8006484 <USBD_LL_GetRxDataSize>
 800474a:	4602      	mov	r2, r0
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00d      	beq.n	8004778 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8004770:	4611      	mov	r1, r2
 8004772:	4798      	blx	r3

    return USBD_OK;
 8004774:	2300      	movs	r3, #0
 8004776:	e000      	b.n	800477a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8004778:	2302      	movs	r3, #2
  }
}
 800477a:	4618      	mov	r0, r3
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b084      	sub	sp, #16
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004790:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8004798:	2b00      	cmp	r3, #0
 800479a:	d014      	beq.n	80047c6 <USBD_CDC_EP0_RxReady+0x44>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80047a2:	2bff      	cmp	r3, #255	@ 0xff
 80047a4:	d00f      	beq.n	80047c6 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80047b4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80047bc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	22ff      	movs	r2, #255	@ 0xff
 80047c2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2243      	movs	r2, #67	@ 0x43
 80047dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80047de:	4b03      	ldr	r3, [pc, #12]	@ (80047ec <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bc80      	pop	{r7}
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	20000094 	.word	0x20000094

080047f0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2243      	movs	r2, #67	@ 0x43
 80047fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80047fe:	4b03      	ldr	r3, [pc, #12]	@ (800480c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004800:	4618      	mov	r0, r3
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	bc80      	pop	{r7}
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	20000050 	.word	0x20000050

08004810 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2243      	movs	r2, #67	@ 0x43
 800481c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800481e:	4b03      	ldr	r3, [pc, #12]	@ (800482c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004820:	4618      	mov	r0, r3
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	bc80      	pop	{r7}
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	200000d8 	.word	0x200000d8

08004830 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	220a      	movs	r2, #10
 800483c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800483e:	4b03      	ldr	r3, [pc, #12]	@ (800484c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004840:	4618      	mov	r0, r3
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	bc80      	pop	{r7}
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	2000000c 	.word	0x2000000c

08004850 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800485a:	2302      	movs	r3, #2
 800485c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d005      	beq.n	8004870 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800486c:	2300      	movs	r3, #0
 800486e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004870:	7bfb      	ldrb	r3, [r7, #15]
}
 8004872:	4618      	mov	r0, r3
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	bc80      	pop	{r7}
 800487a:	4770      	bx	lr

0800487c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800487c:	b480      	push	{r7}
 800487e:	b087      	sub	sp, #28
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	4613      	mov	r3, r2
 8004888:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004890:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800489a:	88fa      	ldrh	r2, [r7, #6]
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	371c      	adds	r7, #28
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bc80      	pop	{r7}
 80048ac:	4770      	bx	lr

080048ae <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b085      	sub	sp, #20
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
 80048b6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80048be:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bc80      	pop	{r7}
 80048d2:	4770      	bx	lr

080048d4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80048e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d01c      	beq.n	8004928 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d115      	bne.n	8004924 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004916:	b29b      	uxth	r3, r3
 8004918:	2181      	movs	r1, #129	@ 0x81
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f001 fd6c 	bl	80063f8 <USBD_LL_Transmit>

      return USBD_OK;
 8004920:	2300      	movs	r3, #0
 8004922:	e002      	b.n	800492a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8004924:	2301      	movs	r3, #1
 8004926:	e000      	b.n	800492a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8004928:	2302      	movs	r3, #2
  }
}
 800492a:	4618      	mov	r0, r3
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b084      	sub	sp, #16
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004940:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004948:	2b00      	cmp	r3, #0
 800494a:	d017      	beq.n	800497c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	7c1b      	ldrb	r3, [r3, #16]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d109      	bne.n	8004968 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800495a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800495e:	2101      	movs	r1, #1
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f001 fd6c 	bl	800643e <USBD_LL_PrepareReceive>
 8004966:	e007      	b.n	8004978 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800496e:	2340      	movs	r3, #64	@ 0x40
 8004970:	2101      	movs	r1, #1
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f001 fd63 	bl	800643e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004978:	2300      	movs	r3, #0
 800497a:	e000      	b.n	800497e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800497c:	2302      	movs	r3, #2
  }
}
 800497e:	4618      	mov	r0, r3
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b084      	sub	sp, #16
 800498a:	af00      	add	r7, sp, #0
 800498c:	60f8      	str	r0, [r7, #12]
 800498e:	60b9      	str	r1, [r7, #8]
 8004990:	4613      	mov	r3, r2
 8004992:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800499a:	2302      	movs	r3, #2
 800499c:	e01a      	b.n	80049d4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d003      	beq.n	80049b0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	79fa      	ldrb	r2, [r7, #7]
 80049ca:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f001 fbe1 	bl	8006194 <USBD_LL_Init>

  return USBD_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80049e6:	2300      	movs	r3, #0
 80049e8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d006      	beq.n	80049fe <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80049f8:	2300      	movs	r3, #0
 80049fa:	73fb      	strb	r3, [r7, #15]
 80049fc:	e001      	b.n	8004a02 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80049fe:	2302      	movs	r3, #2
 8004a00:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bc80      	pop	{r7}
 8004a0c:	4770      	bx	lr

08004a0e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b082      	sub	sp, #8
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f001 fc06 	bl	8006228 <USBD_LL_Start>

  return USBD_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004a26:	b480      	push	{r7}
 8004a28:	b083      	sub	sp, #12
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bc80      	pop	{r7}
 8004a38:	4770      	bx	lr

08004a3a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b084      	sub	sp, #16
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
 8004a42:	460b      	mov	r3, r1
 8004a44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004a46:	2302      	movs	r3, #2
 8004a48:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00c      	beq.n	8004a6e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	78fa      	ldrb	r2, [r7, #3]
 8004a5e:	4611      	mov	r1, r2
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	4798      	blx	r3
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8004a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	460b      	mov	r3, r1
 8004a82:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	78fa      	ldrb	r2, [r7, #3]
 8004a8e:	4611      	mov	r1, r2
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	4798      	blx	r3

  return USBD_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b082      	sub	sp, #8
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8004aae:	6839      	ldr	r1, [r7, #0]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f000 ff10 	bl	80058d6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8004ad2:	f003 031f 	and.w	r3, r3, #31
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d016      	beq.n	8004b08 <USBD_LL_SetupStage+0x6a>
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d81c      	bhi.n	8004b18 <USBD_LL_SetupStage+0x7a>
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d002      	beq.n	8004ae8 <USBD_LL_SetupStage+0x4a>
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d008      	beq.n	8004af8 <USBD_LL_SetupStage+0x5a>
 8004ae6:	e017      	b.n	8004b18 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8004aee:	4619      	mov	r1, r3
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 fa03 	bl	8004efc <USBD_StdDevReq>
      break;
 8004af6:	e01a      	b.n	8004b2e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8004afe:	4619      	mov	r1, r3
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 fa65 	bl	8004fd0 <USBD_StdItfReq>
      break;
 8004b06:	e012      	b.n	8004b2e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8004b0e:	4619      	mov	r1, r3
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 faa5 	bl	8005060 <USBD_StdEPReq>
      break;
 8004b16:	e00a      	b.n	8004b2e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8004b1e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	4619      	mov	r1, r3
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f001 fbde 	bl	80062e8 <USBD_LL_StallEP>
      break;
 8004b2c:	bf00      	nop
  }

  return USBD_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	460b      	mov	r3, r1
 8004b42:	607a      	str	r2, [r7, #4]
 8004b44:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004b46:	7afb      	ldrb	r3, [r7, #11]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d14b      	bne.n	8004be4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8004b52:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004b5a:	2b03      	cmp	r3, #3
 8004b5c:	d134      	bne.n	8004bc8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d919      	bls.n	8004b9e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	68da      	ldr	r2, [r3, #12]
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	1ad2      	subs	r2, r2, r3
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	68da      	ldr	r2, [r3, #12]
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d203      	bcs.n	8004b8c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	e002      	b.n	8004b92 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	461a      	mov	r2, r3
 8004b94:	6879      	ldr	r1, [r7, #4]
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f000 ff8c 	bl	8005ab4 <USBD_CtlContinueRx>
 8004b9c:	e038      	b.n	8004c10 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00a      	beq.n	8004bc0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004bb0:	2b03      	cmp	r3, #3
 8004bb2:	d105      	bne.n	8004bc0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 ff89 	bl	8005ad8 <USBD_CtlSendStatus>
 8004bc6:	e023      	b.n	8004c10 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004bce:	2b05      	cmp	r3, #5
 8004bd0:	d11e      	bne.n	8004c10 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004bda:	2100      	movs	r1, #0
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f001 fb83 	bl	80062e8 <USBD_LL_StallEP>
 8004be2:	e015      	b.n	8004c10 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00d      	beq.n	8004c0c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004bf6:	2b03      	cmp	r3, #3
 8004bf8:	d108      	bne.n	8004c0c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	7afa      	ldrb	r2, [r7, #11]
 8004c04:	4611      	mov	r1, r2
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	4798      	blx	r3
 8004c0a:	e001      	b.n	8004c10 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	e000      	b.n	8004c12 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3718      	adds	r7, #24
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b086      	sub	sp, #24
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	60f8      	str	r0, [r7, #12]
 8004c22:	460b      	mov	r3, r1
 8004c24:	607a      	str	r2, [r7, #4]
 8004c26:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004c28:	7afb      	ldrb	r3, [r7, #11]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d17f      	bne.n	8004d2e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	3314      	adds	r3, #20
 8004c32:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d15c      	bne.n	8004cf8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	68da      	ldr	r2, [r3, #12]
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d915      	bls.n	8004c76 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	68da      	ldr	r2, [r3, #12]
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	1ad2      	subs	r2, r2, r3
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	461a      	mov	r2, r3
 8004c60:	6879      	ldr	r1, [r7, #4]
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f000 fef6 	bl	8005a54 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004c68:	2300      	movs	r3, #0
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f001 fbe5 	bl	800643e <USBD_LL_PrepareReceive>
 8004c74:	e04e      	b.n	8004d14 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	6912      	ldr	r2, [r2, #16]
 8004c7e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c82:	fb01 f202 	mul.w	r2, r1, r2
 8004c86:	1a9b      	subs	r3, r3, r2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d11c      	bne.n	8004cc6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	689a      	ldr	r2, [r3, #8]
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d316      	bcc.n	8004cc6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d20f      	bcs.n	8004cc6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	2100      	movs	r1, #0
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f000 fed2 	bl	8005a54 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004cb8:	2300      	movs	r3, #0
 8004cba:	2200      	movs	r2, #0
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f001 fbbd 	bl	800643e <USBD_LL_PrepareReceive>
 8004cc4:	e026      	b.n	8004d14 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00a      	beq.n	8004ce8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004cd8:	2b03      	cmp	r3, #3
 8004cda:	d105      	bne.n	8004ce8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8004ce8:	2180      	movs	r1, #128	@ 0x80
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f001 fafc 	bl	80062e8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f000 ff04 	bl	8005afe <USBD_CtlReceiveStatus>
 8004cf6:	e00d      	b.n	8004d14 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004cfe:	2b04      	cmp	r3, #4
 8004d00:	d004      	beq.n	8004d0c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d103      	bne.n	8004d14 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8004d0c:	2180      	movs	r1, #128	@ 0x80
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f001 faea 	bl	80062e8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d11d      	bne.n	8004d5a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f7ff fe81 	bl	8004a26 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8004d2c:	e015      	b.n	8004d5a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00d      	beq.n	8004d56 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8004d40:	2b03      	cmp	r3, #3
 8004d42:	d108      	bne.n	8004d56 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	7afa      	ldrb	r2, [r7, #11]
 8004d4e:	4611      	mov	r1, r2
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	4798      	blx	r3
 8004d54:	e001      	b.n	8004d5a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004d56:	2302      	movs	r3, #2
 8004d58:	e000      	b.n	8004d5c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3718      	adds	r7, #24
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004d6c:	2340      	movs	r3, #64	@ 0x40
 8004d6e:	2200      	movs	r2, #0
 8004d70:	2100      	movs	r1, #0
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f001 fa73 	bl	800625e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2240      	movs	r2, #64	@ 0x40
 8004d84:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004d88:	2340      	movs	r3, #64	@ 0x40
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	2180      	movs	r1, #128	@ 0x80
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f001 fa65 	bl	800625e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2240      	movs	r2, #64	@ 0x40
 8004d9e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d009      	beq.n	8004ddc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6852      	ldr	r2, [r2, #4]
 8004dd4:	b2d2      	uxtb	r2, r2
 8004dd6:	4611      	mov	r1, r2
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	4798      	blx	r3
  }

  return USBD_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3708      	adds	r7, #8
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
 8004dee:	460b      	mov	r3, r1
 8004df0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	78fa      	ldrb	r2, [r7, #3]
 8004df6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bc80      	pop	{r7}
 8004e02:	4770      	bx	lr

08004e04 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2204      	movs	r2, #4
 8004e1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bc80      	pop	{r7}
 8004e2a:	4770      	bx	lr

08004e2c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d105      	bne.n	8004e4a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bc80      	pop	{r7}
 8004e54:	4770      	bx	lr

08004e56 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b082      	sub	sp, #8
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004e64:	2b03      	cmp	r3, #3
 8004e66:	d10b      	bne.n	8004e80 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004e6e:	69db      	ldr	r3, [r3, #28]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d005      	beq.n	8004e80 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004e7a:	69db      	ldr	r3, [r3, #28]
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b083      	sub	sp, #12
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
 8004e92:	460b      	mov	r3, r1
 8004e94:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bc80      	pop	{r7}
 8004ea0:	4770      	bx	lr

08004ea2 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
 8004eaa:	460b      	mov	r3, r1
 8004eac:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bc80      	pop	{r7}
 8004eb8:	4770      	bx	lr

08004eba <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bc80      	pop	{r7}
 8004ecc:	4770      	bx	lr

08004ece <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b082      	sub	sp, #8
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	6852      	ldr	r2, [r2, #4]
 8004eea:	b2d2      	uxtb	r2, r2
 8004eec:	4611      	mov	r1, r2
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	4798      	blx	r3

  return USBD_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3708      	adds	r7, #8
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004f06:	2300      	movs	r3, #0
 8004f08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004f12:	2b40      	cmp	r3, #64	@ 0x40
 8004f14:	d005      	beq.n	8004f22 <USBD_StdDevReq+0x26>
 8004f16:	2b40      	cmp	r3, #64	@ 0x40
 8004f18:	d84f      	bhi.n	8004fba <USBD_StdDevReq+0xbe>
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d009      	beq.n	8004f32 <USBD_StdDevReq+0x36>
 8004f1e:	2b20      	cmp	r3, #32
 8004f20:	d14b      	bne.n	8004fba <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	6839      	ldr	r1, [r7, #0]
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	4798      	blx	r3
      break;
 8004f30:	e048      	b.n	8004fc4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	785b      	ldrb	r3, [r3, #1]
 8004f36:	2b09      	cmp	r3, #9
 8004f38:	d839      	bhi.n	8004fae <USBD_StdDevReq+0xb2>
 8004f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f40 <USBD_StdDevReq+0x44>)
 8004f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f40:	08004f91 	.word	0x08004f91
 8004f44:	08004fa5 	.word	0x08004fa5
 8004f48:	08004faf 	.word	0x08004faf
 8004f4c:	08004f9b 	.word	0x08004f9b
 8004f50:	08004faf 	.word	0x08004faf
 8004f54:	08004f73 	.word	0x08004f73
 8004f58:	08004f69 	.word	0x08004f69
 8004f5c:	08004faf 	.word	0x08004faf
 8004f60:	08004f87 	.word	0x08004f87
 8004f64:	08004f7d 	.word	0x08004f7d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004f68:	6839      	ldr	r1, [r7, #0]
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f9dc 	bl	8005328 <USBD_GetDescriptor>
          break;
 8004f70:	e022      	b.n	8004fb8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004f72:	6839      	ldr	r1, [r7, #0]
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 fb3f 	bl	80055f8 <USBD_SetAddress>
          break;
 8004f7a:	e01d      	b.n	8004fb8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8004f7c:	6839      	ldr	r1, [r7, #0]
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 fb7e 	bl	8005680 <USBD_SetConfig>
          break;
 8004f84:	e018      	b.n	8004fb8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004f86:	6839      	ldr	r1, [r7, #0]
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 fc07 	bl	800579c <USBD_GetConfig>
          break;
 8004f8e:	e013      	b.n	8004fb8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004f90:	6839      	ldr	r1, [r7, #0]
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 fc37 	bl	8005806 <USBD_GetStatus>
          break;
 8004f98:	e00e      	b.n	8004fb8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004f9a:	6839      	ldr	r1, [r7, #0]
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 fc65 	bl	800586c <USBD_SetFeature>
          break;
 8004fa2:	e009      	b.n	8004fb8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004fa4:	6839      	ldr	r1, [r7, #0]
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 fc74 	bl	8005894 <USBD_ClrFeature>
          break;
 8004fac:	e004      	b.n	8004fb8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8004fae:	6839      	ldr	r1, [r7, #0]
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 fcc9 	bl	8005948 <USBD_CtlError>
          break;
 8004fb6:	bf00      	nop
      }
      break;
 8004fb8:	e004      	b.n	8004fc4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8004fba:	6839      	ldr	r1, [r7, #0]
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 fcc3 	bl	8005948 <USBD_CtlError>
      break;
 8004fc2:	bf00      	nop
  }

  return ret;
 8004fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop

08004fd0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004fe6:	2b40      	cmp	r3, #64	@ 0x40
 8004fe8:	d005      	beq.n	8004ff6 <USBD_StdItfReq+0x26>
 8004fea:	2b40      	cmp	r3, #64	@ 0x40
 8004fec:	d82e      	bhi.n	800504c <USBD_StdItfReq+0x7c>
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <USBD_StdItfReq+0x26>
 8004ff2:	2b20      	cmp	r3, #32
 8004ff4:	d12a      	bne.n	800504c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d81d      	bhi.n	800503e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	889b      	ldrh	r3, [r3, #4]
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b01      	cmp	r3, #1
 800500a:	d813      	bhi.n	8005034 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	6839      	ldr	r1, [r7, #0]
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	4798      	blx	r3
 800501a:	4603      	mov	r3, r0
 800501c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	88db      	ldrh	r3, [r3, #6]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d110      	bne.n	8005048 <USBD_StdItfReq+0x78>
 8005026:	7bfb      	ldrb	r3, [r7, #15]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10d      	bne.n	8005048 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 fd53 	bl	8005ad8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005032:	e009      	b.n	8005048 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8005034:	6839      	ldr	r1, [r7, #0]
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 fc86 	bl	8005948 <USBD_CtlError>
          break;
 800503c:	e004      	b.n	8005048 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800503e:	6839      	ldr	r1, [r7, #0]
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 fc81 	bl	8005948 <USBD_CtlError>
          break;
 8005046:	e000      	b.n	800504a <USBD_StdItfReq+0x7a>
          break;
 8005048:	bf00      	nop
      }
      break;
 800504a:	e004      	b.n	8005056 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800504c:	6839      	ldr	r1, [r7, #0]
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 fc7a 	bl	8005948 <USBD_CtlError>
      break;
 8005054:	bf00      	nop
  }

  return USBD_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800506a:	2300      	movs	r3, #0
 800506c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	889b      	ldrh	r3, [r3, #4]
 8005072:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800507c:	2b40      	cmp	r3, #64	@ 0x40
 800507e:	d007      	beq.n	8005090 <USBD_StdEPReq+0x30>
 8005080:	2b40      	cmp	r3, #64	@ 0x40
 8005082:	f200 8146 	bhi.w	8005312 <USBD_StdEPReq+0x2b2>
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <USBD_StdEPReq+0x40>
 800508a:	2b20      	cmp	r3, #32
 800508c:	f040 8141 	bne.w	8005312 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	6839      	ldr	r1, [r7, #0]
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	4798      	blx	r3
      break;
 800509e:	e13d      	b.n	800531c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80050a8:	2b20      	cmp	r3, #32
 80050aa:	d10a      	bne.n	80050c2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	6839      	ldr	r1, [r7, #0]
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	4798      	blx	r3
 80050ba:	4603      	mov	r3, r0
 80050bc:	73fb      	strb	r3, [r7, #15]

        return ret;
 80050be:	7bfb      	ldrb	r3, [r7, #15]
 80050c0:	e12d      	b.n	800531e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	785b      	ldrb	r3, [r3, #1]
 80050c6:	2b03      	cmp	r3, #3
 80050c8:	d007      	beq.n	80050da <USBD_StdEPReq+0x7a>
 80050ca:	2b03      	cmp	r3, #3
 80050cc:	f300 811b 	bgt.w	8005306 <USBD_StdEPReq+0x2a6>
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d072      	beq.n	80051ba <USBD_StdEPReq+0x15a>
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d03a      	beq.n	800514e <USBD_StdEPReq+0xee>
 80050d8:	e115      	b.n	8005306 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d002      	beq.n	80050ea <USBD_StdEPReq+0x8a>
 80050e4:	2b03      	cmp	r3, #3
 80050e6:	d015      	beq.n	8005114 <USBD_StdEPReq+0xb4>
 80050e8:	e02b      	b.n	8005142 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80050ea:	7bbb      	ldrb	r3, [r7, #14]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00c      	beq.n	800510a <USBD_StdEPReq+0xaa>
 80050f0:	7bbb      	ldrb	r3, [r7, #14]
 80050f2:	2b80      	cmp	r3, #128	@ 0x80
 80050f4:	d009      	beq.n	800510a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80050f6:	7bbb      	ldrb	r3, [r7, #14]
 80050f8:	4619      	mov	r1, r3
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f001 f8f4 	bl	80062e8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005100:	2180      	movs	r1, #128	@ 0x80
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f001 f8f0 	bl	80062e8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005108:	e020      	b.n	800514c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800510a:	6839      	ldr	r1, [r7, #0]
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 fc1b 	bl	8005948 <USBD_CtlError>
              break;
 8005112:	e01b      	b.n	800514c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	885b      	ldrh	r3, [r3, #2]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10e      	bne.n	800513a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800511c:	7bbb      	ldrb	r3, [r7, #14]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00b      	beq.n	800513a <USBD_StdEPReq+0xda>
 8005122:	7bbb      	ldrb	r3, [r7, #14]
 8005124:	2b80      	cmp	r3, #128	@ 0x80
 8005126:	d008      	beq.n	800513a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	88db      	ldrh	r3, [r3, #6]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d104      	bne.n	800513a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005130:	7bbb      	ldrb	r3, [r7, #14]
 8005132:	4619      	mov	r1, r3
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f001 f8d7 	bl	80062e8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 fccc 	bl	8005ad8 <USBD_CtlSendStatus>

              break;
 8005140:	e004      	b.n	800514c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8005142:	6839      	ldr	r1, [r7, #0]
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 fbff 	bl	8005948 <USBD_CtlError>
              break;
 800514a:	bf00      	nop
          }
          break;
 800514c:	e0e0      	b.n	8005310 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005154:	2b02      	cmp	r3, #2
 8005156:	d002      	beq.n	800515e <USBD_StdEPReq+0xfe>
 8005158:	2b03      	cmp	r3, #3
 800515a:	d015      	beq.n	8005188 <USBD_StdEPReq+0x128>
 800515c:	e026      	b.n	80051ac <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800515e:	7bbb      	ldrb	r3, [r7, #14]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00c      	beq.n	800517e <USBD_StdEPReq+0x11e>
 8005164:	7bbb      	ldrb	r3, [r7, #14]
 8005166:	2b80      	cmp	r3, #128	@ 0x80
 8005168:	d009      	beq.n	800517e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800516a:	7bbb      	ldrb	r3, [r7, #14]
 800516c:	4619      	mov	r1, r3
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f001 f8ba 	bl	80062e8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005174:	2180      	movs	r1, #128	@ 0x80
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f001 f8b6 	bl	80062e8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800517c:	e01c      	b.n	80051b8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800517e:	6839      	ldr	r1, [r7, #0]
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 fbe1 	bl	8005948 <USBD_CtlError>
              break;
 8005186:	e017      	b.n	80051b8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	885b      	ldrh	r3, [r3, #2]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d112      	bne.n	80051b6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005190:	7bbb      	ldrb	r3, [r7, #14]
 8005192:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005196:	2b00      	cmp	r3, #0
 8005198:	d004      	beq.n	80051a4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800519a:	7bbb      	ldrb	r3, [r7, #14]
 800519c:	4619      	mov	r1, r3
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f001 f8c1 	bl	8006326 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 fc97 	bl	8005ad8 <USBD_CtlSendStatus>
              }
              break;
 80051aa:	e004      	b.n	80051b6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80051ac:	6839      	ldr	r1, [r7, #0]
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 fbca 	bl	8005948 <USBD_CtlError>
              break;
 80051b4:	e000      	b.n	80051b8 <USBD_StdEPReq+0x158>
              break;
 80051b6:	bf00      	nop
          }
          break;
 80051b8:	e0aa      	b.n	8005310 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d002      	beq.n	80051ca <USBD_StdEPReq+0x16a>
 80051c4:	2b03      	cmp	r3, #3
 80051c6:	d032      	beq.n	800522e <USBD_StdEPReq+0x1ce>
 80051c8:	e097      	b.n	80052fa <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80051ca:	7bbb      	ldrb	r3, [r7, #14]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d007      	beq.n	80051e0 <USBD_StdEPReq+0x180>
 80051d0:	7bbb      	ldrb	r3, [r7, #14]
 80051d2:	2b80      	cmp	r3, #128	@ 0x80
 80051d4:	d004      	beq.n	80051e0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80051d6:	6839      	ldr	r1, [r7, #0]
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 fbb5 	bl	8005948 <USBD_CtlError>
                break;
 80051de:	e091      	b.n	8005304 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80051e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	da0b      	bge.n	8005200 <USBD_StdEPReq+0x1a0>
 80051e8:	7bbb      	ldrb	r3, [r7, #14]
 80051ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80051ee:	4613      	mov	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4413      	add	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	3310      	adds	r3, #16
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	4413      	add	r3, r2
 80051fc:	3304      	adds	r3, #4
 80051fe:	e00b      	b.n	8005218 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005200:	7bbb      	ldrb	r3, [r7, #14]
 8005202:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005206:	4613      	mov	r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	4413      	add	r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	4413      	add	r3, r2
 8005216:	3304      	adds	r3, #4
 8005218:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	2200      	movs	r2, #0
 800521e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	2202      	movs	r2, #2
 8005224:	4619      	mov	r1, r3
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 fbf8 	bl	8005a1c <USBD_CtlSendData>
              break;
 800522c:	e06a      	b.n	8005304 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800522e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005232:	2b00      	cmp	r3, #0
 8005234:	da11      	bge.n	800525a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005236:	7bbb      	ldrb	r3, [r7, #14]
 8005238:	f003 020f 	and.w	r2, r3, #15
 800523c:	6879      	ldr	r1, [r7, #4]
 800523e:	4613      	mov	r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	4413      	add	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	440b      	add	r3, r1
 8005248:	3318      	adds	r3, #24
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d117      	bne.n	8005280 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8005250:	6839      	ldr	r1, [r7, #0]
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 fb78 	bl	8005948 <USBD_CtlError>
                  break;
 8005258:	e054      	b.n	8005304 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800525a:	7bbb      	ldrb	r3, [r7, #14]
 800525c:	f003 020f 	and.w	r2, r3, #15
 8005260:	6879      	ldr	r1, [r7, #4]
 8005262:	4613      	mov	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4413      	add	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	440b      	add	r3, r1
 800526c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d104      	bne.n	8005280 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8005276:	6839      	ldr	r1, [r7, #0]
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 fb65 	bl	8005948 <USBD_CtlError>
                  break;
 800527e:	e041      	b.n	8005304 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005280:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005284:	2b00      	cmp	r3, #0
 8005286:	da0b      	bge.n	80052a0 <USBD_StdEPReq+0x240>
 8005288:	7bbb      	ldrb	r3, [r7, #14]
 800528a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800528e:	4613      	mov	r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	4413      	add	r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	3310      	adds	r3, #16
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	4413      	add	r3, r2
 800529c:	3304      	adds	r3, #4
 800529e:	e00b      	b.n	80052b8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80052a0:	7bbb      	ldrb	r3, [r7, #14]
 80052a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80052a6:	4613      	mov	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4413      	add	r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	4413      	add	r3, r2
 80052b6:	3304      	adds	r3, #4
 80052b8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80052ba:	7bbb      	ldrb	r3, [r7, #14]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d002      	beq.n	80052c6 <USBD_StdEPReq+0x266>
 80052c0:	7bbb      	ldrb	r3, [r7, #14]
 80052c2:	2b80      	cmp	r3, #128	@ 0x80
 80052c4:	d103      	bne.n	80052ce <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	2200      	movs	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]
 80052cc:	e00e      	b.n	80052ec <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80052ce:	7bbb      	ldrb	r3, [r7, #14]
 80052d0:	4619      	mov	r1, r3
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f001 f846 	bl	8006364 <USBD_LL_IsStallEP>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	2201      	movs	r2, #1
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	e002      	b.n	80052ec <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	2202      	movs	r2, #2
 80052f0:	4619      	mov	r1, r3
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 fb92 	bl	8005a1c <USBD_CtlSendData>
              break;
 80052f8:	e004      	b.n	8005304 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80052fa:	6839      	ldr	r1, [r7, #0]
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 fb23 	bl	8005948 <USBD_CtlError>
              break;
 8005302:	bf00      	nop
          }
          break;
 8005304:	e004      	b.n	8005310 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8005306:	6839      	ldr	r1, [r7, #0]
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 fb1d 	bl	8005948 <USBD_CtlError>
          break;
 800530e:	bf00      	nop
      }
      break;
 8005310:	e004      	b.n	800531c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8005312:	6839      	ldr	r1, [r7, #0]
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 fb17 	bl	8005948 <USBD_CtlError>
      break;
 800531a:	bf00      	nop
  }

  return ret;
 800531c:	7bfb      	ldrb	r3, [r7, #15]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
	...

08005328 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005332:	2300      	movs	r3, #0
 8005334:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005336:	2300      	movs	r3, #0
 8005338:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800533a:	2300      	movs	r3, #0
 800533c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	885b      	ldrh	r3, [r3, #2]
 8005342:	0a1b      	lsrs	r3, r3, #8
 8005344:	b29b      	uxth	r3, r3
 8005346:	3b01      	subs	r3, #1
 8005348:	2b06      	cmp	r3, #6
 800534a:	f200 8128 	bhi.w	800559e <USBD_GetDescriptor+0x276>
 800534e:	a201      	add	r2, pc, #4	@ (adr r2, 8005354 <USBD_GetDescriptor+0x2c>)
 8005350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005354:	08005371 	.word	0x08005371
 8005358:	08005389 	.word	0x08005389
 800535c:	080053c9 	.word	0x080053c9
 8005360:	0800559f 	.word	0x0800559f
 8005364:	0800559f 	.word	0x0800559f
 8005368:	0800553f 	.word	0x0800553f
 800536c:	0800556b 	.word	0x0800556b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	7c12      	ldrb	r2, [r2, #16]
 800537c:	f107 0108 	add.w	r1, r7, #8
 8005380:	4610      	mov	r0, r2
 8005382:	4798      	blx	r3
 8005384:	60f8      	str	r0, [r7, #12]
      break;
 8005386:	e112      	b.n	80055ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	7c1b      	ldrb	r3, [r3, #16]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10d      	bne.n	80053ac <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005398:	f107 0208 	add.w	r2, r7, #8
 800539c:	4610      	mov	r0, r2
 800539e:	4798      	blx	r3
 80053a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	3301      	adds	r3, #1
 80053a6:	2202      	movs	r2, #2
 80053a8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80053aa:	e100      	b.n	80055ae <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80053b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b4:	f107 0208 	add.w	r2, r7, #8
 80053b8:	4610      	mov	r0, r2
 80053ba:	4798      	blx	r3
 80053bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	3301      	adds	r3, #1
 80053c2:	2202      	movs	r2, #2
 80053c4:	701a      	strb	r2, [r3, #0]
      break;
 80053c6:	e0f2      	b.n	80055ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	885b      	ldrh	r3, [r3, #2]
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b05      	cmp	r3, #5
 80053d0:	f200 80ac 	bhi.w	800552c <USBD_GetDescriptor+0x204>
 80053d4:	a201      	add	r2, pc, #4	@ (adr r2, 80053dc <USBD_GetDescriptor+0xb4>)
 80053d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053da:	bf00      	nop
 80053dc:	080053f5 	.word	0x080053f5
 80053e0:	08005429 	.word	0x08005429
 80053e4:	0800545d 	.word	0x0800545d
 80053e8:	08005491 	.word	0x08005491
 80053ec:	080054c5 	.word	0x080054c5
 80053f0:	080054f9 	.word	0x080054f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00b      	beq.n	8005418 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	7c12      	ldrb	r2, [r2, #16]
 800540c:	f107 0108 	add.w	r1, r7, #8
 8005410:	4610      	mov	r0, r2
 8005412:	4798      	blx	r3
 8005414:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005416:	e091      	b.n	800553c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005418:	6839      	ldr	r1, [r7, #0]
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 fa94 	bl	8005948 <USBD_CtlError>
            err++;
 8005420:	7afb      	ldrb	r3, [r7, #11]
 8005422:	3301      	adds	r3, #1
 8005424:	72fb      	strb	r3, [r7, #11]
          break;
 8005426:	e089      	b.n	800553c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00b      	beq.n	800544c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	7c12      	ldrb	r2, [r2, #16]
 8005440:	f107 0108 	add.w	r1, r7, #8
 8005444:	4610      	mov	r0, r2
 8005446:	4798      	blx	r3
 8005448:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800544a:	e077      	b.n	800553c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800544c:	6839      	ldr	r1, [r7, #0]
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 fa7a 	bl	8005948 <USBD_CtlError>
            err++;
 8005454:	7afb      	ldrb	r3, [r7, #11]
 8005456:	3301      	adds	r3, #1
 8005458:	72fb      	strb	r3, [r7, #11]
          break;
 800545a:	e06f      	b.n	800553c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00b      	beq.n	8005480 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	7c12      	ldrb	r2, [r2, #16]
 8005474:	f107 0108 	add.w	r1, r7, #8
 8005478:	4610      	mov	r0, r2
 800547a:	4798      	blx	r3
 800547c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800547e:	e05d      	b.n	800553c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005480:	6839      	ldr	r1, [r7, #0]
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 fa60 	bl	8005948 <USBD_CtlError>
            err++;
 8005488:	7afb      	ldrb	r3, [r7, #11]
 800548a:	3301      	adds	r3, #1
 800548c:	72fb      	strb	r3, [r7, #11]
          break;
 800548e:	e055      	b.n	800553c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00b      	beq.n	80054b4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	7c12      	ldrb	r2, [r2, #16]
 80054a8:	f107 0108 	add.w	r1, r7, #8
 80054ac:	4610      	mov	r0, r2
 80054ae:	4798      	blx	r3
 80054b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80054b2:	e043      	b.n	800553c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80054b4:	6839      	ldr	r1, [r7, #0]
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fa46 	bl	8005948 <USBD_CtlError>
            err++;
 80054bc:	7afb      	ldrb	r3, [r7, #11]
 80054be:	3301      	adds	r3, #1
 80054c0:	72fb      	strb	r3, [r7, #11]
          break;
 80054c2:	e03b      	b.n	800553c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00b      	beq.n	80054e8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	7c12      	ldrb	r2, [r2, #16]
 80054dc:	f107 0108 	add.w	r1, r7, #8
 80054e0:	4610      	mov	r0, r2
 80054e2:	4798      	blx	r3
 80054e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80054e6:	e029      	b.n	800553c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80054e8:	6839      	ldr	r1, [r7, #0]
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 fa2c 	bl	8005948 <USBD_CtlError>
            err++;
 80054f0:	7afb      	ldrb	r3, [r7, #11]
 80054f2:	3301      	adds	r3, #1
 80054f4:	72fb      	strb	r3, [r7, #11]
          break;
 80054f6:	e021      	b.n	800553c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00b      	beq.n	800551c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	7c12      	ldrb	r2, [r2, #16]
 8005510:	f107 0108 	add.w	r1, r7, #8
 8005514:	4610      	mov	r0, r2
 8005516:	4798      	blx	r3
 8005518:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800551a:	e00f      	b.n	800553c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800551c:	6839      	ldr	r1, [r7, #0]
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 fa12 	bl	8005948 <USBD_CtlError>
            err++;
 8005524:	7afb      	ldrb	r3, [r7, #11]
 8005526:	3301      	adds	r3, #1
 8005528:	72fb      	strb	r3, [r7, #11]
          break;
 800552a:	e007      	b.n	800553c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800552c:	6839      	ldr	r1, [r7, #0]
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 fa0a 	bl	8005948 <USBD_CtlError>
          err++;
 8005534:	7afb      	ldrb	r3, [r7, #11]
 8005536:	3301      	adds	r3, #1
 8005538:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800553a:	e038      	b.n	80055ae <USBD_GetDescriptor+0x286>
 800553c:	e037      	b.n	80055ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	7c1b      	ldrb	r3, [r3, #16]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d109      	bne.n	800555a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800554c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800554e:	f107 0208 	add.w	r2, r7, #8
 8005552:	4610      	mov	r0, r2
 8005554:	4798      	blx	r3
 8005556:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005558:	e029      	b.n	80055ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800555a:	6839      	ldr	r1, [r7, #0]
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 f9f3 	bl	8005948 <USBD_CtlError>
        err++;
 8005562:	7afb      	ldrb	r3, [r7, #11]
 8005564:	3301      	adds	r3, #1
 8005566:	72fb      	strb	r3, [r7, #11]
      break;
 8005568:	e021      	b.n	80055ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	7c1b      	ldrb	r3, [r3, #16]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10d      	bne.n	800558e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800557a:	f107 0208 	add.w	r2, r7, #8
 800557e:	4610      	mov	r0, r2
 8005580:	4798      	blx	r3
 8005582:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	3301      	adds	r3, #1
 8005588:	2207      	movs	r2, #7
 800558a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800558c:	e00f      	b.n	80055ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800558e:	6839      	ldr	r1, [r7, #0]
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 f9d9 	bl	8005948 <USBD_CtlError>
        err++;
 8005596:	7afb      	ldrb	r3, [r7, #11]
 8005598:	3301      	adds	r3, #1
 800559a:	72fb      	strb	r3, [r7, #11]
      break;
 800559c:	e007      	b.n	80055ae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800559e:	6839      	ldr	r1, [r7, #0]
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 f9d1 	bl	8005948 <USBD_CtlError>
      err++;
 80055a6:	7afb      	ldrb	r3, [r7, #11]
 80055a8:	3301      	adds	r3, #1
 80055aa:	72fb      	strb	r3, [r7, #11]
      break;
 80055ac:	bf00      	nop
  }

  if (err != 0U)
 80055ae:	7afb      	ldrb	r3, [r7, #11]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d11c      	bne.n	80055ee <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80055b4:	893b      	ldrh	r3, [r7, #8]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d011      	beq.n	80055de <USBD_GetDescriptor+0x2b6>
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	88db      	ldrh	r3, [r3, #6]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00d      	beq.n	80055de <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	88da      	ldrh	r2, [r3, #6]
 80055c6:	893b      	ldrh	r3, [r7, #8]
 80055c8:	4293      	cmp	r3, r2
 80055ca:	bf28      	it	cs
 80055cc:	4613      	movcs	r3, r2
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80055d2:	893b      	ldrh	r3, [r7, #8]
 80055d4:	461a      	mov	r2, r3
 80055d6:	68f9      	ldr	r1, [r7, #12]
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 fa1f 	bl	8005a1c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	88db      	ldrh	r3, [r3, #6]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d104      	bne.n	80055f0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 fa76 	bl	8005ad8 <USBD_CtlSendStatus>
 80055ec:	e000      	b.n	80055f0 <USBD_GetDescriptor+0x2c8>
    return;
 80055ee:	bf00      	nop
    }
  }
}
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop

080055f8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	889b      	ldrh	r3, [r3, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d130      	bne.n	800566c <USBD_SetAddress+0x74>
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	88db      	ldrh	r3, [r3, #6]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d12c      	bne.n	800566c <USBD_SetAddress+0x74>
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	885b      	ldrh	r3, [r3, #2]
 8005616:	2b7f      	cmp	r3, #127	@ 0x7f
 8005618:	d828      	bhi.n	800566c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	885b      	ldrh	r3, [r3, #2]
 800561e:	b2db      	uxtb	r3, r3
 8005620:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005624:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800562c:	2b03      	cmp	r3, #3
 800562e:	d104      	bne.n	800563a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005630:	6839      	ldr	r1, [r7, #0]
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f988 	bl	8005948 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005638:	e01d      	b.n	8005676 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	7bfa      	ldrb	r2, [r7, #15]
 800563e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005642:	7bfb      	ldrb	r3, [r7, #15]
 8005644:	4619      	mov	r1, r3
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 feb7 	bl	80063ba <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 fa43 	bl	8005ad8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005652:	7bfb      	ldrb	r3, [r7, #15]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d004      	beq.n	8005662 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2202      	movs	r2, #2
 800565c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005660:	e009      	b.n	8005676 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800566a:	e004      	b.n	8005676 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800566c:	6839      	ldr	r1, [r7, #0]
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f96a 	bl	8005948 <USBD_CtlError>
  }
}
 8005674:	bf00      	nop
 8005676:	bf00      	nop
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
	...

08005680 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	885b      	ldrh	r3, [r3, #2]
 800568e:	b2da      	uxtb	r2, r3
 8005690:	4b41      	ldr	r3, [pc, #260]	@ (8005798 <USBD_SetConfig+0x118>)
 8005692:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005694:	4b40      	ldr	r3, [pc, #256]	@ (8005798 <USBD_SetConfig+0x118>)
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d904      	bls.n	80056a6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800569c:	6839      	ldr	r1, [r7, #0]
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f952 	bl	8005948 <USBD_CtlError>
 80056a4:	e075      	b.n	8005792 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d002      	beq.n	80056b6 <USBD_SetConfig+0x36>
 80056b0:	2b03      	cmp	r3, #3
 80056b2:	d023      	beq.n	80056fc <USBD_SetConfig+0x7c>
 80056b4:	e062      	b.n	800577c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80056b6:	4b38      	ldr	r3, [pc, #224]	@ (8005798 <USBD_SetConfig+0x118>)
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d01a      	beq.n	80056f4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80056be:	4b36      	ldr	r3, [pc, #216]	@ (8005798 <USBD_SetConfig+0x118>)
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	461a      	mov	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2203      	movs	r2, #3
 80056cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80056d0:	4b31      	ldr	r3, [pc, #196]	@ (8005798 <USBD_SetConfig+0x118>)
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	4619      	mov	r1, r3
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7ff f9af 	bl	8004a3a <USBD_SetClassConfig>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d104      	bne.n	80056ec <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80056e2:	6839      	ldr	r1, [r7, #0]
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 f92f 	bl	8005948 <USBD_CtlError>
            return;
 80056ea:	e052      	b.n	8005792 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 f9f3 	bl	8005ad8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80056f2:	e04e      	b.n	8005792 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 f9ef 	bl	8005ad8 <USBD_CtlSendStatus>
        break;
 80056fa:	e04a      	b.n	8005792 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80056fc:	4b26      	ldr	r3, [pc, #152]	@ (8005798 <USBD_SetConfig+0x118>)
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d112      	bne.n	800572a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2202      	movs	r2, #2
 8005708:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800570c:	4b22      	ldr	r3, [pc, #136]	@ (8005798 <USBD_SetConfig+0x118>)
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	461a      	mov	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005716:	4b20      	ldr	r3, [pc, #128]	@ (8005798 <USBD_SetConfig+0x118>)
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	4619      	mov	r1, r3
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f7ff f9ab 	bl	8004a78 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f9d8 	bl	8005ad8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005728:	e033      	b.n	8005792 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800572a:	4b1b      	ldr	r3, [pc, #108]	@ (8005798 <USBD_SetConfig+0x118>)
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	461a      	mov	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	429a      	cmp	r2, r3
 8005736:	d01d      	beq.n	8005774 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	b2db      	uxtb	r3, r3
 800573e:	4619      	mov	r1, r3
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f7ff f999 	bl	8004a78 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005746:	4b14      	ldr	r3, [pc, #80]	@ (8005798 <USBD_SetConfig+0x118>)
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	461a      	mov	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005750:	4b11      	ldr	r3, [pc, #68]	@ (8005798 <USBD_SetConfig+0x118>)
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	4619      	mov	r1, r3
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7ff f96f 	bl	8004a3a <USBD_SetClassConfig>
 800575c:	4603      	mov	r3, r0
 800575e:	2b02      	cmp	r3, #2
 8005760:	d104      	bne.n	800576c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8005762:	6839      	ldr	r1, [r7, #0]
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 f8ef 	bl	8005948 <USBD_CtlError>
            return;
 800576a:	e012      	b.n	8005792 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 f9b3 	bl	8005ad8 <USBD_CtlSendStatus>
        break;
 8005772:	e00e      	b.n	8005792 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 f9af 	bl	8005ad8 <USBD_CtlSendStatus>
        break;
 800577a:	e00a      	b.n	8005792 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800577c:	6839      	ldr	r1, [r7, #0]
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f8e2 	bl	8005948 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005784:	4b04      	ldr	r3, [pc, #16]	@ (8005798 <USBD_SetConfig+0x118>)
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	4619      	mov	r1, r3
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7ff f974 	bl	8004a78 <USBD_ClrClassConfig>
        break;
 8005790:	bf00      	nop
    }
  }
}
 8005792:	3708      	adds	r7, #8
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	200001fc 	.word	0x200001fc

0800579c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	88db      	ldrh	r3, [r3, #6]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d004      	beq.n	80057b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80057ae:	6839      	ldr	r1, [r7, #0]
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 f8c9 	bl	8005948 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80057b6:	e022      	b.n	80057fe <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80057be:	2b02      	cmp	r3, #2
 80057c0:	dc02      	bgt.n	80057c8 <USBD_GetConfig+0x2c>
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	dc03      	bgt.n	80057ce <USBD_GetConfig+0x32>
 80057c6:	e015      	b.n	80057f4 <USBD_GetConfig+0x58>
 80057c8:	2b03      	cmp	r3, #3
 80057ca:	d00b      	beq.n	80057e4 <USBD_GetConfig+0x48>
 80057cc:	e012      	b.n	80057f4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	3308      	adds	r3, #8
 80057d8:	2201      	movs	r2, #1
 80057da:	4619      	mov	r1, r3
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 f91d 	bl	8005a1c <USBD_CtlSendData>
        break;
 80057e2:	e00c      	b.n	80057fe <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	3304      	adds	r3, #4
 80057e8:	2201      	movs	r2, #1
 80057ea:	4619      	mov	r1, r3
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 f915 	bl	8005a1c <USBD_CtlSendData>
        break;
 80057f2:	e004      	b.n	80057fe <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80057f4:	6839      	ldr	r1, [r7, #0]
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f8a6 	bl	8005948 <USBD_CtlError>
        break;
 80057fc:	bf00      	nop
}
 80057fe:	bf00      	nop
 8005800:	3708      	adds	r7, #8
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005806:	b580      	push	{r7, lr}
 8005808:	b082      	sub	sp, #8
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
 800580e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005816:	3b01      	subs	r3, #1
 8005818:	2b02      	cmp	r3, #2
 800581a:	d81e      	bhi.n	800585a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	88db      	ldrh	r3, [r3, #6]
 8005820:	2b02      	cmp	r3, #2
 8005822:	d004      	beq.n	800582e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8005824:	6839      	ldr	r1, [r7, #0]
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f88e 	bl	8005948 <USBD_CtlError>
        break;
 800582c:	e01a      	b.n	8005864 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2201      	movs	r2, #1
 8005832:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800583a:	2b00      	cmp	r3, #0
 800583c:	d005      	beq.n	800584a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	f043 0202 	orr.w	r2, r3, #2
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	330c      	adds	r3, #12
 800584e:	2202      	movs	r2, #2
 8005850:	4619      	mov	r1, r3
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f8e2 	bl	8005a1c <USBD_CtlSendData>
      break;
 8005858:	e004      	b.n	8005864 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800585a:	6839      	ldr	r1, [r7, #0]
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 f873 	bl	8005948 <USBD_CtlError>
      break;
 8005862:	bf00      	nop
  }
}
 8005864:	bf00      	nop
 8005866:	3708      	adds	r7, #8
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	885b      	ldrh	r3, [r3, #2]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d106      	bne.n	800588c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2201      	movs	r2, #1
 8005882:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f926 	bl	8005ad8 <USBD_CtlSendStatus>
  }
}
 800588c:	bf00      	nop
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058a4:	3b01      	subs	r3, #1
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d80b      	bhi.n	80058c2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	885b      	ldrh	r3, [r3, #2]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d10c      	bne.n	80058cc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f90c 	bl	8005ad8 <USBD_CtlSendStatus>
      }
      break;
 80058c0:	e004      	b.n	80058cc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80058c2:	6839      	ldr	r1, [r7, #0]
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 f83f 	bl	8005948 <USBD_CtlError>
      break;
 80058ca:	e000      	b.n	80058ce <USBD_ClrFeature+0x3a>
      break;
 80058cc:	bf00      	nop
  }
}
 80058ce:	bf00      	nop
 80058d0:	3708      	adds	r7, #8
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b083      	sub	sp, #12
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
 80058de:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	781a      	ldrb	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	785a      	ldrb	r2, [r3, #1]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	3302      	adds	r3, #2
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	461a      	mov	r2, r3
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	3303      	adds	r3, #3
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	021b      	lsls	r3, r3, #8
 8005900:	b29b      	uxth	r3, r3
 8005902:	4413      	add	r3, r2
 8005904:	b29a      	uxth	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	3304      	adds	r3, #4
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	461a      	mov	r2, r3
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	3305      	adds	r3, #5
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	021b      	lsls	r3, r3, #8
 800591a:	b29b      	uxth	r3, r3
 800591c:	4413      	add	r3, r2
 800591e:	b29a      	uxth	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	3306      	adds	r3, #6
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	461a      	mov	r2, r3
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	3307      	adds	r3, #7
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	021b      	lsls	r3, r3, #8
 8005934:	b29b      	uxth	r3, r3
 8005936:	4413      	add	r3, r2
 8005938:	b29a      	uxth	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	80da      	strh	r2, [r3, #6]

}
 800593e:	bf00      	nop
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	bc80      	pop	{r7}
 8005946:	4770      	bx	lr

08005948 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8005952:	2180      	movs	r1, #128	@ 0x80
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 fcc7 	bl	80062e8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800595a:	2100      	movs	r1, #0
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 fcc3 	bl	80062e8 <USBD_LL_StallEP>
}
 8005962:	bf00      	nop
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b086      	sub	sp, #24
 800596e:	af00      	add	r7, sp, #0
 8005970:	60f8      	str	r0, [r7, #12]
 8005972:	60b9      	str	r1, [r7, #8]
 8005974:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005976:	2300      	movs	r3, #0
 8005978:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d032      	beq.n	80059e6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f000 f834 	bl	80059ee <USBD_GetLen>
 8005986:	4603      	mov	r3, r0
 8005988:	3301      	adds	r3, #1
 800598a:	b29b      	uxth	r3, r3
 800598c:	005b      	lsls	r3, r3, #1
 800598e:	b29a      	uxth	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005994:	7dfb      	ldrb	r3, [r7, #23]
 8005996:	1c5a      	adds	r2, r3, #1
 8005998:	75fa      	strb	r2, [r7, #23]
 800599a:	461a      	mov	r2, r3
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	4413      	add	r3, r2
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	7812      	ldrb	r2, [r2, #0]
 80059a4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80059a6:	7dfb      	ldrb	r3, [r7, #23]
 80059a8:	1c5a      	adds	r2, r3, #1
 80059aa:	75fa      	strb	r2, [r7, #23]
 80059ac:	461a      	mov	r2, r3
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	4413      	add	r3, r2
 80059b2:	2203      	movs	r2, #3
 80059b4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80059b6:	e012      	b.n	80059de <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	1c5a      	adds	r2, r3, #1
 80059bc:	60fa      	str	r2, [r7, #12]
 80059be:	7dfa      	ldrb	r2, [r7, #23]
 80059c0:	1c51      	adds	r1, r2, #1
 80059c2:	75f9      	strb	r1, [r7, #23]
 80059c4:	4611      	mov	r1, r2
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	440a      	add	r2, r1
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80059ce:	7dfb      	ldrb	r3, [r7, #23]
 80059d0:	1c5a      	adds	r2, r3, #1
 80059d2:	75fa      	strb	r2, [r7, #23]
 80059d4:	461a      	mov	r2, r3
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	4413      	add	r3, r2
 80059da:	2200      	movs	r2, #0
 80059dc:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1e8      	bne.n	80059b8 <USBD_GetString+0x4e>
    }
  }
}
 80059e6:	bf00      	nop
 80059e8:	3718      	adds	r7, #24
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}

080059ee <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80059ee:	b480      	push	{r7}
 80059f0:	b085      	sub	sp, #20
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80059f6:	2300      	movs	r3, #0
 80059f8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80059fa:	e005      	b.n	8005a08 <USBD_GetLen+0x1a>
  {
    len++;
 80059fc:	7bfb      	ldrb	r3, [r7, #15]
 80059fe:	3301      	adds	r3, #1
 8005a00:	73fb      	strb	r3, [r7, #15]
    buf++;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	3301      	adds	r3, #1
 8005a06:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1f5      	bne.n	80059fc <USBD_GetLen+0xe>
  }

  return len;
 8005a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3714      	adds	r7, #20
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bc80      	pop	{r7}
 8005a1a:	4770      	bx	lr

08005a1c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	4613      	mov	r3, r2
 8005a28:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2202      	movs	r2, #2
 8005a2e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8005a32:	88fa      	ldrh	r2, [r7, #6]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005a38:	88fa      	ldrh	r2, [r7, #6]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005a3e:	88fb      	ldrh	r3, [r7, #6]
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	2100      	movs	r1, #0
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f000 fcd7 	bl	80063f8 <USBD_LL_Transmit>

  return USBD_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005a62:	88fb      	ldrh	r3, [r7, #6]
 8005a64:	68ba      	ldr	r2, [r7, #8]
 8005a66:	2100      	movs	r1, #0
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f000 fcc5 	bl	80063f8 <USBD_LL_Transmit>

  return USBD_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	4613      	mov	r3, r2
 8005a84:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2203      	movs	r2, #3
 8005a8a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8005a8e:	88fa      	ldrh	r2, [r7, #6]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8005a96:	88fa      	ldrh	r2, [r7, #6]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005a9e:	88fb      	ldrh	r3, [r7, #6]
 8005aa0:	68ba      	ldr	r2, [r7, #8]
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f000 fcca 	bl	800643e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	4613      	mov	r3, r2
 8005ac0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005ac2:	88fb      	ldrh	r3, [r7, #6]
 8005ac4:	68ba      	ldr	r2, [r7, #8]
 8005ac6:	2100      	movs	r1, #0
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	f000 fcb8 	bl	800643e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3710      	adds	r7, #16
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2204      	movs	r2, #4
 8005ae4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005ae8:	2300      	movs	r3, #0
 8005aea:	2200      	movs	r2, #0
 8005aec:	2100      	movs	r1, #0
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fc82 	bl	80063f8 <USBD_LL_Transmit>

  return USBD_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3708      	adds	r7, #8
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b082      	sub	sp, #8
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2205      	movs	r2, #5
 8005b0a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b0e:	2300      	movs	r3, #0
 8005b10:	2200      	movs	r2, #0
 8005b12:	2100      	movs	r1, #0
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 fc92 	bl	800643e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3708      	adds	r7, #8
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	4912      	ldr	r1, [pc, #72]	@ (8005b74 <MX_USB_DEVICE_Init+0x50>)
 8005b2c:	4812      	ldr	r0, [pc, #72]	@ (8005b78 <MX_USB_DEVICE_Init+0x54>)
 8005b2e:	f7fe ff2a 	bl	8004986 <USBD_Init>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005b38:	f7fa fe38 	bl	80007ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005b3c:	490f      	ldr	r1, [pc, #60]	@ (8005b7c <MX_USB_DEVICE_Init+0x58>)
 8005b3e:	480e      	ldr	r0, [pc, #56]	@ (8005b78 <MX_USB_DEVICE_Init+0x54>)
 8005b40:	f7fe ff4c 	bl	80049dc <USBD_RegisterClass>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d001      	beq.n	8005b4e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005b4a:	f7fa fe2f 	bl	80007ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005b4e:	490c      	ldr	r1, [pc, #48]	@ (8005b80 <MX_USB_DEVICE_Init+0x5c>)
 8005b50:	4809      	ldr	r0, [pc, #36]	@ (8005b78 <MX_USB_DEVICE_Init+0x54>)
 8005b52:	f7fe fe7d 	bl	8004850 <USBD_CDC_RegisterInterface>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d001      	beq.n	8005b60 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005b5c:	f7fa fe26 	bl	80007ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005b60:	4805      	ldr	r0, [pc, #20]	@ (8005b78 <MX_USB_DEVICE_Init+0x54>)
 8005b62:	f7fe ff54 	bl	8004a0e <USBD_Start>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005b6c:	f7fa fe1e 	bl	80007ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005b70:	bf00      	nop
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	2000012c 	.word	0x2000012c
 8005b78:	20000200 	.word	0x20000200
 8005b7c:	20000018 	.word	0x20000018
 8005b80:	2000011c 	.word	0x2000011c

08005b84 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005b88:	2200      	movs	r2, #0
 8005b8a:	4905      	ldr	r1, [pc, #20]	@ (8005ba0 <CDC_Init_FS+0x1c>)
 8005b8c:	4805      	ldr	r0, [pc, #20]	@ (8005ba4 <CDC_Init_FS+0x20>)
 8005b8e:	f7fe fe75 	bl	800487c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005b92:	4905      	ldr	r1, [pc, #20]	@ (8005ba8 <CDC_Init_FS+0x24>)
 8005b94:	4803      	ldr	r0, [pc, #12]	@ (8005ba4 <CDC_Init_FS+0x20>)
 8005b96:	f7fe fe8a 	bl	80048ae <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005b9a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	20000cc4 	.word	0x20000cc4
 8005ba4:	20000200 	.word	0x20000200
 8005ba8:	200004c4 	.word	0x200004c4

08005bac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005bac:	b480      	push	{r7}
 8005bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005bb0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bc80      	pop	{r7}
 8005bb8:	4770      	bx	lr
	...

08005bbc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	6039      	str	r1, [r7, #0]
 8005bc6:	71fb      	strb	r3, [r7, #7]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005bcc:	79fb      	ldrb	r3, [r7, #7]
 8005bce:	2b23      	cmp	r3, #35	@ 0x23
 8005bd0:	d84a      	bhi.n	8005c68 <CDC_Control_FS+0xac>
 8005bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8005bd8 <CDC_Control_FS+0x1c>)
 8005bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd8:	08005c69 	.word	0x08005c69
 8005bdc:	08005c69 	.word	0x08005c69
 8005be0:	08005c69 	.word	0x08005c69
 8005be4:	08005c69 	.word	0x08005c69
 8005be8:	08005c69 	.word	0x08005c69
 8005bec:	08005c69 	.word	0x08005c69
 8005bf0:	08005c69 	.word	0x08005c69
 8005bf4:	08005c69 	.word	0x08005c69
 8005bf8:	08005c69 	.word	0x08005c69
 8005bfc:	08005c69 	.word	0x08005c69
 8005c00:	08005c69 	.word	0x08005c69
 8005c04:	08005c69 	.word	0x08005c69
 8005c08:	08005c69 	.word	0x08005c69
 8005c0c:	08005c69 	.word	0x08005c69
 8005c10:	08005c69 	.word	0x08005c69
 8005c14:	08005c69 	.word	0x08005c69
 8005c18:	08005c69 	.word	0x08005c69
 8005c1c:	08005c69 	.word	0x08005c69
 8005c20:	08005c69 	.word	0x08005c69
 8005c24:	08005c69 	.word	0x08005c69
 8005c28:	08005c69 	.word	0x08005c69
 8005c2c:	08005c69 	.word	0x08005c69
 8005c30:	08005c69 	.word	0x08005c69
 8005c34:	08005c69 	.word	0x08005c69
 8005c38:	08005c69 	.word	0x08005c69
 8005c3c:	08005c69 	.word	0x08005c69
 8005c40:	08005c69 	.word	0x08005c69
 8005c44:	08005c69 	.word	0x08005c69
 8005c48:	08005c69 	.word	0x08005c69
 8005c4c:	08005c69 	.word	0x08005c69
 8005c50:	08005c69 	.word	0x08005c69
 8005c54:	08005c69 	.word	0x08005c69
 8005c58:	08005c69 	.word	0x08005c69
 8005c5c:	08005c69 	.word	0x08005c69
 8005c60:	08005c69 	.word	0x08005c69
 8005c64:	08005c69 	.word	0x08005c69
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005c68:	bf00      	nop
  }

  return (USBD_OK);
 8005c6a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bc80      	pop	{r7}
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop

08005c78 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005c82:	6879      	ldr	r1, [r7, #4]
 8005c84:	4805      	ldr	r0, [pc, #20]	@ (8005c9c <CDC_Receive_FS+0x24>)
 8005c86:	f7fe fe12 	bl	80048ae <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005c8a:	4804      	ldr	r0, [pc, #16]	@ (8005c9c <CDC_Receive_FS+0x24>)
 8005c8c:	f7fe fe51 	bl	8004932 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8005c90:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	20000200 	.word	0x20000200

08005ca0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	460b      	mov	r3, r1
 8005caa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8005cac:	2300      	movs	r3, #0
 8005cae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005cb0:	4b0d      	ldr	r3, [pc, #52]	@ (8005ce8 <CDC_Transmit_FS+0x48>)
 8005cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cb6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d001      	beq.n	8005cc6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e00b      	b.n	8005cde <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005cc6:	887b      	ldrh	r3, [r7, #2]
 8005cc8:	461a      	mov	r2, r3
 8005cca:	6879      	ldr	r1, [r7, #4]
 8005ccc:	4806      	ldr	r0, [pc, #24]	@ (8005ce8 <CDC_Transmit_FS+0x48>)
 8005cce:	f7fe fdd5 	bl	800487c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005cd2:	4805      	ldr	r0, [pc, #20]	@ (8005ce8 <CDC_Transmit_FS+0x48>)
 8005cd4:	f7fe fdfe 	bl	80048d4 <USBD_CDC_TransmitPacket>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	20000200 	.word	0x20000200

08005cec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	6039      	str	r1, [r7, #0]
 8005cf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	2212      	movs	r2, #18
 8005cfc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005cfe:	4b03      	ldr	r3, [pc, #12]	@ (8005d0c <USBD_FS_DeviceDescriptor+0x20>)
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bc80      	pop	{r7}
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	20000148 	.word	0x20000148

08005d10 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	4603      	mov	r3, r0
 8005d18:	6039      	str	r1, [r7, #0]
 8005d1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	2204      	movs	r2, #4
 8005d20:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005d22:	4b03      	ldr	r3, [pc, #12]	@ (8005d30 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bc80      	pop	{r7}
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	2000015c 	.word	0x2000015c

08005d34 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	6039      	str	r1, [r7, #0]
 8005d3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005d40:	79fb      	ldrb	r3, [r7, #7]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d105      	bne.n	8005d52 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	4907      	ldr	r1, [pc, #28]	@ (8005d68 <USBD_FS_ProductStrDescriptor+0x34>)
 8005d4a:	4808      	ldr	r0, [pc, #32]	@ (8005d6c <USBD_FS_ProductStrDescriptor+0x38>)
 8005d4c:	f7ff fe0d 	bl	800596a <USBD_GetString>
 8005d50:	e004      	b.n	8005d5c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005d52:	683a      	ldr	r2, [r7, #0]
 8005d54:	4904      	ldr	r1, [pc, #16]	@ (8005d68 <USBD_FS_ProductStrDescriptor+0x34>)
 8005d56:	4805      	ldr	r0, [pc, #20]	@ (8005d6c <USBD_FS_ProductStrDescriptor+0x38>)
 8005d58:	f7ff fe07 	bl	800596a <USBD_GetString>
  }
  return USBD_StrDesc;
 8005d5c:	4b02      	ldr	r3, [pc, #8]	@ (8005d68 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3708      	adds	r7, #8
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	200014c4 	.word	0x200014c4
 8005d6c:	08007604 	.word	0x08007604

08005d70 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	4603      	mov	r3, r0
 8005d78:	6039      	str	r1, [r7, #0]
 8005d7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005d7c:	683a      	ldr	r2, [r7, #0]
 8005d7e:	4904      	ldr	r1, [pc, #16]	@ (8005d90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005d80:	4804      	ldr	r0, [pc, #16]	@ (8005d94 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005d82:	f7ff fdf2 	bl	800596a <USBD_GetString>
  return USBD_StrDesc;
 8005d86:	4b02      	ldr	r3, [pc, #8]	@ (8005d90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3708      	adds	r7, #8
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	200014c4 	.word	0x200014c4
 8005d94:	0800761c 	.word	0x0800761c

08005d98 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	4603      	mov	r3, r0
 8005da0:	6039      	str	r1, [r7, #0]
 8005da2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	221a      	movs	r2, #26
 8005da8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005daa:	f000 f843 	bl	8005e34 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005dae:	4b02      	ldr	r3, [pc, #8]	@ (8005db8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3708      	adds	r7, #8
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	20000160 	.word	0x20000160

08005dbc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	6039      	str	r1, [r7, #0]
 8005dc6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005dc8:	79fb      	ldrb	r3, [r7, #7]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d105      	bne.n	8005dda <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	4907      	ldr	r1, [pc, #28]	@ (8005df0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005dd2:	4808      	ldr	r0, [pc, #32]	@ (8005df4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005dd4:	f7ff fdc9 	bl	800596a <USBD_GetString>
 8005dd8:	e004      	b.n	8005de4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	4904      	ldr	r1, [pc, #16]	@ (8005df0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005dde:	4805      	ldr	r0, [pc, #20]	@ (8005df4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005de0:	f7ff fdc3 	bl	800596a <USBD_GetString>
  }
  return USBD_StrDesc;
 8005de4:	4b02      	ldr	r3, [pc, #8]	@ (8005df0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	200014c4 	.word	0x200014c4
 8005df4:	08007630 	.word	0x08007630

08005df8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	4603      	mov	r3, r0
 8005e00:	6039      	str	r1, [r7, #0]
 8005e02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005e04:	79fb      	ldrb	r3, [r7, #7]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d105      	bne.n	8005e16 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005e0a:	683a      	ldr	r2, [r7, #0]
 8005e0c:	4907      	ldr	r1, [pc, #28]	@ (8005e2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005e0e:	4808      	ldr	r0, [pc, #32]	@ (8005e30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005e10:	f7ff fdab 	bl	800596a <USBD_GetString>
 8005e14:	e004      	b.n	8005e20 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	4904      	ldr	r1, [pc, #16]	@ (8005e2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005e1a:	4805      	ldr	r0, [pc, #20]	@ (8005e30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005e1c:	f7ff fda5 	bl	800596a <USBD_GetString>
  }
  return USBD_StrDesc;
 8005e20:	4b02      	ldr	r3, [pc, #8]	@ (8005e2c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	200014c4 	.word	0x200014c4
 8005e30:	0800763c 	.word	0x0800763c

08005e34 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005e3a:	4b0f      	ldr	r3, [pc, #60]	@ (8005e78 <Get_SerialNum+0x44>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005e40:	4b0e      	ldr	r3, [pc, #56]	@ (8005e7c <Get_SerialNum+0x48>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005e46:	4b0e      	ldr	r3, [pc, #56]	@ (8005e80 <Get_SerialNum+0x4c>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4413      	add	r3, r2
 8005e52:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d009      	beq.n	8005e6e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005e5a:	2208      	movs	r2, #8
 8005e5c:	4909      	ldr	r1, [pc, #36]	@ (8005e84 <Get_SerialNum+0x50>)
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f000 f814 	bl	8005e8c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005e64:	2204      	movs	r2, #4
 8005e66:	4908      	ldr	r1, [pc, #32]	@ (8005e88 <Get_SerialNum+0x54>)
 8005e68:	68b8      	ldr	r0, [r7, #8]
 8005e6a:	f000 f80f 	bl	8005e8c <IntToUnicode>
  }
}
 8005e6e:	bf00      	nop
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	1fff7a10 	.word	0x1fff7a10
 8005e7c:	1fff7a14 	.word	0x1fff7a14
 8005e80:	1fff7a18 	.word	0x1fff7a18
 8005e84:	20000162 	.word	0x20000162
 8005e88:	20000172 	.word	0x20000172

08005e8c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b087      	sub	sp, #28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	4613      	mov	r3, r2
 8005e98:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	75fb      	strb	r3, [r7, #23]
 8005ea2:	e027      	b.n	8005ef4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	0f1b      	lsrs	r3, r3, #28
 8005ea8:	2b09      	cmp	r3, #9
 8005eaa:	d80b      	bhi.n	8005ec4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	0f1b      	lsrs	r3, r3, #28
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	7dfb      	ldrb	r3, [r7, #23]
 8005eb4:	005b      	lsls	r3, r3, #1
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	440b      	add	r3, r1
 8005ebc:	3230      	adds	r2, #48	@ 0x30
 8005ebe:	b2d2      	uxtb	r2, r2
 8005ec0:	701a      	strb	r2, [r3, #0]
 8005ec2:	e00a      	b.n	8005eda <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	0f1b      	lsrs	r3, r3, #28
 8005ec8:	b2da      	uxtb	r2, r3
 8005eca:	7dfb      	ldrb	r3, [r7, #23]
 8005ecc:	005b      	lsls	r3, r3, #1
 8005ece:	4619      	mov	r1, r3
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	440b      	add	r3, r1
 8005ed4:	3237      	adds	r2, #55	@ 0x37
 8005ed6:	b2d2      	uxtb	r2, r2
 8005ed8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	011b      	lsls	r3, r3, #4
 8005ede:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005ee0:	7dfb      	ldrb	r3, [r7, #23]
 8005ee2:	005b      	lsls	r3, r3, #1
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	4413      	add	r3, r2
 8005eea:	2200      	movs	r2, #0
 8005eec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005eee:	7dfb      	ldrb	r3, [r7, #23]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	75fb      	strb	r3, [r7, #23]
 8005ef4:	7dfa      	ldrb	r2, [r7, #23]
 8005ef6:	79fb      	ldrb	r3, [r7, #7]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d3d3      	bcc.n	8005ea4 <IntToUnicode+0x18>
  }
}
 8005efc:	bf00      	nop
 8005efe:	bf00      	nop
 8005f00:	371c      	adds	r7, #28
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bc80      	pop	{r7}
 8005f06:	4770      	bx	lr

08005f08 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b08a      	sub	sp, #40	@ 0x28
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f10:	f107 0314 	add.w	r3, r7, #20
 8005f14:	2200      	movs	r2, #0
 8005f16:	601a      	str	r2, [r3, #0]
 8005f18:	605a      	str	r2, [r3, #4]
 8005f1a:	609a      	str	r2, [r3, #8]
 8005f1c:	60da      	str	r2, [r3, #12]
 8005f1e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f28:	d13a      	bne.n	8005fa0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	613b      	str	r3, [r7, #16]
 8005f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8005fa8 <HAL_PCD_MspInit+0xa0>)
 8005f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f32:	4a1d      	ldr	r2, [pc, #116]	@ (8005fa8 <HAL_PCD_MspInit+0xa0>)
 8005f34:	f043 0301 	orr.w	r3, r3, #1
 8005f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8005f3a:	4b1b      	ldr	r3, [pc, #108]	@ (8005fa8 <HAL_PCD_MspInit+0xa0>)
 8005f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	613b      	str	r3, [r7, #16]
 8005f44:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005f46:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f50:	2300      	movs	r3, #0
 8005f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f54:	2303      	movs	r3, #3
 8005f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005f58:	230a      	movs	r3, #10
 8005f5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f5c:	f107 0314 	add.w	r3, r7, #20
 8005f60:	4619      	mov	r1, r3
 8005f62:	4812      	ldr	r0, [pc, #72]	@ (8005fac <HAL_PCD_MspInit+0xa4>)
 8005f64:	f7fa fed8 	bl	8000d18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005f68:	4b0f      	ldr	r3, [pc, #60]	@ (8005fa8 <HAL_PCD_MspInit+0xa0>)
 8005f6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f6c:	4a0e      	ldr	r2, [pc, #56]	@ (8005fa8 <HAL_PCD_MspInit+0xa0>)
 8005f6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f72:	6353      	str	r3, [r2, #52]	@ 0x34
 8005f74:	2300      	movs	r3, #0
 8005f76:	60fb      	str	r3, [r7, #12]
 8005f78:	4b0b      	ldr	r3, [pc, #44]	@ (8005fa8 <HAL_PCD_MspInit+0xa0>)
 8005f7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f7c:	4a0a      	ldr	r2, [pc, #40]	@ (8005fa8 <HAL_PCD_MspInit+0xa0>)
 8005f7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005f82:	6453      	str	r3, [r2, #68]	@ 0x44
 8005f84:	4b08      	ldr	r3, [pc, #32]	@ (8005fa8 <HAL_PCD_MspInit+0xa0>)
 8005f86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f8c:	60fb      	str	r3, [r7, #12]
 8005f8e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005f90:	2200      	movs	r2, #0
 8005f92:	2100      	movs	r1, #0
 8005f94:	2043      	movs	r0, #67	@ 0x43
 8005f96:	f7fa fe88 	bl	8000caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005f9a:	2043      	movs	r0, #67	@ 0x43
 8005f9c:	f7fa fea1 	bl	8000ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005fa0:	bf00      	nop
 8005fa2:	3728      	adds	r7, #40	@ 0x28
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	40023800 	.word	0x40023800
 8005fac:	40020000 	.word	0x40020000

08005fb0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8d3 24d8 	ldr.w	r2, [r3, #1240]	@ 0x4d8
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	4610      	mov	r0, r2
 8005fc8:	f7fe fd69 	bl	8004a9e <USBD_LL_SetupStage>
}
 8005fcc:	bf00      	nop
 8005fce:	3708      	adds	r7, #8
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	460b      	mov	r3, r1
 8005fde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8d3 04d8 	ldr.w	r0, [r3, #1240]	@ 0x4d8
 8005fe6:	78fa      	ldrb	r2, [r7, #3]
 8005fe8:	6879      	ldr	r1, [r7, #4]
 8005fea:	4613      	mov	r3, r2
 8005fec:	00db      	lsls	r3, r3, #3
 8005fee:	4413      	add	r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	440b      	add	r3, r1
 8005ff4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	78fb      	ldrb	r3, [r7, #3]
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	f7fe fd9b 	bl	8004b38 <USBD_LL_DataOutStage>
}
 8006002:	bf00      	nop
 8006004:	3708      	adds	r7, #8
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b082      	sub	sp, #8
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
 8006012:	460b      	mov	r3, r1
 8006014:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8d3 04d8 	ldr.w	r0, [r3, #1240]	@ 0x4d8
 800601c:	78fa      	ldrb	r2, [r7, #3]
 800601e:	6879      	ldr	r1, [r7, #4]
 8006020:	4613      	mov	r3, r2
 8006022:	00db      	lsls	r3, r3, #3
 8006024:	4413      	add	r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	440b      	add	r3, r1
 800602a:	3320      	adds	r3, #32
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	78fb      	ldrb	r3, [r7, #3]
 8006030:	4619      	mov	r1, r3
 8006032:	f7fe fdf2 	bl	8004c1a <USBD_LL_DataInStage>
}
 8006036:	bf00      	nop
 8006038:	3708      	adds	r7, #8
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b082      	sub	sp, #8
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 800604c:	4618      	mov	r0, r3
 800604e:	f7fe ff02 	bl	8004e56 <USBD_LL_SOF>
}
 8006052:	bf00      	nop
 8006054:	3708      	adds	r7, #8
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800605a:	b580      	push	{r7, lr}
 800605c:	b084      	sub	sp, #16
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006062:	2301      	movs	r3, #1
 8006064:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	79db      	ldrb	r3, [r3, #7]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d102      	bne.n	8006074 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800606e:	2300      	movs	r3, #0
 8006070:	73fb      	strb	r3, [r7, #15]
 8006072:	e008      	b.n	8006086 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	79db      	ldrb	r3, [r3, #7]
 8006078:	2b02      	cmp	r3, #2
 800607a:	d102      	bne.n	8006082 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800607c:	2301      	movs	r3, #1
 800607e:	73fb      	strb	r3, [r7, #15]
 8006080:	e001      	b.n	8006086 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006082:	f7fa fb93 	bl	80007ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 800608c:	7bfa      	ldrb	r2, [r7, #15]
 800608e:	4611      	mov	r1, r2
 8006090:	4618      	mov	r0, r3
 8006092:	f7fe fea8 	bl	8004de6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 800609c:	4618      	mov	r0, r3
 800609e:	f7fe fe61 	bl	8004d64 <USBD_LL_Reset>
}
 80060a2:	bf00      	nop
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7fe fea2 	bl	8004e04 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	6812      	ldr	r2, [r2, #0]
 80060ce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80060d2:	f043 0301 	orr.w	r3, r3, #1
 80060d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	7adb      	ldrb	r3, [r3, #11]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d005      	beq.n	80060ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80060e0:	4b04      	ldr	r3, [pc, #16]	@ (80060f4 <HAL_PCD_SuspendCallback+0x48>)
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	4a03      	ldr	r2, [pc, #12]	@ (80060f4 <HAL_PCD_SuspendCallback+0x48>)
 80060e6:	f043 0306 	orr.w	r3, r3, #6
 80060ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80060ec:	bf00      	nop
 80060ee:	3708      	adds	r7, #8
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	e000ed00 	.word	0xe000ed00

080060f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 8006106:	4618      	mov	r0, r3
 8006108:	f7fe fe90 	bl	8004e2c <USBD_LL_Resume>
}
 800610c:	bf00      	nop
 800610e:	3708      	adds	r7, #8
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	460b      	mov	r3, r1
 800611e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 8006126:	78fa      	ldrb	r2, [r7, #3]
 8006128:	4611      	mov	r1, r2
 800612a:	4618      	mov	r0, r3
 800612c:	f7fe feb9 	bl	8004ea2 <USBD_LL_IsoOUTIncomplete>
}
 8006130:	bf00      	nop
 8006132:	3708      	adds	r7, #8
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	460b      	mov	r3, r1
 8006142:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 800614a:	78fa      	ldrb	r2, [r7, #3]
 800614c:	4611      	mov	r1, r2
 800614e:	4618      	mov	r0, r3
 8006150:	f7fe fe9b 	bl	8004e8a <USBD_LL_IsoINIncomplete>
}
 8006154:	bf00      	nop
 8006156:	3708      	adds	r7, #8
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 800616a:	4618      	mov	r0, r3
 800616c:	f7fe fea5 	bl	8004eba <USBD_LL_DevConnected>
}
 8006170:	bf00      	nop
 8006172:	3708      	adds	r7, #8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 8006186:	4618      	mov	r0, r3
 8006188:	f7fe fea1 	bl	8004ece <USBD_LL_DevDisconnected>
}
 800618c:	bf00      	nop
 800618e:	3708      	adds	r7, #8
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d139      	bne.n	8006218 <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80061a4:	4a1f      	ldr	r2, [pc, #124]	@ (8006224 <USBD_LL_Init+0x90>)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8c2 34d8 	str.w	r3, [r2, #1240]	@ 0x4d8
  pdev->pData = &hpcd_USB_OTG_FS;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a1d      	ldr	r2, [pc, #116]	@ (8006224 <USBD_LL_Init+0x90>)
 80061b0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80061b4:	4b1b      	ldr	r3, [pc, #108]	@ (8006224 <USBD_LL_Init+0x90>)
 80061b6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80061ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80061bc:	4b19      	ldr	r3, [pc, #100]	@ (8006224 <USBD_LL_Init+0x90>)
 80061be:	2204      	movs	r2, #4
 80061c0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80061c2:	4b18      	ldr	r3, [pc, #96]	@ (8006224 <USBD_LL_Init+0x90>)
 80061c4:	2202      	movs	r2, #2
 80061c6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80061c8:	4b16      	ldr	r3, [pc, #88]	@ (8006224 <USBD_LL_Init+0x90>)
 80061ca:	2200      	movs	r2, #0
 80061cc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80061ce:	4b15      	ldr	r3, [pc, #84]	@ (8006224 <USBD_LL_Init+0x90>)
 80061d0:	2202      	movs	r2, #2
 80061d2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80061d4:	4b13      	ldr	r3, [pc, #76]	@ (8006224 <USBD_LL_Init+0x90>)
 80061d6:	2200      	movs	r2, #0
 80061d8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80061da:	4b12      	ldr	r3, [pc, #72]	@ (8006224 <USBD_LL_Init+0x90>)
 80061dc:	2200      	movs	r2, #0
 80061de:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80061e0:	4b10      	ldr	r3, [pc, #64]	@ (8006224 <USBD_LL_Init+0x90>)
 80061e2:	2200      	movs	r2, #0
 80061e4:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80061e6:	4b0f      	ldr	r3, [pc, #60]	@ (8006224 <USBD_LL_Init+0x90>)
 80061e8:	2200      	movs	r2, #0
 80061ea:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80061ec:	480d      	ldr	r0, [pc, #52]	@ (8006224 <USBD_LL_Init+0x90>)
 80061ee:	f7fa ff62 	bl	80010b6 <HAL_PCD_Init>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d001      	beq.n	80061fc <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 80061f8:	f7fa fad8 	bl	80007ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80061fc:	2180      	movs	r1, #128	@ 0x80
 80061fe:	4809      	ldr	r0, [pc, #36]	@ (8006224 <USBD_LL_Init+0x90>)
 8006200:	f7fc f96a 	bl	80024d8 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006204:	2240      	movs	r2, #64	@ 0x40
 8006206:	2100      	movs	r1, #0
 8006208:	4806      	ldr	r0, [pc, #24]	@ (8006224 <USBD_LL_Init+0x90>)
 800620a:	f7fc f91f 	bl	800244c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800620e:	2280      	movs	r2, #128	@ 0x80
 8006210:	2101      	movs	r1, #1
 8006212:	4804      	ldr	r0, [pc, #16]	@ (8006224 <USBD_LL_Init+0x90>)
 8006214:	f7fc f91a 	bl	800244c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	200016c4 	.word	0x200016c4

08006228 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006230:	2300      	movs	r3, #0
 8006232:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006234:	2300      	movs	r3, #0
 8006236:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800623e:	4618      	mov	r0, r3
 8006240:	f7fb f848 	bl	80012d4 <HAL_PCD_Start>
 8006244:	4603      	mov	r3, r0
 8006246:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006248:	7bfb      	ldrb	r3, [r7, #15]
 800624a:	4618      	mov	r0, r3
 800624c:	f000 f92e 	bl	80064ac <USBD_Get_USB_Status>
 8006250:	4603      	mov	r3, r0
 8006252:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006254:	7bbb      	ldrb	r3, [r7, #14]
}
 8006256:	4618      	mov	r0, r3
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b084      	sub	sp, #16
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
 8006266:	4608      	mov	r0, r1
 8006268:	4611      	mov	r1, r2
 800626a:	461a      	mov	r2, r3
 800626c:	4603      	mov	r3, r0
 800626e:	70fb      	strb	r3, [r7, #3]
 8006270:	460b      	mov	r3, r1
 8006272:	70bb      	strb	r3, [r7, #2]
 8006274:	4613      	mov	r3, r2
 8006276:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006278:	2300      	movs	r3, #0
 800627a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800627c:	2300      	movs	r3, #0
 800627e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8006286:	78bb      	ldrb	r3, [r7, #2]
 8006288:	883a      	ldrh	r2, [r7, #0]
 800628a:	78f9      	ldrb	r1, [r7, #3]
 800628c:	f7fb fcfb 	bl	8001c86 <HAL_PCD_EP_Open>
 8006290:	4603      	mov	r3, r0
 8006292:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006294:	7bfb      	ldrb	r3, [r7, #15]
 8006296:	4618      	mov	r0, r3
 8006298:	f000 f908 	bl	80064ac <USBD_Get_USB_Status>
 800629c:	4603      	mov	r3, r0
 800629e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80062a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}

080062aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b084      	sub	sp, #16
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
 80062b2:	460b      	mov	r3, r1
 80062b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062b6:	2300      	movs	r3, #0
 80062b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062ba:	2300      	movs	r3, #0
 80062bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80062c4:	78fa      	ldrb	r2, [r7, #3]
 80062c6:	4611      	mov	r1, r2
 80062c8:	4618      	mov	r0, r3
 80062ca:	f7fb fd44 	bl	8001d56 <HAL_PCD_EP_Close>
 80062ce:	4603      	mov	r3, r0
 80062d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80062d2:	7bfb      	ldrb	r3, [r7, #15]
 80062d4:	4618      	mov	r0, r3
 80062d6:	f000 f8e9 	bl	80064ac <USBD_Get_USB_Status>
 80062da:	4603      	mov	r3, r0
 80062dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80062de:	7bbb      	ldrb	r3, [r7, #14]
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	460b      	mov	r3, r1
 80062f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062f4:	2300      	movs	r3, #0
 80062f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062f8:	2300      	movs	r3, #0
 80062fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006302:	78fa      	ldrb	r2, [r7, #3]
 8006304:	4611      	mov	r1, r2
 8006306:	4618      	mov	r0, r3
 8006308:	f7fb fdfb 	bl	8001f02 <HAL_PCD_EP_SetStall>
 800630c:	4603      	mov	r3, r0
 800630e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006310:	7bfb      	ldrb	r3, [r7, #15]
 8006312:	4618      	mov	r0, r3
 8006314:	f000 f8ca 	bl	80064ac <USBD_Get_USB_Status>
 8006318:	4603      	mov	r3, r0
 800631a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800631c:	7bbb      	ldrb	r3, [r7, #14]
}
 800631e:	4618      	mov	r0, r3
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b084      	sub	sp, #16
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
 800632e:	460b      	mov	r3, r1
 8006330:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006332:	2300      	movs	r3, #0
 8006334:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006336:	2300      	movs	r3, #0
 8006338:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006340:	78fa      	ldrb	r2, [r7, #3]
 8006342:	4611      	mov	r1, r2
 8006344:	4618      	mov	r0, r3
 8006346:	f7fb fe3f 	bl	8001fc8 <HAL_PCD_EP_ClrStall>
 800634a:	4603      	mov	r3, r0
 800634c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800634e:	7bfb      	ldrb	r3, [r7, #15]
 8006350:	4618      	mov	r0, r3
 8006352:	f000 f8ab 	bl	80064ac <USBD_Get_USB_Status>
 8006356:	4603      	mov	r3, r0
 8006358:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800635a:	7bbb      	ldrb	r3, [r7, #14]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	460b      	mov	r3, r1
 800636e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006376:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006378:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800637c:	2b00      	cmp	r3, #0
 800637e:	da0b      	bge.n	8006398 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006380:	78fb      	ldrb	r3, [r7, #3]
 8006382:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006386:	68f9      	ldr	r1, [r7, #12]
 8006388:	4613      	mov	r3, r2
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	4413      	add	r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	440b      	add	r3, r1
 8006392:	3316      	adds	r3, #22
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	e00b      	b.n	80063b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006398:	78fb      	ldrb	r3, [r7, #3]
 800639a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800639e:	68f9      	ldr	r1, [r7, #12]
 80063a0:	4613      	mov	r3, r2
 80063a2:	00db      	lsls	r3, r3, #3
 80063a4:	4413      	add	r3, r2
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	440b      	add	r3, r1
 80063aa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80063ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3714      	adds	r7, #20
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bc80      	pop	{r7}
 80063b8:	4770      	bx	lr

080063ba <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b084      	sub	sp, #16
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
 80063c2:	460b      	mov	r3, r1
 80063c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063c6:	2300      	movs	r3, #0
 80063c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063ca:	2300      	movs	r3, #0
 80063cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80063d4:	78fa      	ldrb	r2, [r7, #3]
 80063d6:	4611      	mov	r1, r2
 80063d8:	4618      	mov	r0, r3
 80063da:	f7fb fc30 	bl	8001c3e <HAL_PCD_SetAddress>
 80063de:	4603      	mov	r3, r0
 80063e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80063e2:	7bfb      	ldrb	r3, [r7, #15]
 80063e4:	4618      	mov	r0, r3
 80063e6:	f000 f861 	bl	80064ac <USBD_Get_USB_Status>
 80063ea:	4603      	mov	r3, r0
 80063ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80063ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	607a      	str	r2, [r7, #4]
 8006402:	461a      	mov	r2, r3
 8006404:	460b      	mov	r3, r1
 8006406:	72fb      	strb	r3, [r7, #11]
 8006408:	4613      	mov	r3, r2
 800640a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800640c:	2300      	movs	r3, #0
 800640e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006410:	2300      	movs	r3, #0
 8006412:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800641a:	893b      	ldrh	r3, [r7, #8]
 800641c:	7af9      	ldrb	r1, [r7, #11]
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	f7fb fd35 	bl	8001e8e <HAL_PCD_EP_Transmit>
 8006424:	4603      	mov	r3, r0
 8006426:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006428:	7dfb      	ldrb	r3, [r7, #23]
 800642a:	4618      	mov	r0, r3
 800642c:	f000 f83e 	bl	80064ac <USBD_Get_USB_Status>
 8006430:	4603      	mov	r3, r0
 8006432:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006434:	7dbb      	ldrb	r3, [r7, #22]
}
 8006436:	4618      	mov	r0, r3
 8006438:	3718      	adds	r7, #24
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b086      	sub	sp, #24
 8006442:	af00      	add	r7, sp, #0
 8006444:	60f8      	str	r0, [r7, #12]
 8006446:	607a      	str	r2, [r7, #4]
 8006448:	461a      	mov	r2, r3
 800644a:	460b      	mov	r3, r1
 800644c:	72fb      	strb	r3, [r7, #11]
 800644e:	4613      	mov	r3, r2
 8006450:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006452:	2300      	movs	r3, #0
 8006454:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006456:	2300      	movs	r3, #0
 8006458:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8006460:	893b      	ldrh	r3, [r7, #8]
 8006462:	7af9      	ldrb	r1, [r7, #11]
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	f7fb fcc0 	bl	8001dea <HAL_PCD_EP_Receive>
 800646a:	4603      	mov	r3, r0
 800646c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800646e:	7dfb      	ldrb	r3, [r7, #23]
 8006470:	4618      	mov	r0, r3
 8006472:	f000 f81b 	bl	80064ac <USBD_Get_USB_Status>
 8006476:	4603      	mov	r3, r0
 8006478:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800647a:	7dbb      	ldrb	r3, [r7, #22]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3718      	adds	r7, #24
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	460b      	mov	r3, r1
 800648e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006496:	78fa      	ldrb	r2, [r7, #3]
 8006498:	4611      	mov	r1, r2
 800649a:	4618      	mov	r0, r3
 800649c:	f7fb fce0 	bl	8001e60 <HAL_PCD_EP_GetRxCount>
 80064a0:	4603      	mov	r3, r0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3708      	adds	r7, #8
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
	...

080064ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	4603      	mov	r3, r0
 80064b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064b6:	2300      	movs	r3, #0
 80064b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80064ba:	79fb      	ldrb	r3, [r7, #7]
 80064bc:	2b03      	cmp	r3, #3
 80064be:	d817      	bhi.n	80064f0 <USBD_Get_USB_Status+0x44>
 80064c0:	a201      	add	r2, pc, #4	@ (adr r2, 80064c8 <USBD_Get_USB_Status+0x1c>)
 80064c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c6:	bf00      	nop
 80064c8:	080064d9 	.word	0x080064d9
 80064cc:	080064df 	.word	0x080064df
 80064d0:	080064e5 	.word	0x080064e5
 80064d4:	080064eb 	.word	0x080064eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80064d8:	2300      	movs	r3, #0
 80064da:	73fb      	strb	r3, [r7, #15]
    break;
 80064dc:	e00b      	b.n	80064f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80064de:	2302      	movs	r3, #2
 80064e0:	73fb      	strb	r3, [r7, #15]
    break;
 80064e2:	e008      	b.n	80064f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80064e4:	2301      	movs	r3, #1
 80064e6:	73fb      	strb	r3, [r7, #15]
    break;
 80064e8:	e005      	b.n	80064f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80064ea:	2302      	movs	r3, #2
 80064ec:	73fb      	strb	r3, [r7, #15]
    break;
 80064ee:	e002      	b.n	80064f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80064f0:	2302      	movs	r3, #2
 80064f2:	73fb      	strb	r3, [r7, #15]
    break;
 80064f4:	bf00      	nop
  }
  return usb_status;
 80064f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3714      	adds	r7, #20
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bc80      	pop	{r7}
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop

08006504 <malloc>:
 8006504:	4b02      	ldr	r3, [pc, #8]	@ (8006510 <malloc+0xc>)
 8006506:	4601      	mov	r1, r0
 8006508:	6818      	ldr	r0, [r3, #0]
 800650a:	f000 b82d 	b.w	8006568 <_malloc_r>
 800650e:	bf00      	nop
 8006510:	20000188 	.word	0x20000188

08006514 <free>:
 8006514:	4b02      	ldr	r3, [pc, #8]	@ (8006520 <free+0xc>)
 8006516:	4601      	mov	r1, r0
 8006518:	6818      	ldr	r0, [r3, #0]
 800651a:	f000 bb47 	b.w	8006bac <_free_r>
 800651e:	bf00      	nop
 8006520:	20000188 	.word	0x20000188

08006524 <sbrk_aligned>:
 8006524:	b570      	push	{r4, r5, r6, lr}
 8006526:	4e0f      	ldr	r6, [pc, #60]	@ (8006564 <sbrk_aligned+0x40>)
 8006528:	460c      	mov	r4, r1
 800652a:	6831      	ldr	r1, [r6, #0]
 800652c:	4605      	mov	r5, r0
 800652e:	b911      	cbnz	r1, 8006536 <sbrk_aligned+0x12>
 8006530:	f000 faec 	bl	8006b0c <_sbrk_r>
 8006534:	6030      	str	r0, [r6, #0]
 8006536:	4621      	mov	r1, r4
 8006538:	4628      	mov	r0, r5
 800653a:	f000 fae7 	bl	8006b0c <_sbrk_r>
 800653e:	1c43      	adds	r3, r0, #1
 8006540:	d103      	bne.n	800654a <sbrk_aligned+0x26>
 8006542:	f04f 34ff 	mov.w	r4, #4294967295
 8006546:	4620      	mov	r0, r4
 8006548:	bd70      	pop	{r4, r5, r6, pc}
 800654a:	1cc4      	adds	r4, r0, #3
 800654c:	f024 0403 	bic.w	r4, r4, #3
 8006550:	42a0      	cmp	r0, r4
 8006552:	d0f8      	beq.n	8006546 <sbrk_aligned+0x22>
 8006554:	1a21      	subs	r1, r4, r0
 8006556:	4628      	mov	r0, r5
 8006558:	f000 fad8 	bl	8006b0c <_sbrk_r>
 800655c:	3001      	adds	r0, #1
 800655e:	d1f2      	bne.n	8006546 <sbrk_aligned+0x22>
 8006560:	e7ef      	b.n	8006542 <sbrk_aligned+0x1e>
 8006562:	bf00      	nop
 8006564:	20001ba0 	.word	0x20001ba0

08006568 <_malloc_r>:
 8006568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800656c:	1ccd      	adds	r5, r1, #3
 800656e:	f025 0503 	bic.w	r5, r5, #3
 8006572:	3508      	adds	r5, #8
 8006574:	2d0c      	cmp	r5, #12
 8006576:	bf38      	it	cc
 8006578:	250c      	movcc	r5, #12
 800657a:	2d00      	cmp	r5, #0
 800657c:	4606      	mov	r6, r0
 800657e:	db01      	blt.n	8006584 <_malloc_r+0x1c>
 8006580:	42a9      	cmp	r1, r5
 8006582:	d904      	bls.n	800658e <_malloc_r+0x26>
 8006584:	230c      	movs	r3, #12
 8006586:	6033      	str	r3, [r6, #0]
 8006588:	2000      	movs	r0, #0
 800658a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800658e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006664 <_malloc_r+0xfc>
 8006592:	f000 f869 	bl	8006668 <__malloc_lock>
 8006596:	f8d8 3000 	ldr.w	r3, [r8]
 800659a:	461c      	mov	r4, r3
 800659c:	bb44      	cbnz	r4, 80065f0 <_malloc_r+0x88>
 800659e:	4629      	mov	r1, r5
 80065a0:	4630      	mov	r0, r6
 80065a2:	f7ff ffbf 	bl	8006524 <sbrk_aligned>
 80065a6:	1c43      	adds	r3, r0, #1
 80065a8:	4604      	mov	r4, r0
 80065aa:	d158      	bne.n	800665e <_malloc_r+0xf6>
 80065ac:	f8d8 4000 	ldr.w	r4, [r8]
 80065b0:	4627      	mov	r7, r4
 80065b2:	2f00      	cmp	r7, #0
 80065b4:	d143      	bne.n	800663e <_malloc_r+0xd6>
 80065b6:	2c00      	cmp	r4, #0
 80065b8:	d04b      	beq.n	8006652 <_malloc_r+0xea>
 80065ba:	6823      	ldr	r3, [r4, #0]
 80065bc:	4639      	mov	r1, r7
 80065be:	4630      	mov	r0, r6
 80065c0:	eb04 0903 	add.w	r9, r4, r3
 80065c4:	f000 faa2 	bl	8006b0c <_sbrk_r>
 80065c8:	4581      	cmp	r9, r0
 80065ca:	d142      	bne.n	8006652 <_malloc_r+0xea>
 80065cc:	6821      	ldr	r1, [r4, #0]
 80065ce:	4630      	mov	r0, r6
 80065d0:	1a6d      	subs	r5, r5, r1
 80065d2:	4629      	mov	r1, r5
 80065d4:	f7ff ffa6 	bl	8006524 <sbrk_aligned>
 80065d8:	3001      	adds	r0, #1
 80065da:	d03a      	beq.n	8006652 <_malloc_r+0xea>
 80065dc:	6823      	ldr	r3, [r4, #0]
 80065de:	442b      	add	r3, r5
 80065e0:	6023      	str	r3, [r4, #0]
 80065e2:	f8d8 3000 	ldr.w	r3, [r8]
 80065e6:	685a      	ldr	r2, [r3, #4]
 80065e8:	bb62      	cbnz	r2, 8006644 <_malloc_r+0xdc>
 80065ea:	f8c8 7000 	str.w	r7, [r8]
 80065ee:	e00f      	b.n	8006610 <_malloc_r+0xa8>
 80065f0:	6822      	ldr	r2, [r4, #0]
 80065f2:	1b52      	subs	r2, r2, r5
 80065f4:	d420      	bmi.n	8006638 <_malloc_r+0xd0>
 80065f6:	2a0b      	cmp	r2, #11
 80065f8:	d917      	bls.n	800662a <_malloc_r+0xc2>
 80065fa:	1961      	adds	r1, r4, r5
 80065fc:	42a3      	cmp	r3, r4
 80065fe:	6025      	str	r5, [r4, #0]
 8006600:	bf18      	it	ne
 8006602:	6059      	strne	r1, [r3, #4]
 8006604:	6863      	ldr	r3, [r4, #4]
 8006606:	bf08      	it	eq
 8006608:	f8c8 1000 	streq.w	r1, [r8]
 800660c:	5162      	str	r2, [r4, r5]
 800660e:	604b      	str	r3, [r1, #4]
 8006610:	4630      	mov	r0, r6
 8006612:	f000 f82f 	bl	8006674 <__malloc_unlock>
 8006616:	f104 000b 	add.w	r0, r4, #11
 800661a:	1d23      	adds	r3, r4, #4
 800661c:	f020 0007 	bic.w	r0, r0, #7
 8006620:	1ac2      	subs	r2, r0, r3
 8006622:	bf1c      	itt	ne
 8006624:	1a1b      	subne	r3, r3, r0
 8006626:	50a3      	strne	r3, [r4, r2]
 8006628:	e7af      	b.n	800658a <_malloc_r+0x22>
 800662a:	6862      	ldr	r2, [r4, #4]
 800662c:	42a3      	cmp	r3, r4
 800662e:	bf0c      	ite	eq
 8006630:	f8c8 2000 	streq.w	r2, [r8]
 8006634:	605a      	strne	r2, [r3, #4]
 8006636:	e7eb      	b.n	8006610 <_malloc_r+0xa8>
 8006638:	4623      	mov	r3, r4
 800663a:	6864      	ldr	r4, [r4, #4]
 800663c:	e7ae      	b.n	800659c <_malloc_r+0x34>
 800663e:	463c      	mov	r4, r7
 8006640:	687f      	ldr	r7, [r7, #4]
 8006642:	e7b6      	b.n	80065b2 <_malloc_r+0x4a>
 8006644:	461a      	mov	r2, r3
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	42a3      	cmp	r3, r4
 800664a:	d1fb      	bne.n	8006644 <_malloc_r+0xdc>
 800664c:	2300      	movs	r3, #0
 800664e:	6053      	str	r3, [r2, #4]
 8006650:	e7de      	b.n	8006610 <_malloc_r+0xa8>
 8006652:	230c      	movs	r3, #12
 8006654:	4630      	mov	r0, r6
 8006656:	6033      	str	r3, [r6, #0]
 8006658:	f000 f80c 	bl	8006674 <__malloc_unlock>
 800665c:	e794      	b.n	8006588 <_malloc_r+0x20>
 800665e:	6005      	str	r5, [r0, #0]
 8006660:	e7d6      	b.n	8006610 <_malloc_r+0xa8>
 8006662:	bf00      	nop
 8006664:	20001ba4 	.word	0x20001ba4

08006668 <__malloc_lock>:
 8006668:	4801      	ldr	r0, [pc, #4]	@ (8006670 <__malloc_lock+0x8>)
 800666a:	f000 ba9c 	b.w	8006ba6 <__retarget_lock_acquire_recursive>
 800666e:	bf00      	nop
 8006670:	20001ce8 	.word	0x20001ce8

08006674 <__malloc_unlock>:
 8006674:	4801      	ldr	r0, [pc, #4]	@ (800667c <__malloc_unlock+0x8>)
 8006676:	f000 ba97 	b.w	8006ba8 <__retarget_lock_release_recursive>
 800667a:	bf00      	nop
 800667c:	20001ce8 	.word	0x20001ce8

08006680 <std>:
 8006680:	2300      	movs	r3, #0
 8006682:	b510      	push	{r4, lr}
 8006684:	4604      	mov	r4, r0
 8006686:	e9c0 3300 	strd	r3, r3, [r0]
 800668a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800668e:	6083      	str	r3, [r0, #8]
 8006690:	8181      	strh	r1, [r0, #12]
 8006692:	6643      	str	r3, [r0, #100]	@ 0x64
 8006694:	81c2      	strh	r2, [r0, #14]
 8006696:	6183      	str	r3, [r0, #24]
 8006698:	4619      	mov	r1, r3
 800669a:	2208      	movs	r2, #8
 800669c:	305c      	adds	r0, #92	@ 0x5c
 800669e:	f000 f9f9 	bl	8006a94 <memset>
 80066a2:	4b0d      	ldr	r3, [pc, #52]	@ (80066d8 <std+0x58>)
 80066a4:	6224      	str	r4, [r4, #32]
 80066a6:	6263      	str	r3, [r4, #36]	@ 0x24
 80066a8:	4b0c      	ldr	r3, [pc, #48]	@ (80066dc <std+0x5c>)
 80066aa:	62a3      	str	r3, [r4, #40]	@ 0x28
 80066ac:	4b0c      	ldr	r3, [pc, #48]	@ (80066e0 <std+0x60>)
 80066ae:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80066b0:	4b0c      	ldr	r3, [pc, #48]	@ (80066e4 <std+0x64>)
 80066b2:	6323      	str	r3, [r4, #48]	@ 0x30
 80066b4:	4b0c      	ldr	r3, [pc, #48]	@ (80066e8 <std+0x68>)
 80066b6:	429c      	cmp	r4, r3
 80066b8:	d006      	beq.n	80066c8 <std+0x48>
 80066ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80066be:	4294      	cmp	r4, r2
 80066c0:	d002      	beq.n	80066c8 <std+0x48>
 80066c2:	33d0      	adds	r3, #208	@ 0xd0
 80066c4:	429c      	cmp	r4, r3
 80066c6:	d105      	bne.n	80066d4 <std+0x54>
 80066c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80066cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066d0:	f000 ba68 	b.w	8006ba4 <__retarget_lock_init_recursive>
 80066d4:	bd10      	pop	{r4, pc}
 80066d6:	bf00      	nop
 80066d8:	080068e5 	.word	0x080068e5
 80066dc:	08006907 	.word	0x08006907
 80066e0:	0800693f 	.word	0x0800693f
 80066e4:	08006963 	.word	0x08006963
 80066e8:	20001ba8 	.word	0x20001ba8

080066ec <stdio_exit_handler>:
 80066ec:	4a02      	ldr	r2, [pc, #8]	@ (80066f8 <stdio_exit_handler+0xc>)
 80066ee:	4903      	ldr	r1, [pc, #12]	@ (80066fc <stdio_exit_handler+0x10>)
 80066f0:	4803      	ldr	r0, [pc, #12]	@ (8006700 <stdio_exit_handler+0x14>)
 80066f2:	f000 b869 	b.w	80067c8 <_fwalk_sglue>
 80066f6:	bf00      	nop
 80066f8:	2000017c 	.word	0x2000017c
 80066fc:	080072dd 	.word	0x080072dd
 8006700:	2000018c 	.word	0x2000018c

08006704 <cleanup_stdio>:
 8006704:	6841      	ldr	r1, [r0, #4]
 8006706:	4b0c      	ldr	r3, [pc, #48]	@ (8006738 <cleanup_stdio+0x34>)
 8006708:	b510      	push	{r4, lr}
 800670a:	4299      	cmp	r1, r3
 800670c:	4604      	mov	r4, r0
 800670e:	d001      	beq.n	8006714 <cleanup_stdio+0x10>
 8006710:	f000 fde4 	bl	80072dc <_fflush_r>
 8006714:	68a1      	ldr	r1, [r4, #8]
 8006716:	4b09      	ldr	r3, [pc, #36]	@ (800673c <cleanup_stdio+0x38>)
 8006718:	4299      	cmp	r1, r3
 800671a:	d002      	beq.n	8006722 <cleanup_stdio+0x1e>
 800671c:	4620      	mov	r0, r4
 800671e:	f000 fddd 	bl	80072dc <_fflush_r>
 8006722:	68e1      	ldr	r1, [r4, #12]
 8006724:	4b06      	ldr	r3, [pc, #24]	@ (8006740 <cleanup_stdio+0x3c>)
 8006726:	4299      	cmp	r1, r3
 8006728:	d004      	beq.n	8006734 <cleanup_stdio+0x30>
 800672a:	4620      	mov	r0, r4
 800672c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006730:	f000 bdd4 	b.w	80072dc <_fflush_r>
 8006734:	bd10      	pop	{r4, pc}
 8006736:	bf00      	nop
 8006738:	20001ba8 	.word	0x20001ba8
 800673c:	20001c10 	.word	0x20001c10
 8006740:	20001c78 	.word	0x20001c78

08006744 <global_stdio_init.part.0>:
 8006744:	b510      	push	{r4, lr}
 8006746:	4b0b      	ldr	r3, [pc, #44]	@ (8006774 <global_stdio_init.part.0+0x30>)
 8006748:	4c0b      	ldr	r4, [pc, #44]	@ (8006778 <global_stdio_init.part.0+0x34>)
 800674a:	4a0c      	ldr	r2, [pc, #48]	@ (800677c <global_stdio_init.part.0+0x38>)
 800674c:	4620      	mov	r0, r4
 800674e:	601a      	str	r2, [r3, #0]
 8006750:	2104      	movs	r1, #4
 8006752:	2200      	movs	r2, #0
 8006754:	f7ff ff94 	bl	8006680 <std>
 8006758:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800675c:	2201      	movs	r2, #1
 800675e:	2109      	movs	r1, #9
 8006760:	f7ff ff8e 	bl	8006680 <std>
 8006764:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006768:	2202      	movs	r2, #2
 800676a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800676e:	2112      	movs	r1, #18
 8006770:	f7ff bf86 	b.w	8006680 <std>
 8006774:	20001ce0 	.word	0x20001ce0
 8006778:	20001ba8 	.word	0x20001ba8
 800677c:	080066ed 	.word	0x080066ed

08006780 <__sfp_lock_acquire>:
 8006780:	4801      	ldr	r0, [pc, #4]	@ (8006788 <__sfp_lock_acquire+0x8>)
 8006782:	f000 ba10 	b.w	8006ba6 <__retarget_lock_acquire_recursive>
 8006786:	bf00      	nop
 8006788:	20001ce9 	.word	0x20001ce9

0800678c <__sfp_lock_release>:
 800678c:	4801      	ldr	r0, [pc, #4]	@ (8006794 <__sfp_lock_release+0x8>)
 800678e:	f000 ba0b 	b.w	8006ba8 <__retarget_lock_release_recursive>
 8006792:	bf00      	nop
 8006794:	20001ce9 	.word	0x20001ce9

08006798 <__sinit>:
 8006798:	b510      	push	{r4, lr}
 800679a:	4604      	mov	r4, r0
 800679c:	f7ff fff0 	bl	8006780 <__sfp_lock_acquire>
 80067a0:	6a23      	ldr	r3, [r4, #32]
 80067a2:	b11b      	cbz	r3, 80067ac <__sinit+0x14>
 80067a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067a8:	f7ff bff0 	b.w	800678c <__sfp_lock_release>
 80067ac:	4b04      	ldr	r3, [pc, #16]	@ (80067c0 <__sinit+0x28>)
 80067ae:	6223      	str	r3, [r4, #32]
 80067b0:	4b04      	ldr	r3, [pc, #16]	@ (80067c4 <__sinit+0x2c>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1f5      	bne.n	80067a4 <__sinit+0xc>
 80067b8:	f7ff ffc4 	bl	8006744 <global_stdio_init.part.0>
 80067bc:	e7f2      	b.n	80067a4 <__sinit+0xc>
 80067be:	bf00      	nop
 80067c0:	08006705 	.word	0x08006705
 80067c4:	20001ce0 	.word	0x20001ce0

080067c8 <_fwalk_sglue>:
 80067c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067cc:	4607      	mov	r7, r0
 80067ce:	4688      	mov	r8, r1
 80067d0:	4614      	mov	r4, r2
 80067d2:	2600      	movs	r6, #0
 80067d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80067d8:	f1b9 0901 	subs.w	r9, r9, #1
 80067dc:	d505      	bpl.n	80067ea <_fwalk_sglue+0x22>
 80067de:	6824      	ldr	r4, [r4, #0]
 80067e0:	2c00      	cmp	r4, #0
 80067e2:	d1f7      	bne.n	80067d4 <_fwalk_sglue+0xc>
 80067e4:	4630      	mov	r0, r6
 80067e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067ea:	89ab      	ldrh	r3, [r5, #12]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d907      	bls.n	8006800 <_fwalk_sglue+0x38>
 80067f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067f4:	3301      	adds	r3, #1
 80067f6:	d003      	beq.n	8006800 <_fwalk_sglue+0x38>
 80067f8:	4629      	mov	r1, r5
 80067fa:	4638      	mov	r0, r7
 80067fc:	47c0      	blx	r8
 80067fe:	4306      	orrs	r6, r0
 8006800:	3568      	adds	r5, #104	@ 0x68
 8006802:	e7e9      	b.n	80067d8 <_fwalk_sglue+0x10>

08006804 <iprintf>:
 8006804:	b40f      	push	{r0, r1, r2, r3}
 8006806:	b507      	push	{r0, r1, r2, lr}
 8006808:	4906      	ldr	r1, [pc, #24]	@ (8006824 <iprintf+0x20>)
 800680a:	ab04      	add	r3, sp, #16
 800680c:	6808      	ldr	r0, [r1, #0]
 800680e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006812:	6881      	ldr	r1, [r0, #8]
 8006814:	9301      	str	r3, [sp, #4]
 8006816:	f000 fa39 	bl	8006c8c <_vfiprintf_r>
 800681a:	b003      	add	sp, #12
 800681c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006820:	b004      	add	sp, #16
 8006822:	4770      	bx	lr
 8006824:	20000188 	.word	0x20000188

08006828 <_puts_r>:
 8006828:	6a03      	ldr	r3, [r0, #32]
 800682a:	b570      	push	{r4, r5, r6, lr}
 800682c:	4605      	mov	r5, r0
 800682e:	460e      	mov	r6, r1
 8006830:	6884      	ldr	r4, [r0, #8]
 8006832:	b90b      	cbnz	r3, 8006838 <_puts_r+0x10>
 8006834:	f7ff ffb0 	bl	8006798 <__sinit>
 8006838:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800683a:	07db      	lsls	r3, r3, #31
 800683c:	d405      	bmi.n	800684a <_puts_r+0x22>
 800683e:	89a3      	ldrh	r3, [r4, #12]
 8006840:	0598      	lsls	r0, r3, #22
 8006842:	d402      	bmi.n	800684a <_puts_r+0x22>
 8006844:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006846:	f000 f9ae 	bl	8006ba6 <__retarget_lock_acquire_recursive>
 800684a:	89a3      	ldrh	r3, [r4, #12]
 800684c:	0719      	lsls	r1, r3, #28
 800684e:	d502      	bpl.n	8006856 <_puts_r+0x2e>
 8006850:	6923      	ldr	r3, [r4, #16]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d135      	bne.n	80068c2 <_puts_r+0x9a>
 8006856:	4621      	mov	r1, r4
 8006858:	4628      	mov	r0, r5
 800685a:	f000 f8c5 	bl	80069e8 <__swsetup_r>
 800685e:	b380      	cbz	r0, 80068c2 <_puts_r+0x9a>
 8006860:	f04f 35ff 	mov.w	r5, #4294967295
 8006864:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006866:	07da      	lsls	r2, r3, #31
 8006868:	d405      	bmi.n	8006876 <_puts_r+0x4e>
 800686a:	89a3      	ldrh	r3, [r4, #12]
 800686c:	059b      	lsls	r3, r3, #22
 800686e:	d402      	bmi.n	8006876 <_puts_r+0x4e>
 8006870:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006872:	f000 f999 	bl	8006ba8 <__retarget_lock_release_recursive>
 8006876:	4628      	mov	r0, r5
 8006878:	bd70      	pop	{r4, r5, r6, pc}
 800687a:	2b00      	cmp	r3, #0
 800687c:	da04      	bge.n	8006888 <_puts_r+0x60>
 800687e:	69a2      	ldr	r2, [r4, #24]
 8006880:	429a      	cmp	r2, r3
 8006882:	dc17      	bgt.n	80068b4 <_puts_r+0x8c>
 8006884:	290a      	cmp	r1, #10
 8006886:	d015      	beq.n	80068b4 <_puts_r+0x8c>
 8006888:	6823      	ldr	r3, [r4, #0]
 800688a:	1c5a      	adds	r2, r3, #1
 800688c:	6022      	str	r2, [r4, #0]
 800688e:	7019      	strb	r1, [r3, #0]
 8006890:	68a3      	ldr	r3, [r4, #8]
 8006892:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006896:	3b01      	subs	r3, #1
 8006898:	60a3      	str	r3, [r4, #8]
 800689a:	2900      	cmp	r1, #0
 800689c:	d1ed      	bne.n	800687a <_puts_r+0x52>
 800689e:	2b00      	cmp	r3, #0
 80068a0:	da11      	bge.n	80068c6 <_puts_r+0x9e>
 80068a2:	4622      	mov	r2, r4
 80068a4:	210a      	movs	r1, #10
 80068a6:	4628      	mov	r0, r5
 80068a8:	f000 f85f 	bl	800696a <__swbuf_r>
 80068ac:	3001      	adds	r0, #1
 80068ae:	d0d7      	beq.n	8006860 <_puts_r+0x38>
 80068b0:	250a      	movs	r5, #10
 80068b2:	e7d7      	b.n	8006864 <_puts_r+0x3c>
 80068b4:	4622      	mov	r2, r4
 80068b6:	4628      	mov	r0, r5
 80068b8:	f000 f857 	bl	800696a <__swbuf_r>
 80068bc:	3001      	adds	r0, #1
 80068be:	d1e7      	bne.n	8006890 <_puts_r+0x68>
 80068c0:	e7ce      	b.n	8006860 <_puts_r+0x38>
 80068c2:	3e01      	subs	r6, #1
 80068c4:	e7e4      	b.n	8006890 <_puts_r+0x68>
 80068c6:	6823      	ldr	r3, [r4, #0]
 80068c8:	1c5a      	adds	r2, r3, #1
 80068ca:	6022      	str	r2, [r4, #0]
 80068cc:	220a      	movs	r2, #10
 80068ce:	701a      	strb	r2, [r3, #0]
 80068d0:	e7ee      	b.n	80068b0 <_puts_r+0x88>
	...

080068d4 <puts>:
 80068d4:	4b02      	ldr	r3, [pc, #8]	@ (80068e0 <puts+0xc>)
 80068d6:	4601      	mov	r1, r0
 80068d8:	6818      	ldr	r0, [r3, #0]
 80068da:	f7ff bfa5 	b.w	8006828 <_puts_r>
 80068de:	bf00      	nop
 80068e0:	20000188 	.word	0x20000188

080068e4 <__sread>:
 80068e4:	b510      	push	{r4, lr}
 80068e6:	460c      	mov	r4, r1
 80068e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068ec:	f000 f8fc 	bl	8006ae8 <_read_r>
 80068f0:	2800      	cmp	r0, #0
 80068f2:	bfab      	itete	ge
 80068f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80068f6:	89a3      	ldrhlt	r3, [r4, #12]
 80068f8:	181b      	addge	r3, r3, r0
 80068fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80068fe:	bfac      	ite	ge
 8006900:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006902:	81a3      	strhlt	r3, [r4, #12]
 8006904:	bd10      	pop	{r4, pc}

08006906 <__swrite>:
 8006906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800690a:	461f      	mov	r7, r3
 800690c:	898b      	ldrh	r3, [r1, #12]
 800690e:	4605      	mov	r5, r0
 8006910:	05db      	lsls	r3, r3, #23
 8006912:	460c      	mov	r4, r1
 8006914:	4616      	mov	r6, r2
 8006916:	d505      	bpl.n	8006924 <__swrite+0x1e>
 8006918:	2302      	movs	r3, #2
 800691a:	2200      	movs	r2, #0
 800691c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006920:	f000 f8d0 	bl	8006ac4 <_lseek_r>
 8006924:	89a3      	ldrh	r3, [r4, #12]
 8006926:	4632      	mov	r2, r6
 8006928:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800692c:	81a3      	strh	r3, [r4, #12]
 800692e:	4628      	mov	r0, r5
 8006930:	463b      	mov	r3, r7
 8006932:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800693a:	f000 b8f7 	b.w	8006b2c <_write_r>

0800693e <__sseek>:
 800693e:	b510      	push	{r4, lr}
 8006940:	460c      	mov	r4, r1
 8006942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006946:	f000 f8bd 	bl	8006ac4 <_lseek_r>
 800694a:	1c43      	adds	r3, r0, #1
 800694c:	89a3      	ldrh	r3, [r4, #12]
 800694e:	bf15      	itete	ne
 8006950:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006952:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006956:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800695a:	81a3      	strheq	r3, [r4, #12]
 800695c:	bf18      	it	ne
 800695e:	81a3      	strhne	r3, [r4, #12]
 8006960:	bd10      	pop	{r4, pc}

08006962 <__sclose>:
 8006962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006966:	f000 b89d 	b.w	8006aa4 <_close_r>

0800696a <__swbuf_r>:
 800696a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800696c:	460e      	mov	r6, r1
 800696e:	4614      	mov	r4, r2
 8006970:	4605      	mov	r5, r0
 8006972:	b118      	cbz	r0, 800697c <__swbuf_r+0x12>
 8006974:	6a03      	ldr	r3, [r0, #32]
 8006976:	b90b      	cbnz	r3, 800697c <__swbuf_r+0x12>
 8006978:	f7ff ff0e 	bl	8006798 <__sinit>
 800697c:	69a3      	ldr	r3, [r4, #24]
 800697e:	60a3      	str	r3, [r4, #8]
 8006980:	89a3      	ldrh	r3, [r4, #12]
 8006982:	071a      	lsls	r2, r3, #28
 8006984:	d501      	bpl.n	800698a <__swbuf_r+0x20>
 8006986:	6923      	ldr	r3, [r4, #16]
 8006988:	b943      	cbnz	r3, 800699c <__swbuf_r+0x32>
 800698a:	4621      	mov	r1, r4
 800698c:	4628      	mov	r0, r5
 800698e:	f000 f82b 	bl	80069e8 <__swsetup_r>
 8006992:	b118      	cbz	r0, 800699c <__swbuf_r+0x32>
 8006994:	f04f 37ff 	mov.w	r7, #4294967295
 8006998:	4638      	mov	r0, r7
 800699a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800699c:	6823      	ldr	r3, [r4, #0]
 800699e:	6922      	ldr	r2, [r4, #16]
 80069a0:	b2f6      	uxtb	r6, r6
 80069a2:	1a98      	subs	r0, r3, r2
 80069a4:	6963      	ldr	r3, [r4, #20]
 80069a6:	4637      	mov	r7, r6
 80069a8:	4283      	cmp	r3, r0
 80069aa:	dc05      	bgt.n	80069b8 <__swbuf_r+0x4e>
 80069ac:	4621      	mov	r1, r4
 80069ae:	4628      	mov	r0, r5
 80069b0:	f000 fc94 	bl	80072dc <_fflush_r>
 80069b4:	2800      	cmp	r0, #0
 80069b6:	d1ed      	bne.n	8006994 <__swbuf_r+0x2a>
 80069b8:	68a3      	ldr	r3, [r4, #8]
 80069ba:	3b01      	subs	r3, #1
 80069bc:	60a3      	str	r3, [r4, #8]
 80069be:	6823      	ldr	r3, [r4, #0]
 80069c0:	1c5a      	adds	r2, r3, #1
 80069c2:	6022      	str	r2, [r4, #0]
 80069c4:	701e      	strb	r6, [r3, #0]
 80069c6:	6962      	ldr	r2, [r4, #20]
 80069c8:	1c43      	adds	r3, r0, #1
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d004      	beq.n	80069d8 <__swbuf_r+0x6e>
 80069ce:	89a3      	ldrh	r3, [r4, #12]
 80069d0:	07db      	lsls	r3, r3, #31
 80069d2:	d5e1      	bpl.n	8006998 <__swbuf_r+0x2e>
 80069d4:	2e0a      	cmp	r6, #10
 80069d6:	d1df      	bne.n	8006998 <__swbuf_r+0x2e>
 80069d8:	4621      	mov	r1, r4
 80069da:	4628      	mov	r0, r5
 80069dc:	f000 fc7e 	bl	80072dc <_fflush_r>
 80069e0:	2800      	cmp	r0, #0
 80069e2:	d0d9      	beq.n	8006998 <__swbuf_r+0x2e>
 80069e4:	e7d6      	b.n	8006994 <__swbuf_r+0x2a>
	...

080069e8 <__swsetup_r>:
 80069e8:	b538      	push	{r3, r4, r5, lr}
 80069ea:	4b29      	ldr	r3, [pc, #164]	@ (8006a90 <__swsetup_r+0xa8>)
 80069ec:	4605      	mov	r5, r0
 80069ee:	6818      	ldr	r0, [r3, #0]
 80069f0:	460c      	mov	r4, r1
 80069f2:	b118      	cbz	r0, 80069fc <__swsetup_r+0x14>
 80069f4:	6a03      	ldr	r3, [r0, #32]
 80069f6:	b90b      	cbnz	r3, 80069fc <__swsetup_r+0x14>
 80069f8:	f7ff fece 	bl	8006798 <__sinit>
 80069fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a00:	0719      	lsls	r1, r3, #28
 8006a02:	d422      	bmi.n	8006a4a <__swsetup_r+0x62>
 8006a04:	06da      	lsls	r2, r3, #27
 8006a06:	d407      	bmi.n	8006a18 <__swsetup_r+0x30>
 8006a08:	2209      	movs	r2, #9
 8006a0a:	602a      	str	r2, [r5, #0]
 8006a0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a10:	f04f 30ff 	mov.w	r0, #4294967295
 8006a14:	81a3      	strh	r3, [r4, #12]
 8006a16:	e033      	b.n	8006a80 <__swsetup_r+0x98>
 8006a18:	0758      	lsls	r0, r3, #29
 8006a1a:	d512      	bpl.n	8006a42 <__swsetup_r+0x5a>
 8006a1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a1e:	b141      	cbz	r1, 8006a32 <__swsetup_r+0x4a>
 8006a20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a24:	4299      	cmp	r1, r3
 8006a26:	d002      	beq.n	8006a2e <__swsetup_r+0x46>
 8006a28:	4628      	mov	r0, r5
 8006a2a:	f000 f8bf 	bl	8006bac <_free_r>
 8006a2e:	2300      	movs	r3, #0
 8006a30:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a32:	89a3      	ldrh	r3, [r4, #12]
 8006a34:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006a38:	81a3      	strh	r3, [r4, #12]
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	6063      	str	r3, [r4, #4]
 8006a3e:	6923      	ldr	r3, [r4, #16]
 8006a40:	6023      	str	r3, [r4, #0]
 8006a42:	89a3      	ldrh	r3, [r4, #12]
 8006a44:	f043 0308 	orr.w	r3, r3, #8
 8006a48:	81a3      	strh	r3, [r4, #12]
 8006a4a:	6923      	ldr	r3, [r4, #16]
 8006a4c:	b94b      	cbnz	r3, 8006a62 <__swsetup_r+0x7a>
 8006a4e:	89a3      	ldrh	r3, [r4, #12]
 8006a50:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006a54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a58:	d003      	beq.n	8006a62 <__swsetup_r+0x7a>
 8006a5a:	4621      	mov	r1, r4
 8006a5c:	4628      	mov	r0, r5
 8006a5e:	f000 fc8a 	bl	8007376 <__smakebuf_r>
 8006a62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a66:	f013 0201 	ands.w	r2, r3, #1
 8006a6a:	d00a      	beq.n	8006a82 <__swsetup_r+0x9a>
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	60a2      	str	r2, [r4, #8]
 8006a70:	6962      	ldr	r2, [r4, #20]
 8006a72:	4252      	negs	r2, r2
 8006a74:	61a2      	str	r2, [r4, #24]
 8006a76:	6922      	ldr	r2, [r4, #16]
 8006a78:	b942      	cbnz	r2, 8006a8c <__swsetup_r+0xa4>
 8006a7a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006a7e:	d1c5      	bne.n	8006a0c <__swsetup_r+0x24>
 8006a80:	bd38      	pop	{r3, r4, r5, pc}
 8006a82:	0799      	lsls	r1, r3, #30
 8006a84:	bf58      	it	pl
 8006a86:	6962      	ldrpl	r2, [r4, #20]
 8006a88:	60a2      	str	r2, [r4, #8]
 8006a8a:	e7f4      	b.n	8006a76 <__swsetup_r+0x8e>
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	e7f7      	b.n	8006a80 <__swsetup_r+0x98>
 8006a90:	20000188 	.word	0x20000188

08006a94 <memset>:
 8006a94:	4603      	mov	r3, r0
 8006a96:	4402      	add	r2, r0
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d100      	bne.n	8006a9e <memset+0xa>
 8006a9c:	4770      	bx	lr
 8006a9e:	f803 1b01 	strb.w	r1, [r3], #1
 8006aa2:	e7f9      	b.n	8006a98 <memset+0x4>

08006aa4 <_close_r>:
 8006aa4:	b538      	push	{r3, r4, r5, lr}
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	4d05      	ldr	r5, [pc, #20]	@ (8006ac0 <_close_r+0x1c>)
 8006aaa:	4604      	mov	r4, r0
 8006aac:	4608      	mov	r0, r1
 8006aae:	602b      	str	r3, [r5, #0]
 8006ab0:	f7f9 fefb 	bl	80008aa <_close>
 8006ab4:	1c43      	adds	r3, r0, #1
 8006ab6:	d102      	bne.n	8006abe <_close_r+0x1a>
 8006ab8:	682b      	ldr	r3, [r5, #0]
 8006aba:	b103      	cbz	r3, 8006abe <_close_r+0x1a>
 8006abc:	6023      	str	r3, [r4, #0]
 8006abe:	bd38      	pop	{r3, r4, r5, pc}
 8006ac0:	20001ce4 	.word	0x20001ce4

08006ac4 <_lseek_r>:
 8006ac4:	b538      	push	{r3, r4, r5, lr}
 8006ac6:	4604      	mov	r4, r0
 8006ac8:	4608      	mov	r0, r1
 8006aca:	4611      	mov	r1, r2
 8006acc:	2200      	movs	r2, #0
 8006ace:	4d05      	ldr	r5, [pc, #20]	@ (8006ae4 <_lseek_r+0x20>)
 8006ad0:	602a      	str	r2, [r5, #0]
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	f7f9 ff0d 	bl	80008f2 <_lseek>
 8006ad8:	1c43      	adds	r3, r0, #1
 8006ada:	d102      	bne.n	8006ae2 <_lseek_r+0x1e>
 8006adc:	682b      	ldr	r3, [r5, #0]
 8006ade:	b103      	cbz	r3, 8006ae2 <_lseek_r+0x1e>
 8006ae0:	6023      	str	r3, [r4, #0]
 8006ae2:	bd38      	pop	{r3, r4, r5, pc}
 8006ae4:	20001ce4 	.word	0x20001ce4

08006ae8 <_read_r>:
 8006ae8:	b538      	push	{r3, r4, r5, lr}
 8006aea:	4604      	mov	r4, r0
 8006aec:	4608      	mov	r0, r1
 8006aee:	4611      	mov	r1, r2
 8006af0:	2200      	movs	r2, #0
 8006af2:	4d05      	ldr	r5, [pc, #20]	@ (8006b08 <_read_r+0x20>)
 8006af4:	602a      	str	r2, [r5, #0]
 8006af6:	461a      	mov	r2, r3
 8006af8:	f7f9 feba 	bl	8000870 <_read>
 8006afc:	1c43      	adds	r3, r0, #1
 8006afe:	d102      	bne.n	8006b06 <_read_r+0x1e>
 8006b00:	682b      	ldr	r3, [r5, #0]
 8006b02:	b103      	cbz	r3, 8006b06 <_read_r+0x1e>
 8006b04:	6023      	str	r3, [r4, #0]
 8006b06:	bd38      	pop	{r3, r4, r5, pc}
 8006b08:	20001ce4 	.word	0x20001ce4

08006b0c <_sbrk_r>:
 8006b0c:	b538      	push	{r3, r4, r5, lr}
 8006b0e:	2300      	movs	r3, #0
 8006b10:	4d05      	ldr	r5, [pc, #20]	@ (8006b28 <_sbrk_r+0x1c>)
 8006b12:	4604      	mov	r4, r0
 8006b14:	4608      	mov	r0, r1
 8006b16:	602b      	str	r3, [r5, #0]
 8006b18:	f7f9 fef8 	bl	800090c <_sbrk>
 8006b1c:	1c43      	adds	r3, r0, #1
 8006b1e:	d102      	bne.n	8006b26 <_sbrk_r+0x1a>
 8006b20:	682b      	ldr	r3, [r5, #0]
 8006b22:	b103      	cbz	r3, 8006b26 <_sbrk_r+0x1a>
 8006b24:	6023      	str	r3, [r4, #0]
 8006b26:	bd38      	pop	{r3, r4, r5, pc}
 8006b28:	20001ce4 	.word	0x20001ce4

08006b2c <_write_r>:
 8006b2c:	b538      	push	{r3, r4, r5, lr}
 8006b2e:	4604      	mov	r4, r0
 8006b30:	4608      	mov	r0, r1
 8006b32:	4611      	mov	r1, r2
 8006b34:	2200      	movs	r2, #0
 8006b36:	4d05      	ldr	r5, [pc, #20]	@ (8006b4c <_write_r+0x20>)
 8006b38:	602a      	str	r2, [r5, #0]
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	f7f9 fcdc 	bl	80004f8 <_write>
 8006b40:	1c43      	adds	r3, r0, #1
 8006b42:	d102      	bne.n	8006b4a <_write_r+0x1e>
 8006b44:	682b      	ldr	r3, [r5, #0]
 8006b46:	b103      	cbz	r3, 8006b4a <_write_r+0x1e>
 8006b48:	6023      	str	r3, [r4, #0]
 8006b4a:	bd38      	pop	{r3, r4, r5, pc}
 8006b4c:	20001ce4 	.word	0x20001ce4

08006b50 <__errno>:
 8006b50:	4b01      	ldr	r3, [pc, #4]	@ (8006b58 <__errno+0x8>)
 8006b52:	6818      	ldr	r0, [r3, #0]
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
 8006b58:	20000188 	.word	0x20000188

08006b5c <__libc_init_array>:
 8006b5c:	b570      	push	{r4, r5, r6, lr}
 8006b5e:	2600      	movs	r6, #0
 8006b60:	4d0c      	ldr	r5, [pc, #48]	@ (8006b94 <__libc_init_array+0x38>)
 8006b62:	4c0d      	ldr	r4, [pc, #52]	@ (8006b98 <__libc_init_array+0x3c>)
 8006b64:	1b64      	subs	r4, r4, r5
 8006b66:	10a4      	asrs	r4, r4, #2
 8006b68:	42a6      	cmp	r6, r4
 8006b6a:	d109      	bne.n	8006b80 <__libc_init_array+0x24>
 8006b6c:	f000 fc70 	bl	8007450 <_init>
 8006b70:	2600      	movs	r6, #0
 8006b72:	4d0a      	ldr	r5, [pc, #40]	@ (8006b9c <__libc_init_array+0x40>)
 8006b74:	4c0a      	ldr	r4, [pc, #40]	@ (8006ba0 <__libc_init_array+0x44>)
 8006b76:	1b64      	subs	r4, r4, r5
 8006b78:	10a4      	asrs	r4, r4, #2
 8006b7a:	42a6      	cmp	r6, r4
 8006b7c:	d105      	bne.n	8006b8a <__libc_init_array+0x2e>
 8006b7e:	bd70      	pop	{r4, r5, r6, pc}
 8006b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b84:	4798      	blx	r3
 8006b86:	3601      	adds	r6, #1
 8006b88:	e7ee      	b.n	8006b68 <__libc_init_array+0xc>
 8006b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b8e:	4798      	blx	r3
 8006b90:	3601      	adds	r6, #1
 8006b92:	e7f2      	b.n	8006b7a <__libc_init_array+0x1e>
 8006b94:	080076a0 	.word	0x080076a0
 8006b98:	080076a0 	.word	0x080076a0
 8006b9c:	080076a0 	.word	0x080076a0
 8006ba0:	080076a4 	.word	0x080076a4

08006ba4 <__retarget_lock_init_recursive>:
 8006ba4:	4770      	bx	lr

08006ba6 <__retarget_lock_acquire_recursive>:
 8006ba6:	4770      	bx	lr

08006ba8 <__retarget_lock_release_recursive>:
 8006ba8:	4770      	bx	lr
	...

08006bac <_free_r>:
 8006bac:	b538      	push	{r3, r4, r5, lr}
 8006bae:	4605      	mov	r5, r0
 8006bb0:	2900      	cmp	r1, #0
 8006bb2:	d040      	beq.n	8006c36 <_free_r+0x8a>
 8006bb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bb8:	1f0c      	subs	r4, r1, #4
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	bfb8      	it	lt
 8006bbe:	18e4      	addlt	r4, r4, r3
 8006bc0:	f7ff fd52 	bl	8006668 <__malloc_lock>
 8006bc4:	4a1c      	ldr	r2, [pc, #112]	@ (8006c38 <_free_r+0x8c>)
 8006bc6:	6813      	ldr	r3, [r2, #0]
 8006bc8:	b933      	cbnz	r3, 8006bd8 <_free_r+0x2c>
 8006bca:	6063      	str	r3, [r4, #4]
 8006bcc:	6014      	str	r4, [r2, #0]
 8006bce:	4628      	mov	r0, r5
 8006bd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bd4:	f7ff bd4e 	b.w	8006674 <__malloc_unlock>
 8006bd8:	42a3      	cmp	r3, r4
 8006bda:	d908      	bls.n	8006bee <_free_r+0x42>
 8006bdc:	6820      	ldr	r0, [r4, #0]
 8006bde:	1821      	adds	r1, r4, r0
 8006be0:	428b      	cmp	r3, r1
 8006be2:	bf01      	itttt	eq
 8006be4:	6819      	ldreq	r1, [r3, #0]
 8006be6:	685b      	ldreq	r3, [r3, #4]
 8006be8:	1809      	addeq	r1, r1, r0
 8006bea:	6021      	streq	r1, [r4, #0]
 8006bec:	e7ed      	b.n	8006bca <_free_r+0x1e>
 8006bee:	461a      	mov	r2, r3
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	b10b      	cbz	r3, 8006bf8 <_free_r+0x4c>
 8006bf4:	42a3      	cmp	r3, r4
 8006bf6:	d9fa      	bls.n	8006bee <_free_r+0x42>
 8006bf8:	6811      	ldr	r1, [r2, #0]
 8006bfa:	1850      	adds	r0, r2, r1
 8006bfc:	42a0      	cmp	r0, r4
 8006bfe:	d10b      	bne.n	8006c18 <_free_r+0x6c>
 8006c00:	6820      	ldr	r0, [r4, #0]
 8006c02:	4401      	add	r1, r0
 8006c04:	1850      	adds	r0, r2, r1
 8006c06:	4283      	cmp	r3, r0
 8006c08:	6011      	str	r1, [r2, #0]
 8006c0a:	d1e0      	bne.n	8006bce <_free_r+0x22>
 8006c0c:	6818      	ldr	r0, [r3, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	4408      	add	r0, r1
 8006c12:	6010      	str	r0, [r2, #0]
 8006c14:	6053      	str	r3, [r2, #4]
 8006c16:	e7da      	b.n	8006bce <_free_r+0x22>
 8006c18:	d902      	bls.n	8006c20 <_free_r+0x74>
 8006c1a:	230c      	movs	r3, #12
 8006c1c:	602b      	str	r3, [r5, #0]
 8006c1e:	e7d6      	b.n	8006bce <_free_r+0x22>
 8006c20:	6820      	ldr	r0, [r4, #0]
 8006c22:	1821      	adds	r1, r4, r0
 8006c24:	428b      	cmp	r3, r1
 8006c26:	bf01      	itttt	eq
 8006c28:	6819      	ldreq	r1, [r3, #0]
 8006c2a:	685b      	ldreq	r3, [r3, #4]
 8006c2c:	1809      	addeq	r1, r1, r0
 8006c2e:	6021      	streq	r1, [r4, #0]
 8006c30:	6063      	str	r3, [r4, #4]
 8006c32:	6054      	str	r4, [r2, #4]
 8006c34:	e7cb      	b.n	8006bce <_free_r+0x22>
 8006c36:	bd38      	pop	{r3, r4, r5, pc}
 8006c38:	20001ba4 	.word	0x20001ba4

08006c3c <__sfputc_r>:
 8006c3c:	6893      	ldr	r3, [r2, #8]
 8006c3e:	b410      	push	{r4}
 8006c40:	3b01      	subs	r3, #1
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	6093      	str	r3, [r2, #8]
 8006c46:	da07      	bge.n	8006c58 <__sfputc_r+0x1c>
 8006c48:	6994      	ldr	r4, [r2, #24]
 8006c4a:	42a3      	cmp	r3, r4
 8006c4c:	db01      	blt.n	8006c52 <__sfputc_r+0x16>
 8006c4e:	290a      	cmp	r1, #10
 8006c50:	d102      	bne.n	8006c58 <__sfputc_r+0x1c>
 8006c52:	bc10      	pop	{r4}
 8006c54:	f7ff be89 	b.w	800696a <__swbuf_r>
 8006c58:	6813      	ldr	r3, [r2, #0]
 8006c5a:	1c58      	adds	r0, r3, #1
 8006c5c:	6010      	str	r0, [r2, #0]
 8006c5e:	7019      	strb	r1, [r3, #0]
 8006c60:	4608      	mov	r0, r1
 8006c62:	bc10      	pop	{r4}
 8006c64:	4770      	bx	lr

08006c66 <__sfputs_r>:
 8006c66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c68:	4606      	mov	r6, r0
 8006c6a:	460f      	mov	r7, r1
 8006c6c:	4614      	mov	r4, r2
 8006c6e:	18d5      	adds	r5, r2, r3
 8006c70:	42ac      	cmp	r4, r5
 8006c72:	d101      	bne.n	8006c78 <__sfputs_r+0x12>
 8006c74:	2000      	movs	r0, #0
 8006c76:	e007      	b.n	8006c88 <__sfputs_r+0x22>
 8006c78:	463a      	mov	r2, r7
 8006c7a:	4630      	mov	r0, r6
 8006c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c80:	f7ff ffdc 	bl	8006c3c <__sfputc_r>
 8006c84:	1c43      	adds	r3, r0, #1
 8006c86:	d1f3      	bne.n	8006c70 <__sfputs_r+0xa>
 8006c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c8c <_vfiprintf_r>:
 8006c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c90:	460d      	mov	r5, r1
 8006c92:	4614      	mov	r4, r2
 8006c94:	4698      	mov	r8, r3
 8006c96:	4606      	mov	r6, r0
 8006c98:	b09d      	sub	sp, #116	@ 0x74
 8006c9a:	b118      	cbz	r0, 8006ca4 <_vfiprintf_r+0x18>
 8006c9c:	6a03      	ldr	r3, [r0, #32]
 8006c9e:	b90b      	cbnz	r3, 8006ca4 <_vfiprintf_r+0x18>
 8006ca0:	f7ff fd7a 	bl	8006798 <__sinit>
 8006ca4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ca6:	07d9      	lsls	r1, r3, #31
 8006ca8:	d405      	bmi.n	8006cb6 <_vfiprintf_r+0x2a>
 8006caa:	89ab      	ldrh	r3, [r5, #12]
 8006cac:	059a      	lsls	r2, r3, #22
 8006cae:	d402      	bmi.n	8006cb6 <_vfiprintf_r+0x2a>
 8006cb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cb2:	f7ff ff78 	bl	8006ba6 <__retarget_lock_acquire_recursive>
 8006cb6:	89ab      	ldrh	r3, [r5, #12]
 8006cb8:	071b      	lsls	r3, r3, #28
 8006cba:	d501      	bpl.n	8006cc0 <_vfiprintf_r+0x34>
 8006cbc:	692b      	ldr	r3, [r5, #16]
 8006cbe:	b99b      	cbnz	r3, 8006ce8 <_vfiprintf_r+0x5c>
 8006cc0:	4629      	mov	r1, r5
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	f7ff fe90 	bl	80069e8 <__swsetup_r>
 8006cc8:	b170      	cbz	r0, 8006ce8 <_vfiprintf_r+0x5c>
 8006cca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ccc:	07dc      	lsls	r4, r3, #31
 8006cce:	d504      	bpl.n	8006cda <_vfiprintf_r+0x4e>
 8006cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd4:	b01d      	add	sp, #116	@ 0x74
 8006cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cda:	89ab      	ldrh	r3, [r5, #12]
 8006cdc:	0598      	lsls	r0, r3, #22
 8006cde:	d4f7      	bmi.n	8006cd0 <_vfiprintf_r+0x44>
 8006ce0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006ce2:	f7ff ff61 	bl	8006ba8 <__retarget_lock_release_recursive>
 8006ce6:	e7f3      	b.n	8006cd0 <_vfiprintf_r+0x44>
 8006ce8:	2300      	movs	r3, #0
 8006cea:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cec:	2320      	movs	r3, #32
 8006cee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006cf2:	2330      	movs	r3, #48	@ 0x30
 8006cf4:	f04f 0901 	mov.w	r9, #1
 8006cf8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cfc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006ea8 <_vfiprintf_r+0x21c>
 8006d00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006d04:	4623      	mov	r3, r4
 8006d06:	469a      	mov	sl, r3
 8006d08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d0c:	b10a      	cbz	r2, 8006d12 <_vfiprintf_r+0x86>
 8006d0e:	2a25      	cmp	r2, #37	@ 0x25
 8006d10:	d1f9      	bne.n	8006d06 <_vfiprintf_r+0x7a>
 8006d12:	ebba 0b04 	subs.w	fp, sl, r4
 8006d16:	d00b      	beq.n	8006d30 <_vfiprintf_r+0xa4>
 8006d18:	465b      	mov	r3, fp
 8006d1a:	4622      	mov	r2, r4
 8006d1c:	4629      	mov	r1, r5
 8006d1e:	4630      	mov	r0, r6
 8006d20:	f7ff ffa1 	bl	8006c66 <__sfputs_r>
 8006d24:	3001      	adds	r0, #1
 8006d26:	f000 80a7 	beq.w	8006e78 <_vfiprintf_r+0x1ec>
 8006d2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d2c:	445a      	add	r2, fp
 8006d2e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d30:	f89a 3000 	ldrb.w	r3, [sl]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f000 809f 	beq.w	8006e78 <_vfiprintf_r+0x1ec>
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d44:	f10a 0a01 	add.w	sl, sl, #1
 8006d48:	9304      	str	r3, [sp, #16]
 8006d4a:	9307      	str	r3, [sp, #28]
 8006d4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006d50:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d52:	4654      	mov	r4, sl
 8006d54:	2205      	movs	r2, #5
 8006d56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d5a:	4853      	ldr	r0, [pc, #332]	@ (8006ea8 <_vfiprintf_r+0x21c>)
 8006d5c:	f000 fb6a 	bl	8007434 <memchr>
 8006d60:	9a04      	ldr	r2, [sp, #16]
 8006d62:	b9d8      	cbnz	r0, 8006d9c <_vfiprintf_r+0x110>
 8006d64:	06d1      	lsls	r1, r2, #27
 8006d66:	bf44      	itt	mi
 8006d68:	2320      	movmi	r3, #32
 8006d6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d6e:	0713      	lsls	r3, r2, #28
 8006d70:	bf44      	itt	mi
 8006d72:	232b      	movmi	r3, #43	@ 0x2b
 8006d74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d78:	f89a 3000 	ldrb.w	r3, [sl]
 8006d7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d7e:	d015      	beq.n	8006dac <_vfiprintf_r+0x120>
 8006d80:	4654      	mov	r4, sl
 8006d82:	2000      	movs	r0, #0
 8006d84:	f04f 0c0a 	mov.w	ip, #10
 8006d88:	9a07      	ldr	r2, [sp, #28]
 8006d8a:	4621      	mov	r1, r4
 8006d8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d90:	3b30      	subs	r3, #48	@ 0x30
 8006d92:	2b09      	cmp	r3, #9
 8006d94:	d94b      	bls.n	8006e2e <_vfiprintf_r+0x1a2>
 8006d96:	b1b0      	cbz	r0, 8006dc6 <_vfiprintf_r+0x13a>
 8006d98:	9207      	str	r2, [sp, #28]
 8006d9a:	e014      	b.n	8006dc6 <_vfiprintf_r+0x13a>
 8006d9c:	eba0 0308 	sub.w	r3, r0, r8
 8006da0:	fa09 f303 	lsl.w	r3, r9, r3
 8006da4:	4313      	orrs	r3, r2
 8006da6:	46a2      	mov	sl, r4
 8006da8:	9304      	str	r3, [sp, #16]
 8006daa:	e7d2      	b.n	8006d52 <_vfiprintf_r+0xc6>
 8006dac:	9b03      	ldr	r3, [sp, #12]
 8006dae:	1d19      	adds	r1, r3, #4
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	9103      	str	r1, [sp, #12]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	bfbb      	ittet	lt
 8006db8:	425b      	neglt	r3, r3
 8006dba:	f042 0202 	orrlt.w	r2, r2, #2
 8006dbe:	9307      	strge	r3, [sp, #28]
 8006dc0:	9307      	strlt	r3, [sp, #28]
 8006dc2:	bfb8      	it	lt
 8006dc4:	9204      	strlt	r2, [sp, #16]
 8006dc6:	7823      	ldrb	r3, [r4, #0]
 8006dc8:	2b2e      	cmp	r3, #46	@ 0x2e
 8006dca:	d10a      	bne.n	8006de2 <_vfiprintf_r+0x156>
 8006dcc:	7863      	ldrb	r3, [r4, #1]
 8006dce:	2b2a      	cmp	r3, #42	@ 0x2a
 8006dd0:	d132      	bne.n	8006e38 <_vfiprintf_r+0x1ac>
 8006dd2:	9b03      	ldr	r3, [sp, #12]
 8006dd4:	3402      	adds	r4, #2
 8006dd6:	1d1a      	adds	r2, r3, #4
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	9203      	str	r2, [sp, #12]
 8006ddc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006de0:	9305      	str	r3, [sp, #20]
 8006de2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006eac <_vfiprintf_r+0x220>
 8006de6:	2203      	movs	r2, #3
 8006de8:	4650      	mov	r0, sl
 8006dea:	7821      	ldrb	r1, [r4, #0]
 8006dec:	f000 fb22 	bl	8007434 <memchr>
 8006df0:	b138      	cbz	r0, 8006e02 <_vfiprintf_r+0x176>
 8006df2:	2240      	movs	r2, #64	@ 0x40
 8006df4:	9b04      	ldr	r3, [sp, #16]
 8006df6:	eba0 000a 	sub.w	r0, r0, sl
 8006dfa:	4082      	lsls	r2, r0
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	3401      	adds	r4, #1
 8006e00:	9304      	str	r3, [sp, #16]
 8006e02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e06:	2206      	movs	r2, #6
 8006e08:	4829      	ldr	r0, [pc, #164]	@ (8006eb0 <_vfiprintf_r+0x224>)
 8006e0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006e0e:	f000 fb11 	bl	8007434 <memchr>
 8006e12:	2800      	cmp	r0, #0
 8006e14:	d03f      	beq.n	8006e96 <_vfiprintf_r+0x20a>
 8006e16:	4b27      	ldr	r3, [pc, #156]	@ (8006eb4 <_vfiprintf_r+0x228>)
 8006e18:	bb1b      	cbnz	r3, 8006e62 <_vfiprintf_r+0x1d6>
 8006e1a:	9b03      	ldr	r3, [sp, #12]
 8006e1c:	3307      	adds	r3, #7
 8006e1e:	f023 0307 	bic.w	r3, r3, #7
 8006e22:	3308      	adds	r3, #8
 8006e24:	9303      	str	r3, [sp, #12]
 8006e26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e28:	443b      	add	r3, r7
 8006e2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e2c:	e76a      	b.n	8006d04 <_vfiprintf_r+0x78>
 8006e2e:	460c      	mov	r4, r1
 8006e30:	2001      	movs	r0, #1
 8006e32:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e36:	e7a8      	b.n	8006d8a <_vfiprintf_r+0xfe>
 8006e38:	2300      	movs	r3, #0
 8006e3a:	f04f 0c0a 	mov.w	ip, #10
 8006e3e:	4619      	mov	r1, r3
 8006e40:	3401      	adds	r4, #1
 8006e42:	9305      	str	r3, [sp, #20]
 8006e44:	4620      	mov	r0, r4
 8006e46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e4a:	3a30      	subs	r2, #48	@ 0x30
 8006e4c:	2a09      	cmp	r2, #9
 8006e4e:	d903      	bls.n	8006e58 <_vfiprintf_r+0x1cc>
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d0c6      	beq.n	8006de2 <_vfiprintf_r+0x156>
 8006e54:	9105      	str	r1, [sp, #20]
 8006e56:	e7c4      	b.n	8006de2 <_vfiprintf_r+0x156>
 8006e58:	4604      	mov	r4, r0
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e60:	e7f0      	b.n	8006e44 <_vfiprintf_r+0x1b8>
 8006e62:	ab03      	add	r3, sp, #12
 8006e64:	9300      	str	r3, [sp, #0]
 8006e66:	462a      	mov	r2, r5
 8006e68:	4630      	mov	r0, r6
 8006e6a:	4b13      	ldr	r3, [pc, #76]	@ (8006eb8 <_vfiprintf_r+0x22c>)
 8006e6c:	a904      	add	r1, sp, #16
 8006e6e:	f3af 8000 	nop.w
 8006e72:	4607      	mov	r7, r0
 8006e74:	1c78      	adds	r0, r7, #1
 8006e76:	d1d6      	bne.n	8006e26 <_vfiprintf_r+0x19a>
 8006e78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e7a:	07d9      	lsls	r1, r3, #31
 8006e7c:	d405      	bmi.n	8006e8a <_vfiprintf_r+0x1fe>
 8006e7e:	89ab      	ldrh	r3, [r5, #12]
 8006e80:	059a      	lsls	r2, r3, #22
 8006e82:	d402      	bmi.n	8006e8a <_vfiprintf_r+0x1fe>
 8006e84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e86:	f7ff fe8f 	bl	8006ba8 <__retarget_lock_release_recursive>
 8006e8a:	89ab      	ldrh	r3, [r5, #12]
 8006e8c:	065b      	lsls	r3, r3, #25
 8006e8e:	f53f af1f 	bmi.w	8006cd0 <_vfiprintf_r+0x44>
 8006e92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e94:	e71e      	b.n	8006cd4 <_vfiprintf_r+0x48>
 8006e96:	ab03      	add	r3, sp, #12
 8006e98:	9300      	str	r3, [sp, #0]
 8006e9a:	462a      	mov	r2, r5
 8006e9c:	4630      	mov	r0, r6
 8006e9e:	4b06      	ldr	r3, [pc, #24]	@ (8006eb8 <_vfiprintf_r+0x22c>)
 8006ea0:	a904      	add	r1, sp, #16
 8006ea2:	f000 f87d 	bl	8006fa0 <_printf_i>
 8006ea6:	e7e4      	b.n	8006e72 <_vfiprintf_r+0x1e6>
 8006ea8:	08007664 	.word	0x08007664
 8006eac:	0800766a 	.word	0x0800766a
 8006eb0:	0800766e 	.word	0x0800766e
 8006eb4:	00000000 	.word	0x00000000
 8006eb8:	08006c67 	.word	0x08006c67

08006ebc <_printf_common>:
 8006ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ec0:	4616      	mov	r6, r2
 8006ec2:	4698      	mov	r8, r3
 8006ec4:	688a      	ldr	r2, [r1, #8]
 8006ec6:	690b      	ldr	r3, [r1, #16]
 8006ec8:	4607      	mov	r7, r0
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	bfb8      	it	lt
 8006ece:	4613      	movlt	r3, r2
 8006ed0:	6033      	str	r3, [r6, #0]
 8006ed2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ed6:	460c      	mov	r4, r1
 8006ed8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006edc:	b10a      	cbz	r2, 8006ee2 <_printf_common+0x26>
 8006ede:	3301      	adds	r3, #1
 8006ee0:	6033      	str	r3, [r6, #0]
 8006ee2:	6823      	ldr	r3, [r4, #0]
 8006ee4:	0699      	lsls	r1, r3, #26
 8006ee6:	bf42      	ittt	mi
 8006ee8:	6833      	ldrmi	r3, [r6, #0]
 8006eea:	3302      	addmi	r3, #2
 8006eec:	6033      	strmi	r3, [r6, #0]
 8006eee:	6825      	ldr	r5, [r4, #0]
 8006ef0:	f015 0506 	ands.w	r5, r5, #6
 8006ef4:	d106      	bne.n	8006f04 <_printf_common+0x48>
 8006ef6:	f104 0a19 	add.w	sl, r4, #25
 8006efa:	68e3      	ldr	r3, [r4, #12]
 8006efc:	6832      	ldr	r2, [r6, #0]
 8006efe:	1a9b      	subs	r3, r3, r2
 8006f00:	42ab      	cmp	r3, r5
 8006f02:	dc2b      	bgt.n	8006f5c <_printf_common+0xa0>
 8006f04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006f08:	6822      	ldr	r2, [r4, #0]
 8006f0a:	3b00      	subs	r3, #0
 8006f0c:	bf18      	it	ne
 8006f0e:	2301      	movne	r3, #1
 8006f10:	0692      	lsls	r2, r2, #26
 8006f12:	d430      	bmi.n	8006f76 <_printf_common+0xba>
 8006f14:	4641      	mov	r1, r8
 8006f16:	4638      	mov	r0, r7
 8006f18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f1c:	47c8      	blx	r9
 8006f1e:	3001      	adds	r0, #1
 8006f20:	d023      	beq.n	8006f6a <_printf_common+0xae>
 8006f22:	6823      	ldr	r3, [r4, #0]
 8006f24:	6922      	ldr	r2, [r4, #16]
 8006f26:	f003 0306 	and.w	r3, r3, #6
 8006f2a:	2b04      	cmp	r3, #4
 8006f2c:	bf14      	ite	ne
 8006f2e:	2500      	movne	r5, #0
 8006f30:	6833      	ldreq	r3, [r6, #0]
 8006f32:	f04f 0600 	mov.w	r6, #0
 8006f36:	bf08      	it	eq
 8006f38:	68e5      	ldreq	r5, [r4, #12]
 8006f3a:	f104 041a 	add.w	r4, r4, #26
 8006f3e:	bf08      	it	eq
 8006f40:	1aed      	subeq	r5, r5, r3
 8006f42:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006f46:	bf08      	it	eq
 8006f48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	bfc4      	itt	gt
 8006f50:	1a9b      	subgt	r3, r3, r2
 8006f52:	18ed      	addgt	r5, r5, r3
 8006f54:	42b5      	cmp	r5, r6
 8006f56:	d11a      	bne.n	8006f8e <_printf_common+0xd2>
 8006f58:	2000      	movs	r0, #0
 8006f5a:	e008      	b.n	8006f6e <_printf_common+0xb2>
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	4652      	mov	r2, sl
 8006f60:	4641      	mov	r1, r8
 8006f62:	4638      	mov	r0, r7
 8006f64:	47c8      	blx	r9
 8006f66:	3001      	adds	r0, #1
 8006f68:	d103      	bne.n	8006f72 <_printf_common+0xb6>
 8006f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f72:	3501      	adds	r5, #1
 8006f74:	e7c1      	b.n	8006efa <_printf_common+0x3e>
 8006f76:	2030      	movs	r0, #48	@ 0x30
 8006f78:	18e1      	adds	r1, r4, r3
 8006f7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006f7e:	1c5a      	adds	r2, r3, #1
 8006f80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f84:	4422      	add	r2, r4
 8006f86:	3302      	adds	r3, #2
 8006f88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f8c:	e7c2      	b.n	8006f14 <_printf_common+0x58>
 8006f8e:	2301      	movs	r3, #1
 8006f90:	4622      	mov	r2, r4
 8006f92:	4641      	mov	r1, r8
 8006f94:	4638      	mov	r0, r7
 8006f96:	47c8      	blx	r9
 8006f98:	3001      	adds	r0, #1
 8006f9a:	d0e6      	beq.n	8006f6a <_printf_common+0xae>
 8006f9c:	3601      	adds	r6, #1
 8006f9e:	e7d9      	b.n	8006f54 <_printf_common+0x98>

08006fa0 <_printf_i>:
 8006fa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fa4:	7e0f      	ldrb	r7, [r1, #24]
 8006fa6:	4691      	mov	r9, r2
 8006fa8:	2f78      	cmp	r7, #120	@ 0x78
 8006faa:	4680      	mov	r8, r0
 8006fac:	460c      	mov	r4, r1
 8006fae:	469a      	mov	sl, r3
 8006fb0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006fb2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006fb6:	d807      	bhi.n	8006fc8 <_printf_i+0x28>
 8006fb8:	2f62      	cmp	r7, #98	@ 0x62
 8006fba:	d80a      	bhi.n	8006fd2 <_printf_i+0x32>
 8006fbc:	2f00      	cmp	r7, #0
 8006fbe:	f000 80d1 	beq.w	8007164 <_printf_i+0x1c4>
 8006fc2:	2f58      	cmp	r7, #88	@ 0x58
 8006fc4:	f000 80b8 	beq.w	8007138 <_printf_i+0x198>
 8006fc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fcc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006fd0:	e03a      	b.n	8007048 <_printf_i+0xa8>
 8006fd2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006fd6:	2b15      	cmp	r3, #21
 8006fd8:	d8f6      	bhi.n	8006fc8 <_printf_i+0x28>
 8006fda:	a101      	add	r1, pc, #4	@ (adr r1, 8006fe0 <_printf_i+0x40>)
 8006fdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fe0:	08007039 	.word	0x08007039
 8006fe4:	0800704d 	.word	0x0800704d
 8006fe8:	08006fc9 	.word	0x08006fc9
 8006fec:	08006fc9 	.word	0x08006fc9
 8006ff0:	08006fc9 	.word	0x08006fc9
 8006ff4:	08006fc9 	.word	0x08006fc9
 8006ff8:	0800704d 	.word	0x0800704d
 8006ffc:	08006fc9 	.word	0x08006fc9
 8007000:	08006fc9 	.word	0x08006fc9
 8007004:	08006fc9 	.word	0x08006fc9
 8007008:	08006fc9 	.word	0x08006fc9
 800700c:	0800714b 	.word	0x0800714b
 8007010:	08007077 	.word	0x08007077
 8007014:	08007105 	.word	0x08007105
 8007018:	08006fc9 	.word	0x08006fc9
 800701c:	08006fc9 	.word	0x08006fc9
 8007020:	0800716d 	.word	0x0800716d
 8007024:	08006fc9 	.word	0x08006fc9
 8007028:	08007077 	.word	0x08007077
 800702c:	08006fc9 	.word	0x08006fc9
 8007030:	08006fc9 	.word	0x08006fc9
 8007034:	0800710d 	.word	0x0800710d
 8007038:	6833      	ldr	r3, [r6, #0]
 800703a:	1d1a      	adds	r2, r3, #4
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	6032      	str	r2, [r6, #0]
 8007040:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007044:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007048:	2301      	movs	r3, #1
 800704a:	e09c      	b.n	8007186 <_printf_i+0x1e6>
 800704c:	6833      	ldr	r3, [r6, #0]
 800704e:	6820      	ldr	r0, [r4, #0]
 8007050:	1d19      	adds	r1, r3, #4
 8007052:	6031      	str	r1, [r6, #0]
 8007054:	0606      	lsls	r6, r0, #24
 8007056:	d501      	bpl.n	800705c <_printf_i+0xbc>
 8007058:	681d      	ldr	r5, [r3, #0]
 800705a:	e003      	b.n	8007064 <_printf_i+0xc4>
 800705c:	0645      	lsls	r5, r0, #25
 800705e:	d5fb      	bpl.n	8007058 <_printf_i+0xb8>
 8007060:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007064:	2d00      	cmp	r5, #0
 8007066:	da03      	bge.n	8007070 <_printf_i+0xd0>
 8007068:	232d      	movs	r3, #45	@ 0x2d
 800706a:	426d      	negs	r5, r5
 800706c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007070:	230a      	movs	r3, #10
 8007072:	4858      	ldr	r0, [pc, #352]	@ (80071d4 <_printf_i+0x234>)
 8007074:	e011      	b.n	800709a <_printf_i+0xfa>
 8007076:	6821      	ldr	r1, [r4, #0]
 8007078:	6833      	ldr	r3, [r6, #0]
 800707a:	0608      	lsls	r0, r1, #24
 800707c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007080:	d402      	bmi.n	8007088 <_printf_i+0xe8>
 8007082:	0649      	lsls	r1, r1, #25
 8007084:	bf48      	it	mi
 8007086:	b2ad      	uxthmi	r5, r5
 8007088:	2f6f      	cmp	r7, #111	@ 0x6f
 800708a:	6033      	str	r3, [r6, #0]
 800708c:	bf14      	ite	ne
 800708e:	230a      	movne	r3, #10
 8007090:	2308      	moveq	r3, #8
 8007092:	4850      	ldr	r0, [pc, #320]	@ (80071d4 <_printf_i+0x234>)
 8007094:	2100      	movs	r1, #0
 8007096:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800709a:	6866      	ldr	r6, [r4, #4]
 800709c:	2e00      	cmp	r6, #0
 800709e:	60a6      	str	r6, [r4, #8]
 80070a0:	db05      	blt.n	80070ae <_printf_i+0x10e>
 80070a2:	6821      	ldr	r1, [r4, #0]
 80070a4:	432e      	orrs	r6, r5
 80070a6:	f021 0104 	bic.w	r1, r1, #4
 80070aa:	6021      	str	r1, [r4, #0]
 80070ac:	d04b      	beq.n	8007146 <_printf_i+0x1a6>
 80070ae:	4616      	mov	r6, r2
 80070b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80070b4:	fb03 5711 	mls	r7, r3, r1, r5
 80070b8:	5dc7      	ldrb	r7, [r0, r7]
 80070ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80070be:	462f      	mov	r7, r5
 80070c0:	42bb      	cmp	r3, r7
 80070c2:	460d      	mov	r5, r1
 80070c4:	d9f4      	bls.n	80070b0 <_printf_i+0x110>
 80070c6:	2b08      	cmp	r3, #8
 80070c8:	d10b      	bne.n	80070e2 <_printf_i+0x142>
 80070ca:	6823      	ldr	r3, [r4, #0]
 80070cc:	07df      	lsls	r7, r3, #31
 80070ce:	d508      	bpl.n	80070e2 <_printf_i+0x142>
 80070d0:	6923      	ldr	r3, [r4, #16]
 80070d2:	6861      	ldr	r1, [r4, #4]
 80070d4:	4299      	cmp	r1, r3
 80070d6:	bfde      	ittt	le
 80070d8:	2330      	movle	r3, #48	@ 0x30
 80070da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80070de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80070e2:	1b92      	subs	r2, r2, r6
 80070e4:	6122      	str	r2, [r4, #16]
 80070e6:	464b      	mov	r3, r9
 80070e8:	4621      	mov	r1, r4
 80070ea:	4640      	mov	r0, r8
 80070ec:	f8cd a000 	str.w	sl, [sp]
 80070f0:	aa03      	add	r2, sp, #12
 80070f2:	f7ff fee3 	bl	8006ebc <_printf_common>
 80070f6:	3001      	adds	r0, #1
 80070f8:	d14a      	bne.n	8007190 <_printf_i+0x1f0>
 80070fa:	f04f 30ff 	mov.w	r0, #4294967295
 80070fe:	b004      	add	sp, #16
 8007100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007104:	6823      	ldr	r3, [r4, #0]
 8007106:	f043 0320 	orr.w	r3, r3, #32
 800710a:	6023      	str	r3, [r4, #0]
 800710c:	2778      	movs	r7, #120	@ 0x78
 800710e:	4832      	ldr	r0, [pc, #200]	@ (80071d8 <_printf_i+0x238>)
 8007110:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007114:	6823      	ldr	r3, [r4, #0]
 8007116:	6831      	ldr	r1, [r6, #0]
 8007118:	061f      	lsls	r7, r3, #24
 800711a:	f851 5b04 	ldr.w	r5, [r1], #4
 800711e:	d402      	bmi.n	8007126 <_printf_i+0x186>
 8007120:	065f      	lsls	r7, r3, #25
 8007122:	bf48      	it	mi
 8007124:	b2ad      	uxthmi	r5, r5
 8007126:	6031      	str	r1, [r6, #0]
 8007128:	07d9      	lsls	r1, r3, #31
 800712a:	bf44      	itt	mi
 800712c:	f043 0320 	orrmi.w	r3, r3, #32
 8007130:	6023      	strmi	r3, [r4, #0]
 8007132:	b11d      	cbz	r5, 800713c <_printf_i+0x19c>
 8007134:	2310      	movs	r3, #16
 8007136:	e7ad      	b.n	8007094 <_printf_i+0xf4>
 8007138:	4826      	ldr	r0, [pc, #152]	@ (80071d4 <_printf_i+0x234>)
 800713a:	e7e9      	b.n	8007110 <_printf_i+0x170>
 800713c:	6823      	ldr	r3, [r4, #0]
 800713e:	f023 0320 	bic.w	r3, r3, #32
 8007142:	6023      	str	r3, [r4, #0]
 8007144:	e7f6      	b.n	8007134 <_printf_i+0x194>
 8007146:	4616      	mov	r6, r2
 8007148:	e7bd      	b.n	80070c6 <_printf_i+0x126>
 800714a:	6833      	ldr	r3, [r6, #0]
 800714c:	6825      	ldr	r5, [r4, #0]
 800714e:	1d18      	adds	r0, r3, #4
 8007150:	6961      	ldr	r1, [r4, #20]
 8007152:	6030      	str	r0, [r6, #0]
 8007154:	062e      	lsls	r6, r5, #24
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	d501      	bpl.n	800715e <_printf_i+0x1be>
 800715a:	6019      	str	r1, [r3, #0]
 800715c:	e002      	b.n	8007164 <_printf_i+0x1c4>
 800715e:	0668      	lsls	r0, r5, #25
 8007160:	d5fb      	bpl.n	800715a <_printf_i+0x1ba>
 8007162:	8019      	strh	r1, [r3, #0]
 8007164:	2300      	movs	r3, #0
 8007166:	4616      	mov	r6, r2
 8007168:	6123      	str	r3, [r4, #16]
 800716a:	e7bc      	b.n	80070e6 <_printf_i+0x146>
 800716c:	6833      	ldr	r3, [r6, #0]
 800716e:	2100      	movs	r1, #0
 8007170:	1d1a      	adds	r2, r3, #4
 8007172:	6032      	str	r2, [r6, #0]
 8007174:	681e      	ldr	r6, [r3, #0]
 8007176:	6862      	ldr	r2, [r4, #4]
 8007178:	4630      	mov	r0, r6
 800717a:	f000 f95b 	bl	8007434 <memchr>
 800717e:	b108      	cbz	r0, 8007184 <_printf_i+0x1e4>
 8007180:	1b80      	subs	r0, r0, r6
 8007182:	6060      	str	r0, [r4, #4]
 8007184:	6863      	ldr	r3, [r4, #4]
 8007186:	6123      	str	r3, [r4, #16]
 8007188:	2300      	movs	r3, #0
 800718a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800718e:	e7aa      	b.n	80070e6 <_printf_i+0x146>
 8007190:	4632      	mov	r2, r6
 8007192:	4649      	mov	r1, r9
 8007194:	4640      	mov	r0, r8
 8007196:	6923      	ldr	r3, [r4, #16]
 8007198:	47d0      	blx	sl
 800719a:	3001      	adds	r0, #1
 800719c:	d0ad      	beq.n	80070fa <_printf_i+0x15a>
 800719e:	6823      	ldr	r3, [r4, #0]
 80071a0:	079b      	lsls	r3, r3, #30
 80071a2:	d413      	bmi.n	80071cc <_printf_i+0x22c>
 80071a4:	68e0      	ldr	r0, [r4, #12]
 80071a6:	9b03      	ldr	r3, [sp, #12]
 80071a8:	4298      	cmp	r0, r3
 80071aa:	bfb8      	it	lt
 80071ac:	4618      	movlt	r0, r3
 80071ae:	e7a6      	b.n	80070fe <_printf_i+0x15e>
 80071b0:	2301      	movs	r3, #1
 80071b2:	4632      	mov	r2, r6
 80071b4:	4649      	mov	r1, r9
 80071b6:	4640      	mov	r0, r8
 80071b8:	47d0      	blx	sl
 80071ba:	3001      	adds	r0, #1
 80071bc:	d09d      	beq.n	80070fa <_printf_i+0x15a>
 80071be:	3501      	adds	r5, #1
 80071c0:	68e3      	ldr	r3, [r4, #12]
 80071c2:	9903      	ldr	r1, [sp, #12]
 80071c4:	1a5b      	subs	r3, r3, r1
 80071c6:	42ab      	cmp	r3, r5
 80071c8:	dcf2      	bgt.n	80071b0 <_printf_i+0x210>
 80071ca:	e7eb      	b.n	80071a4 <_printf_i+0x204>
 80071cc:	2500      	movs	r5, #0
 80071ce:	f104 0619 	add.w	r6, r4, #25
 80071d2:	e7f5      	b.n	80071c0 <_printf_i+0x220>
 80071d4:	08007675 	.word	0x08007675
 80071d8:	08007686 	.word	0x08007686

080071dc <__sflush_r>:
 80071dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80071e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071e2:	0716      	lsls	r6, r2, #28
 80071e4:	4605      	mov	r5, r0
 80071e6:	460c      	mov	r4, r1
 80071e8:	d454      	bmi.n	8007294 <__sflush_r+0xb8>
 80071ea:	684b      	ldr	r3, [r1, #4]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	dc02      	bgt.n	80071f6 <__sflush_r+0x1a>
 80071f0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	dd48      	ble.n	8007288 <__sflush_r+0xac>
 80071f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80071f8:	2e00      	cmp	r6, #0
 80071fa:	d045      	beq.n	8007288 <__sflush_r+0xac>
 80071fc:	2300      	movs	r3, #0
 80071fe:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007202:	682f      	ldr	r7, [r5, #0]
 8007204:	6a21      	ldr	r1, [r4, #32]
 8007206:	602b      	str	r3, [r5, #0]
 8007208:	d030      	beq.n	800726c <__sflush_r+0x90>
 800720a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800720c:	89a3      	ldrh	r3, [r4, #12]
 800720e:	0759      	lsls	r1, r3, #29
 8007210:	d505      	bpl.n	800721e <__sflush_r+0x42>
 8007212:	6863      	ldr	r3, [r4, #4]
 8007214:	1ad2      	subs	r2, r2, r3
 8007216:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007218:	b10b      	cbz	r3, 800721e <__sflush_r+0x42>
 800721a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800721c:	1ad2      	subs	r2, r2, r3
 800721e:	2300      	movs	r3, #0
 8007220:	4628      	mov	r0, r5
 8007222:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007224:	6a21      	ldr	r1, [r4, #32]
 8007226:	47b0      	blx	r6
 8007228:	1c43      	adds	r3, r0, #1
 800722a:	89a3      	ldrh	r3, [r4, #12]
 800722c:	d106      	bne.n	800723c <__sflush_r+0x60>
 800722e:	6829      	ldr	r1, [r5, #0]
 8007230:	291d      	cmp	r1, #29
 8007232:	d82b      	bhi.n	800728c <__sflush_r+0xb0>
 8007234:	4a28      	ldr	r2, [pc, #160]	@ (80072d8 <__sflush_r+0xfc>)
 8007236:	40ca      	lsrs	r2, r1
 8007238:	07d6      	lsls	r6, r2, #31
 800723a:	d527      	bpl.n	800728c <__sflush_r+0xb0>
 800723c:	2200      	movs	r2, #0
 800723e:	6062      	str	r2, [r4, #4]
 8007240:	6922      	ldr	r2, [r4, #16]
 8007242:	04d9      	lsls	r1, r3, #19
 8007244:	6022      	str	r2, [r4, #0]
 8007246:	d504      	bpl.n	8007252 <__sflush_r+0x76>
 8007248:	1c42      	adds	r2, r0, #1
 800724a:	d101      	bne.n	8007250 <__sflush_r+0x74>
 800724c:	682b      	ldr	r3, [r5, #0]
 800724e:	b903      	cbnz	r3, 8007252 <__sflush_r+0x76>
 8007250:	6560      	str	r0, [r4, #84]	@ 0x54
 8007252:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007254:	602f      	str	r7, [r5, #0]
 8007256:	b1b9      	cbz	r1, 8007288 <__sflush_r+0xac>
 8007258:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800725c:	4299      	cmp	r1, r3
 800725e:	d002      	beq.n	8007266 <__sflush_r+0x8a>
 8007260:	4628      	mov	r0, r5
 8007262:	f7ff fca3 	bl	8006bac <_free_r>
 8007266:	2300      	movs	r3, #0
 8007268:	6363      	str	r3, [r4, #52]	@ 0x34
 800726a:	e00d      	b.n	8007288 <__sflush_r+0xac>
 800726c:	2301      	movs	r3, #1
 800726e:	4628      	mov	r0, r5
 8007270:	47b0      	blx	r6
 8007272:	4602      	mov	r2, r0
 8007274:	1c50      	adds	r0, r2, #1
 8007276:	d1c9      	bne.n	800720c <__sflush_r+0x30>
 8007278:	682b      	ldr	r3, [r5, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d0c6      	beq.n	800720c <__sflush_r+0x30>
 800727e:	2b1d      	cmp	r3, #29
 8007280:	d001      	beq.n	8007286 <__sflush_r+0xaa>
 8007282:	2b16      	cmp	r3, #22
 8007284:	d11d      	bne.n	80072c2 <__sflush_r+0xe6>
 8007286:	602f      	str	r7, [r5, #0]
 8007288:	2000      	movs	r0, #0
 800728a:	e021      	b.n	80072d0 <__sflush_r+0xf4>
 800728c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007290:	b21b      	sxth	r3, r3
 8007292:	e01a      	b.n	80072ca <__sflush_r+0xee>
 8007294:	690f      	ldr	r7, [r1, #16]
 8007296:	2f00      	cmp	r7, #0
 8007298:	d0f6      	beq.n	8007288 <__sflush_r+0xac>
 800729a:	0793      	lsls	r3, r2, #30
 800729c:	bf18      	it	ne
 800729e:	2300      	movne	r3, #0
 80072a0:	680e      	ldr	r6, [r1, #0]
 80072a2:	bf08      	it	eq
 80072a4:	694b      	ldreq	r3, [r1, #20]
 80072a6:	1bf6      	subs	r6, r6, r7
 80072a8:	600f      	str	r7, [r1, #0]
 80072aa:	608b      	str	r3, [r1, #8]
 80072ac:	2e00      	cmp	r6, #0
 80072ae:	ddeb      	ble.n	8007288 <__sflush_r+0xac>
 80072b0:	4633      	mov	r3, r6
 80072b2:	463a      	mov	r2, r7
 80072b4:	4628      	mov	r0, r5
 80072b6:	6a21      	ldr	r1, [r4, #32]
 80072b8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80072bc:	47e0      	blx	ip
 80072be:	2800      	cmp	r0, #0
 80072c0:	dc07      	bgt.n	80072d2 <__sflush_r+0xf6>
 80072c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072ca:	f04f 30ff 	mov.w	r0, #4294967295
 80072ce:	81a3      	strh	r3, [r4, #12]
 80072d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072d2:	4407      	add	r7, r0
 80072d4:	1a36      	subs	r6, r6, r0
 80072d6:	e7e9      	b.n	80072ac <__sflush_r+0xd0>
 80072d8:	20400001 	.word	0x20400001

080072dc <_fflush_r>:
 80072dc:	b538      	push	{r3, r4, r5, lr}
 80072de:	690b      	ldr	r3, [r1, #16]
 80072e0:	4605      	mov	r5, r0
 80072e2:	460c      	mov	r4, r1
 80072e4:	b913      	cbnz	r3, 80072ec <_fflush_r+0x10>
 80072e6:	2500      	movs	r5, #0
 80072e8:	4628      	mov	r0, r5
 80072ea:	bd38      	pop	{r3, r4, r5, pc}
 80072ec:	b118      	cbz	r0, 80072f6 <_fflush_r+0x1a>
 80072ee:	6a03      	ldr	r3, [r0, #32]
 80072f0:	b90b      	cbnz	r3, 80072f6 <_fflush_r+0x1a>
 80072f2:	f7ff fa51 	bl	8006798 <__sinit>
 80072f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d0f3      	beq.n	80072e6 <_fflush_r+0xa>
 80072fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007300:	07d0      	lsls	r0, r2, #31
 8007302:	d404      	bmi.n	800730e <_fflush_r+0x32>
 8007304:	0599      	lsls	r1, r3, #22
 8007306:	d402      	bmi.n	800730e <_fflush_r+0x32>
 8007308:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800730a:	f7ff fc4c 	bl	8006ba6 <__retarget_lock_acquire_recursive>
 800730e:	4628      	mov	r0, r5
 8007310:	4621      	mov	r1, r4
 8007312:	f7ff ff63 	bl	80071dc <__sflush_r>
 8007316:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007318:	4605      	mov	r5, r0
 800731a:	07da      	lsls	r2, r3, #31
 800731c:	d4e4      	bmi.n	80072e8 <_fflush_r+0xc>
 800731e:	89a3      	ldrh	r3, [r4, #12]
 8007320:	059b      	lsls	r3, r3, #22
 8007322:	d4e1      	bmi.n	80072e8 <_fflush_r+0xc>
 8007324:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007326:	f7ff fc3f 	bl	8006ba8 <__retarget_lock_release_recursive>
 800732a:	e7dd      	b.n	80072e8 <_fflush_r+0xc>

0800732c <__swhatbuf_r>:
 800732c:	b570      	push	{r4, r5, r6, lr}
 800732e:	460c      	mov	r4, r1
 8007330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007334:	4615      	mov	r5, r2
 8007336:	2900      	cmp	r1, #0
 8007338:	461e      	mov	r6, r3
 800733a:	b096      	sub	sp, #88	@ 0x58
 800733c:	da0c      	bge.n	8007358 <__swhatbuf_r+0x2c>
 800733e:	89a3      	ldrh	r3, [r4, #12]
 8007340:	2100      	movs	r1, #0
 8007342:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007346:	bf14      	ite	ne
 8007348:	2340      	movne	r3, #64	@ 0x40
 800734a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800734e:	2000      	movs	r0, #0
 8007350:	6031      	str	r1, [r6, #0]
 8007352:	602b      	str	r3, [r5, #0]
 8007354:	b016      	add	sp, #88	@ 0x58
 8007356:	bd70      	pop	{r4, r5, r6, pc}
 8007358:	466a      	mov	r2, sp
 800735a:	f000 f849 	bl	80073f0 <_fstat_r>
 800735e:	2800      	cmp	r0, #0
 8007360:	dbed      	blt.n	800733e <__swhatbuf_r+0x12>
 8007362:	9901      	ldr	r1, [sp, #4]
 8007364:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007368:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800736c:	4259      	negs	r1, r3
 800736e:	4159      	adcs	r1, r3
 8007370:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007374:	e7eb      	b.n	800734e <__swhatbuf_r+0x22>

08007376 <__smakebuf_r>:
 8007376:	898b      	ldrh	r3, [r1, #12]
 8007378:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800737a:	079d      	lsls	r5, r3, #30
 800737c:	4606      	mov	r6, r0
 800737e:	460c      	mov	r4, r1
 8007380:	d507      	bpl.n	8007392 <__smakebuf_r+0x1c>
 8007382:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007386:	6023      	str	r3, [r4, #0]
 8007388:	6123      	str	r3, [r4, #16]
 800738a:	2301      	movs	r3, #1
 800738c:	6163      	str	r3, [r4, #20]
 800738e:	b003      	add	sp, #12
 8007390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007392:	466a      	mov	r2, sp
 8007394:	ab01      	add	r3, sp, #4
 8007396:	f7ff ffc9 	bl	800732c <__swhatbuf_r>
 800739a:	9f00      	ldr	r7, [sp, #0]
 800739c:	4605      	mov	r5, r0
 800739e:	4639      	mov	r1, r7
 80073a0:	4630      	mov	r0, r6
 80073a2:	f7ff f8e1 	bl	8006568 <_malloc_r>
 80073a6:	b948      	cbnz	r0, 80073bc <__smakebuf_r+0x46>
 80073a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073ac:	059a      	lsls	r2, r3, #22
 80073ae:	d4ee      	bmi.n	800738e <__smakebuf_r+0x18>
 80073b0:	f023 0303 	bic.w	r3, r3, #3
 80073b4:	f043 0302 	orr.w	r3, r3, #2
 80073b8:	81a3      	strh	r3, [r4, #12]
 80073ba:	e7e2      	b.n	8007382 <__smakebuf_r+0xc>
 80073bc:	89a3      	ldrh	r3, [r4, #12]
 80073be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80073c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073c6:	81a3      	strh	r3, [r4, #12]
 80073c8:	9b01      	ldr	r3, [sp, #4]
 80073ca:	6020      	str	r0, [r4, #0]
 80073cc:	b15b      	cbz	r3, 80073e6 <__smakebuf_r+0x70>
 80073ce:	4630      	mov	r0, r6
 80073d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073d4:	f000 f81e 	bl	8007414 <_isatty_r>
 80073d8:	b128      	cbz	r0, 80073e6 <__smakebuf_r+0x70>
 80073da:	89a3      	ldrh	r3, [r4, #12]
 80073dc:	f023 0303 	bic.w	r3, r3, #3
 80073e0:	f043 0301 	orr.w	r3, r3, #1
 80073e4:	81a3      	strh	r3, [r4, #12]
 80073e6:	89a3      	ldrh	r3, [r4, #12]
 80073e8:	431d      	orrs	r5, r3
 80073ea:	81a5      	strh	r5, [r4, #12]
 80073ec:	e7cf      	b.n	800738e <__smakebuf_r+0x18>
	...

080073f0 <_fstat_r>:
 80073f0:	b538      	push	{r3, r4, r5, lr}
 80073f2:	2300      	movs	r3, #0
 80073f4:	4d06      	ldr	r5, [pc, #24]	@ (8007410 <_fstat_r+0x20>)
 80073f6:	4604      	mov	r4, r0
 80073f8:	4608      	mov	r0, r1
 80073fa:	4611      	mov	r1, r2
 80073fc:	602b      	str	r3, [r5, #0]
 80073fe:	f7f9 fa5f 	bl	80008c0 <_fstat>
 8007402:	1c43      	adds	r3, r0, #1
 8007404:	d102      	bne.n	800740c <_fstat_r+0x1c>
 8007406:	682b      	ldr	r3, [r5, #0]
 8007408:	b103      	cbz	r3, 800740c <_fstat_r+0x1c>
 800740a:	6023      	str	r3, [r4, #0]
 800740c:	bd38      	pop	{r3, r4, r5, pc}
 800740e:	bf00      	nop
 8007410:	20001ce4 	.word	0x20001ce4

08007414 <_isatty_r>:
 8007414:	b538      	push	{r3, r4, r5, lr}
 8007416:	2300      	movs	r3, #0
 8007418:	4d05      	ldr	r5, [pc, #20]	@ (8007430 <_isatty_r+0x1c>)
 800741a:	4604      	mov	r4, r0
 800741c:	4608      	mov	r0, r1
 800741e:	602b      	str	r3, [r5, #0]
 8007420:	f7f9 fa5d 	bl	80008de <_isatty>
 8007424:	1c43      	adds	r3, r0, #1
 8007426:	d102      	bne.n	800742e <_isatty_r+0x1a>
 8007428:	682b      	ldr	r3, [r5, #0]
 800742a:	b103      	cbz	r3, 800742e <_isatty_r+0x1a>
 800742c:	6023      	str	r3, [r4, #0]
 800742e:	bd38      	pop	{r3, r4, r5, pc}
 8007430:	20001ce4 	.word	0x20001ce4

08007434 <memchr>:
 8007434:	4603      	mov	r3, r0
 8007436:	b510      	push	{r4, lr}
 8007438:	b2c9      	uxtb	r1, r1
 800743a:	4402      	add	r2, r0
 800743c:	4293      	cmp	r3, r2
 800743e:	4618      	mov	r0, r3
 8007440:	d101      	bne.n	8007446 <memchr+0x12>
 8007442:	2000      	movs	r0, #0
 8007444:	e003      	b.n	800744e <memchr+0x1a>
 8007446:	7804      	ldrb	r4, [r0, #0]
 8007448:	3301      	adds	r3, #1
 800744a:	428c      	cmp	r4, r1
 800744c:	d1f6      	bne.n	800743c <memchr+0x8>
 800744e:	bd10      	pop	{r4, pc}

08007450 <_init>:
 8007450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007452:	bf00      	nop
 8007454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007456:	bc08      	pop	{r3}
 8007458:	469e      	mov	lr, r3
 800745a:	4770      	bx	lr

0800745c <_fini>:
 800745c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800745e:	bf00      	nop
 8007460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007462:	bc08      	pop	{r3}
 8007464:	469e      	mov	lr, r3
 8007466:	4770      	bx	lr
